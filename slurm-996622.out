pybullet build time: Nov 28 2023 23:45:17
Save path for results: /home/a/acw799/cliport/exps_clipfit/packing-seen-google-objects-group-clipfit-n10-train/checkpoints/
Evaluating: ['steps=00040-val_loss=0.00020419.ckpt', 'steps=00080-val_loss=0.00020305.ckpt', 'steps=00120-val_loss=0.00019314.ckpt', 'steps=00160-val_loss=0.00020647.ckpt', 'steps=00200-val_loss=0.00020025.ckpt']
[2025-02-08 20:29:52,227][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 20:29:52,808][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 20:29:59,806][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Attn FCN: conceptfusion_sam2
[2025-02-08 20:30:42,974][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 20:30:43,163][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 20:30:50,220][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
[2025-02-08 20:31:00,113][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 20:31:00,300][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 20:31:06,904][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Transport FCN: <class 'cliport.models.conceptfusion_sam2.conceptfusion_sam2'>, <class 'cliport.models.conceptfusion_sam2.conceptfusion_sam2_kernel'>
[2025-02-08 20:31:14,142][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 20:31:14,318][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 20:31:20,842][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Agent: packing-seen-google-objects-group-clipfit-n50, Logging: False
Loaded: /home/a/acw799/cliport/exps_clipfit/packing-seen-google-objects-group-clipfit-n10-train/checkpoints/steps=00040-val_loss=0.00020419.ckpt
Test: 1/50
[2025-02-08 20:32:07,200][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:32:07,448][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:32:09,340][root][INFO] - Image embeddings computed.
/gpfs/home/a/acw799/sam2/sam2/modeling/sam/transformer.py:271: UserWarning: Memory efficient kernel not used because: (Triggered internally at ../aten/src/ATen/native/transformers/cuda/sdp_utils.cpp:723.)
  out = F.scaled_dot_product_attention(q, k, v, dropout_p=dropout_p)
/gpfs/home/a/acw799/sam2/sam2/modeling/sam/transformer.py:271: UserWarning: Memory Efficient attention has been runtime disabled. (Triggered internally at ../aten/src/ATen/native/transformers/sdp_utils_cpp.h:495.)
  out = F.scaled_dot_product_attention(q, k, v, dropout_p=dropout_p)
/gpfs/home/a/acw799/sam2/sam2/modeling/sam/transformer.py:271: UserWarning: Flash attention kernel not used because: (Triggered internally at ../aten/src/ATen/native/transformers/cuda/sdp_utils.cpp:725.)
  out = F.scaled_dot_product_attention(q, k, v, dropout_p=dropout_p)
/gpfs/home/a/acw799/sam2/sam2/modeling/sam/transformer.py:271: UserWarning: Expected query, key and value to all be of dtype: {Half, BFloat16}. Got Query dtype: float, Key dtype: float, and Value dtype: float instead. (Triggered internally at ../aten/src/ATen/native/transformers/sdp_utils_cpp.h:98.)
  out = F.scaled_dot_product_attention(q, k, v, dropout_p=dropout_p)
/gpfs/home/a/acw799/sam2/sam2/modeling/sam/transformer.py:271: UserWarning: CuDNN attention kernel not used because: (Triggered internally at ../aten/src/ATen/native/transformers/cuda/sdp_utils.cpp:727.)
  out = F.scaled_dot_product_attention(q, k, v, dropout_p=dropout_p)
/gpfs/home/a/acw799/sam2/sam2/modeling/sam/transformer.py:271: UserWarning: The CuDNN backend needs to be enabled by setting the enviornment variable`TORCH_CUDNN_SDPA_ENABLED=1` (Triggered internally at ../aten/src/ATen/native/transformers/cuda/sdp_utils.cpp:496.)
  out = F.scaled_dot_product_attention(q, k, v, dropout_p=dropout_p)
/home/a/acw799/.local/lib/python3.10/site-packages/torch/nn/modules/module.py:1562: UserWarning: Flash Attention kernel failed due to: No available kernel. Aborting execution.
Falling back to all available kernels for scaled_dot_product_attention (which may have a slower speed).
  return forward_call(*args, **kwargs)
[2025-02-08 20:32:27,565][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:32:27,705][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:32:27,725][root][INFO] - Image embeddings computed.
[2025-02-08 20:32:31,824][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:32:32,020][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:32:32,041][root][INFO] - Image embeddings computed.
[2025-02-08 20:32:36,181][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:32:36,372][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:32:36,393][root][INFO] - Image embeddings computed.
[2025-02-08 20:32:40,499][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:32:40,692][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:32:40,713][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 19
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-08 20:32:58,355][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:32:58,454][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:32:58,475][root][INFO] - Image embeddings computed.
[2025-02-08 20:33:14,698][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:33:14,895][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:33:14,916][root][INFO] - Image embeddings computed.
[2025-02-08 20:33:19,012][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:33:19,182][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:33:19,203][root][INFO] - Image embeddings computed.
[2025-02-08 20:33:23,334][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:33:23,454][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:33:23,475][root][INFO] - Image embeddings computed.
[2025-02-08 20:33:27,609][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:33:27,703][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:33:27,724][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 12
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-08 20:33:41,741][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:33:41,838][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:33:41,860][root][INFO] - Image embeddings computed.
[2025-02-08 20:33:58,288][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:33:58,436][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:33:58,456][root][INFO] - Image embeddings computed.
[2025-02-08 20:34:02,571][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:34:02,696][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:34:02,717][root][INFO] - Image embeddings computed.
[2025-02-08 20:34:06,874][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:34:06,981][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:34:07,002][root][INFO] - Image embeddings computed.
[2025-02-08 20:34:11,127][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:34:11,225][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:34:11,247][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 18
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

Mean: 0.38461538461538464 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 2/50
[2025-02-08 20:34:38,754][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:34:38,885][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:34:38,912][root][INFO] - Image embeddings computed.
[2025-02-08 20:34:55,587][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:34:55,687][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:34:55,708][root][INFO] - Image embeddings computed.
[2025-02-08 20:34:59,796][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:34:59,902][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:34:59,929][root][INFO] - Image embeddings computed.
[2025-02-08 20:35:04,071][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:35:04,188][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:35:04,210][root][INFO] - Image embeddings computed.
[2025-02-08 20:35:08,368][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:35:08,464][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:35:08,486][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 16
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

[2025-02-08 20:35:24,262][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:35:24,361][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:35:24,382][root][INFO] - Image embeddings computed.
[2025-02-08 20:35:40,937][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:35:41,129][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:35:41,172][root][INFO] - Image embeddings computed.
[2025-02-08 20:35:45,260][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:35:45,364][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:35:45,384][root][INFO] - Image embeddings computed.
[2025-02-08 20:35:49,537][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:35:49,642][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:35:49,663][root][INFO] - Image embeddings computed.
[2025-02-08 20:35:53,825][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:35:53,918][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:35:53,939][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 18
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

[2025-02-08 20:36:09,915][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:36:10,015][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:36:10,043][root][INFO] - Image embeddings computed.
[2025-02-08 20:36:26,791][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:36:26,896][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:36:26,917][root][INFO] - Image embeddings computed.
[2025-02-08 20:36:31,021][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:36:31,119][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:36:31,140][root][INFO] - Image embeddings computed.
[2025-02-08 20:36:35,301][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:36:35,428][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:36:35,449][root][INFO] - Image embeddings computed.
[2025-02-08 20:36:39,612][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:36:39,717][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:36:39,738][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 20
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

[2025-02-08 20:36:56,653][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:36:56,752][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:36:56,783][root][INFO] - Image embeddings computed.
[2025-02-08 20:37:13,463][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:37:13,623][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:37:13,644][root][INFO] - Image embeddings computed.
[2025-02-08 20:37:17,742][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:37:17,858][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:37:17,879][root][INFO] - Image embeddings computed.
[2025-02-08 20:37:22,031][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:37:22,131][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:37:22,151][root][INFO] - Image embeddings computed.
[2025-02-08 20:37:26,306][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:37:26,410][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:37:26,431][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 19
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

Mean: 0.576923076923077 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 3/50
[2025-02-08 20:37:51,389][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:37:51,492][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:37:51,513][root][INFO] - Image embeddings computed.
[2025-02-08 20:38:08,196][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:38:08,294][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:38:08,315][root][INFO] - Image embeddings computed.
[2025-02-08 20:38:12,467][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:38:12,571][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:38:12,592][root][INFO] - Image embeddings computed.
[2025-02-08 20:38:16,703][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:38:16,807][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:38:16,827][root][INFO] - Image embeddings computed.
[2025-02-08 20:38:20,971][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:38:21,067][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:38:21,089][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 11
Lang Goal: pack all the rocket racoon figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 20:38:36,599][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:38:36,715][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:38:36,735][root][INFO] - Image embeddings computed.
[2025-02-08 20:38:53,315][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:38:53,415][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:38:53,435][root][INFO] - Image embeddings computed.
[2025-02-08 20:38:57,571][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:38:57,669][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:38:57,689][root][INFO] - Image embeddings computed.
[2025-02-08 20:39:01,806][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:39:01,909][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:39:01,929][root][INFO] - Image embeddings computed.
[2025-02-08 20:39:06,071][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:39:06,203][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:39:06,223][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 8
Lang Goal: pack all the rocket racoon figure objects in the brown box
Total Reward: 0.875 | Done: False

[2025-02-08 20:39:19,221][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:39:19,231][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:39:19,252][root][INFO] - Image embeddings computed.
[2025-02-08 20:39:35,728][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:39:35,736][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:39:35,756][root][INFO] - Image embeddings computed.
[2025-02-08 20:39:39,887][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:39:39,907][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:39:39,927][root][INFO] - Image embeddings computed.
[2025-02-08 20:39:44,048][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:39:44,057][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:39:44,077][root][INFO] - Image embeddings computed.
[2025-02-08 20:39:48,219][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:39:48,229][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:39:48,249][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 10
Lang Goal: pack all the rocket racoon figure objects in the brown box
Total Reward: 0.875 | Done: False

Mean: 0.6762820512820514 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 4/50
[2025-02-08 20:40:12,899][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:40:12,916][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:40:12,937][root][INFO] - Image embeddings computed.
[2025-02-08 20:40:29,354][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:40:29,364][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:40:29,384][root][INFO] - Image embeddings computed.
[2025-02-08 20:40:33,496][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:40:33,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:40:33,527][root][INFO] - Image embeddings computed.
[2025-02-08 20:40:37,651][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:40:37,661][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:40:37,681][root][INFO] - Image embeddings computed.
[2025-02-08 20:40:41,786][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:40:41,795][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:40:41,815][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 15
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 0.250 | Done: False

[2025-02-08 20:40:58,995][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:40:59,105][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:40:59,125][root][INFO] - Image embeddings computed.
[2025-02-08 20:41:15,483][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:41:15,586][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:41:15,607][root][INFO] - Image embeddings computed.
[2025-02-08 20:41:19,716][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:41:19,815][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:41:19,837][root][INFO] - Image embeddings computed.
[2025-02-08 20:41:23,968][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:41:24,066][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:41:24,087][root][INFO] - Image embeddings computed.
[2025-02-08 20:41:28,187][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:41:28,318][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:41:28,339][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 17
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 20:41:47,081][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:41:47,182][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:41:47,203][root][INFO] - Image embeddings computed.
[2025-02-08 20:42:03,609][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:42:03,727][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:42:03,748][root][INFO] - Image embeddings computed.
[2025-02-08 20:42:07,863][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:42:08,012][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:42:08,033][root][INFO] - Image embeddings computed.
[2025-02-08 20:42:12,164][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:42:12,267][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:42:12,300][root][INFO] - Image embeddings computed.
[2025-02-08 20:42:16,401][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:42:16,498][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:42:16,519][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 13
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.7572115384615385 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 5/50
[2025-02-08 20:42:44,489][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:42:44,608][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:42:44,629][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:01,087][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:01,194][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:01,215][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:05,351][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:05,463][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:05,483][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:09,624][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:09,726][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:09,746][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:13,877][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:13,984][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:14,005][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 9
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-08 20:43:30,742][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:30,876][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:30,897][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:47,164][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:47,268][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:47,289][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:51,430][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:51,539][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:51,560][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:55,690][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:43:55,789][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:43:55,809][root][INFO] - Image embeddings computed.
[2025-02-08 20:43:59,942][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:44:00,056][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:44:00,077][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 11
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.8057692307692308 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 6/50
[2025-02-08 20:44:25,491][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:44:25,594][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:44:25,619][root][INFO] - Image embeddings computed.
[2025-02-08 20:44:42,310][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:44:42,429][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:44:42,460][root][INFO] - Image embeddings computed.
[2025-02-08 20:44:46,583][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:44:46,682][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:44:46,703][root][INFO] - Image embeddings computed.
[2025-02-08 20:44:50,844][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:44:50,971][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:44:50,993][root][INFO] - Image embeddings computed.
[2025-02-08 20:44:55,095][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:44:55,214][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:44:55,235][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 14
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.455 | Done: False

[2025-02-08 20:45:13,671][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:45:13,770][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:45:13,791][root][INFO] - Image embeddings computed.
[2025-02-08 20:45:30,216][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:45:30,321][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:45:30,342][root][INFO] - Image embeddings computed.
[2025-02-08 20:45:34,462][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:45:34,572][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:45:34,599][root][INFO] - Image embeddings computed.
[2025-02-08 20:45:38,722][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:45:38,815][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:45:38,836][root][INFO] - Image embeddings computed.
[2025-02-08 20:45:42,944][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:45:43,046][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:45:43,067][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 22
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.455 | Done: False

[2025-02-08 20:46:01,392][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:46:01,506][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:46:01,527][root][INFO] - Image embeddings computed.
[2025-02-08 20:46:18,080][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:46:18,178][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:46:18,199][root][INFO] - Image embeddings computed.
[2025-02-08 20:46:22,317][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:46:22,410][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:46:22,431][root][INFO] - Image embeddings computed.
[2025-02-08 20:46:26,569][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:46:26,662][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:46:26,682][root][INFO] - Image embeddings computed.
[2025-02-08 20:46:30,785][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:46:30,884][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:46:30,905][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 19
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.455 | Done: False

Mean: 0.7472319347319347 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 7/50
[2025-02-08 20:46:56,174][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:46:56,187][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:46:56,207][root][INFO] - Image embeddings computed.
[2025-02-08 20:47:12,724][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:47:12,733][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:47:12,753][root][INFO] - Image embeddings computed.
[2025-02-08 20:47:16,870][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:47:16,880][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:47:16,900][root][INFO] - Image embeddings computed.
[2025-02-08 20:47:21,022][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:47:21,032][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:47:21,052][root][INFO] - Image embeddings computed.
[2025-02-08 20:47:25,150][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:47:25,160][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:47:25,181][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 9
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.400 | Done: False

[2025-02-08 20:47:39,422][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:47:39,440][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:47:39,460][root][INFO] - Image embeddings computed.
[2025-02-08 20:47:55,814][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:47:55,824][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:47:55,844][root][INFO] - Image embeddings computed.
[2025-02-08 20:47:59,975][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:47:59,980][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:00,000][root][INFO] - Image embeddings computed.
[2025-02-08 20:48:04,128][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:48:04,136][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:04,156][root][INFO] - Image embeddings computed.
[2025-02-08 20:48:08,258][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:48:08,304][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:08,324][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 15
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.400 | Done: False

[2025-02-08 20:48:22,349][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:48:22,362][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:22,382][root][INFO] - Image embeddings computed.
[2025-02-08 20:48:38,733][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:48:38,742][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:38,763][root][INFO] - Image embeddings computed.
[2025-02-08 20:48:42,887][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:48:42,897][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:42,917][root][INFO] - Image embeddings computed.
[2025-02-08 20:48:47,050][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:48:47,060][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:47,080][root][INFO] - Image embeddings computed.
[2025-02-08 20:48:51,184][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:48:51,195][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:48:51,215][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 10
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.400 | Done: False

Mean: 0.6976273726273726 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 8/50
[2025-02-08 20:49:19,871][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:49:19,883][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:49:19,903][root][INFO] - Image embeddings computed.
[2025-02-08 20:49:36,399][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:49:36,409][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:49:36,429][root][INFO] - Image embeddings computed.
[2025-02-08 20:49:40,537][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:49:40,547][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:49:40,567][root][INFO] - Image embeddings computed.
[2025-02-08 20:49:44,698][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:49:44,707][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:49:44,727][root][INFO] - Image embeddings computed.
[2025-02-08 20:49:48,821][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:49:48,830][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:49:48,850][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 25
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 20:50:04,379][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:50:04,390][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:50:04,411][root][INFO] - Image embeddings computed.
[2025-02-08 20:50:20,848][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:50:20,860][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:50:20,880][root][INFO] - Image embeddings computed.
[2025-02-08 20:50:24,985][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:50:25,084][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:50:25,104][root][INFO] - Image embeddings computed.
[2025-02-08 20:50:29,241][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:50:29,340][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:50:29,360][root][INFO] - Image embeddings computed.
[2025-02-08 20:50:33,474][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:50:33,650][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:50:33,675][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 22
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 20:50:51,032][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:50:51,045][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:50:51,065][root][INFO] - Image embeddings computed.
[2025-02-08 20:51:07,219][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:51:07,230][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:51:07,251][root][INFO] - Image embeddings computed.
[2025-02-08 20:51:11,359][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:51:11,371][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:51:11,391][root][INFO] - Image embeddings computed.
[2025-02-08 20:51:15,532][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:51:15,540][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:51:15,561][root][INFO] - Image embeddings computed.
[2025-02-08 20:51:19,669][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:51:19,678][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:51:19,698][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 27
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.6104239510489511 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 9/50
[2025-02-08 20:51:49,732][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:51:49,850][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:51:49,871][root][INFO] - Image embeddings computed.
[2025-02-08 20:52:06,560][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:52:06,657][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:52:06,678][root][INFO] - Image embeddings computed.
[2025-02-08 20:52:10,792][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:52:10,905][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:52:10,926][root][INFO] - Image embeddings computed.
[2025-02-08 20:52:15,072][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:52:15,184][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:52:15,205][root][INFO] - Image embeddings computed.
[2025-02-08 20:52:19,323][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:52:19,421][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:52:19,442][root][INFO] - Image embeddings computed.
The number of original masks: 47
The number of filtered masks: 28
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.404 | Done: False

[2025-02-08 20:52:39,631][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:52:39,733][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:52:39,754][root][INFO] - Image embeddings computed.
[2025-02-08 20:52:56,173][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:52:56,272][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:52:56,293][root][INFO] - Image embeddings computed.
[2025-02-08 20:53:00,420][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:00,529][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:00,550][root][INFO] - Image embeddings computed.
[2025-02-08 20:53:04,717][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:04,827][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:04,848][root][INFO] - Image embeddings computed.
[2025-02-08 20:53:08,946][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:09,051][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:09,072][root][INFO] - Image embeddings computed.
The number of original masks: 53
The number of filtered masks: 30
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.213 | Done: False

[2025-02-08 20:53:28,369][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:28,382][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:28,403][root][INFO] - Image embeddings computed.
[2025-02-08 20:53:44,789][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:44,799][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:44,819][root][INFO] - Image embeddings computed.
[2025-02-08 20:53:48,945][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:48,952][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:48,972][root][INFO] - Image embeddings computed.
[2025-02-08 20:53:53,130][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:53,141][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:53,161][root][INFO] - Image embeddings computed.
[2025-02-08 20:53:57,259][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:53:57,269][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:53:57,289][root][INFO] - Image embeddings computed.
The number of original masks: 47
The number of filtered masks: 24
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.340 | Done: False

[2025-02-08 20:54:13,857][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:54:13,868][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:54:13,889][root][INFO] - Image embeddings computed.
[2025-02-08 20:54:30,248][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:54:30,257][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:54:30,278][root][INFO] - Image embeddings computed.
[2025-02-08 20:54:34,410][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:54:34,418][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:54:34,438][root][INFO] - Image embeddings computed.
[2025-02-08 20:54:38,576][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:54:38,581][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:54:38,601][root][INFO] - Image embeddings computed.
[2025-02-08 20:54:42,708][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:54:42,713][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:54:42,733][root][INFO] - Image embeddings computed.
The number of original masks: 50
The number of filtered masks: 23
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.382 | Done: False

Mean: 0.5850827277297866 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 10/50
[2025-02-08 20:55:16,632][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:55:16,641][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:55:16,662][root][INFO] - Image embeddings computed.
[2025-02-08 20:55:33,481][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:55:33,488][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:55:33,509][root][INFO] - Image embeddings computed.
[2025-02-08 20:55:37,635][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:55:37,645][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:55:37,665][root][INFO] - Image embeddings computed.
[2025-02-08 20:55:41,797][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:55:41,806][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:55:41,826][root][INFO] - Image embeddings computed.
[2025-02-08 20:55:45,956][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:55:45,965][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:55:45,985][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 13
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.441 | Done: False

[2025-02-08 20:56:07,795][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:56:07,896][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:56:07,917][root][INFO] - Image embeddings computed.
[2025-02-08 20:56:24,613][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:56:24,722][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:56:24,743][root][INFO] - Image embeddings computed.
[2025-02-08 20:56:28,860][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:56:28,963][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:56:28,984][root][INFO] - Image embeddings computed.
[2025-02-08 20:56:33,125][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:56:33,223][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:56:33,244][root][INFO] - Image embeddings computed.
[2025-02-08 20:56:37,380][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:56:37,489][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:56:37,510][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 11
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.882 | Done: False

[2025-02-08 20:56:59,279][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:56:59,406][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:56:59,427][root][INFO] - Image embeddings computed.
[2025-02-08 20:57:15,775][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:57:15,873][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:57:15,894][root][INFO] - Image embeddings computed.
[2025-02-08 20:57:20,009][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:57:20,158][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:57:20,178][root][INFO] - Image embeddings computed.
[2025-02-08 20:57:24,319][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:57:24,412][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:57:24,433][root][INFO] - Image embeddings computed.
[2025-02-08 20:57:28,573][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:57:28,708][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:57:28,729][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 13
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.882 | Done: False

[2025-02-08 20:57:51,746][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:57:51,851][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:57:51,872][root][INFO] - Image embeddings computed.
[2025-02-08 20:58:08,267][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:58:08,385][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:58:08,412][root][INFO] - Image embeddings computed.
[2025-02-08 20:58:12,523][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:58:12,646][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:58:12,667][root][INFO] - Image embeddings computed.
[2025-02-08 20:58:16,810][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:58:16,966][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:58:16,995][root][INFO] - Image embeddings computed.
[2025-02-08 20:58:21,125][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:58:21,242][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:58:21,263][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 11
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.882 | Done: False

Mean: 0.6147634313347607 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 11/50
[2025-02-08 20:58:50,500][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:58:50,516][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:58:50,537][root][INFO] - Image embeddings computed.
[2025-02-08 20:59:07,073][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:59:07,083][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:59:07,104][root][INFO] - Image embeddings computed.
[2025-02-08 20:59:11,232][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:59:11,242][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:59:11,264][root][INFO] - Image embeddings computed.
[2025-02-08 20:59:15,417][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:59:15,426][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:59:15,446][root][INFO] - Image embeddings computed.
[2025-02-08 20:59:19,542][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:59:19,552][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:59:19,572][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 13
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 20:59:39,197][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:59:39,215][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:59:39,236][root][INFO] - Image embeddings computed.
[2025-02-08 20:59:55,558][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:59:55,566][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:59:55,586][root][INFO] - Image embeddings computed.
[2025-02-08 20:59:59,707][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 20:59:59,716][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 20:59:59,736][root][INFO] - Image embeddings computed.
[2025-02-08 21:00:03,881][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:00:03,892][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:00:03,912][root][INFO] - Image embeddings computed.
[2025-02-08 21:00:08,017][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:00:08,028][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:00:08,048][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 11
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-08 21:00:26,775][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:00:26,787][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:00:26,808][root][INFO] - Image embeddings computed.
[2025-02-08 21:00:43,296][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:00:43,307][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:00:43,327][root][INFO] - Image embeddings computed.
[2025-02-08 21:00:47,453][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:00:47,457][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:00:47,478][root][INFO] - Image embeddings computed.
[2025-02-08 21:00:51,629][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:00:51,636][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:00:51,656][root][INFO] - Image embeddings computed.
[2025-02-08 21:00:55,759][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:00:55,770][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:00:55,790][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 14
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.444 | Done: False

Mean: 0.5992798870720047 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 12/50
[2025-02-08 21:01:27,360][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:01:27,504][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:01:27,526][root][INFO] - Image embeddings computed.
[2025-02-08 21:01:44,122][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:01:44,224][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:01:44,245][root][INFO] - Image embeddings computed.
[2025-02-08 21:01:48,371][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:01:48,472][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:01:48,493][root][INFO] - Image embeddings computed.
[2025-02-08 21:01:52,616][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:01:52,726][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:01:52,747][root][INFO] - Image embeddings computed.
[2025-02-08 21:01:56,877][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:01:56,975][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:01:56,996][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 12
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:02:20,779][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:02:20,888][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:02:20,909][root][INFO] - Image embeddings computed.
[2025-02-08 21:02:37,180][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:02:37,293][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:02:37,315][root][INFO] - Image embeddings computed.
[2025-02-08 21:02:41,455][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:02:41,563][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:02:41,584][root][INFO] - Image embeddings computed.
[2025-02-08 21:02:45,708][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:02:45,814][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:02:45,835][root][INFO] - Image embeddings computed.
[2025-02-08 21:02:49,969][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:02:50,094][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:02:50,115][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 11
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:03:13,390][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:03:13,493][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:03:13,514][root][INFO] - Image embeddings computed.
[2025-02-08 21:03:29,677][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:03:29,793][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:03:29,814][root][INFO] - Image embeddings computed.
[2025-02-08 21:03:33,939][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:03:34,038][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:03:34,059][root][INFO] - Image embeddings computed.
[2025-02-08 21:03:38,187][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:03:38,291][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:03:38,312][root][INFO] - Image embeddings computed.
[2025-02-08 21:03:42,454][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:03:42,552][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:03:42,573][root][INFO] - Image embeddings computed.
The number of original masks: 16
The number of filtered masks: 7
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.979 | Done: False

Mean: 0.6309371187048932 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 13/50
[2025-02-08 21:04:13,507][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:04:13,670][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:04:13,690][root][INFO] - Image embeddings computed.
[2025-02-08 21:04:30,915][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:04:31,020][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:04:31,052][root][INFO] - Image embeddings computed.
[2025-02-08 21:04:35,180][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:04:35,282][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:04:35,303][root][INFO] - Image embeddings computed.
[2025-02-08 21:04:39,440][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:04:39,538][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:04:39,560][root][INFO] - Image embeddings computed.
[2025-02-08 21:04:43,651][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:04:43,751][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:04:43,773][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 31
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:05:12,040][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:05:12,138][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:05:12,159][root][INFO] - Image embeddings computed.
[2025-02-08 21:05:28,733][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:05:28,828][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:05:28,848][root][INFO] - Image embeddings computed.
[2025-02-08 21:05:32,976][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:05:33,116][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:05:33,136][root][INFO] - Image embeddings computed.
[2025-02-08 21:05:37,278][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:05:37,371][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:05:37,391][root][INFO] - Image embeddings computed.
[2025-02-08 21:05:41,505][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:05:41,598][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:05:41,618][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 23
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:06:06,650][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:06:06,663][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:06:06,684][root][INFO] - Image embeddings computed.
[2025-02-08 21:06:23,331][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:06:23,429][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:06:23,450][root][INFO] - Image embeddings computed.
[2025-02-08 21:06:27,581][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:06:27,686][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:06:27,706][root][INFO] - Image embeddings computed.
[2025-02-08 21:06:31,872][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:06:31,965][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:06:31,986][root][INFO] - Image embeddings computed.
[2025-02-08 21:06:36,097][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:06:36,194][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:06:36,215][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 25
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.6208650326506707 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 14/50
[2025-02-08 21:07:04,453][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:07:04,463][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:07:04,483][root][INFO] - Image embeddings computed.
[2025-02-08 21:07:20,818][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:07:20,828][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:07:20,848][root][INFO] - Image embeddings computed.
[2025-02-08 21:07:24,991][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:07:25,000][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:07:25,021][root][INFO] - Image embeddings computed.
[2025-02-08 21:07:29,166][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:07:29,259][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:07:29,280][root][INFO] - Image embeddings computed.
[2025-02-08 21:07:33,386][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:07:33,558][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:07:33,594][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:07:58,249][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:07:58,388][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:07:58,409][root][INFO] - Image embeddings computed.
[2025-02-08 21:08:14,807][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:08:14,915][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:08:14,936][root][INFO] - Image embeddings computed.
[2025-02-08 21:08:19,065][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:08:19,169][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:08:19,189][root][INFO] - Image embeddings computed.
[2025-02-08 21:08:23,355][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:08:23,448][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:08:23,469][root][INFO] - Image embeddings computed.
[2025-02-08 21:08:27,576][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:08:27,736][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:08:27,757][root][INFO] - Image embeddings computed.
The number of original masks: 16
The number of filtered masks: 7
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:08:52,141][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:08:52,242][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:08:52,264][root][INFO] - Image embeddings computed.
[2025-02-08 21:09:08,860][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:09:08,964][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:09:08,985][root][INFO] - Image embeddings computed.
[2025-02-08 21:09:13,119][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:09:13,242][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:09:13,263][root][INFO] - Image embeddings computed.
[2025-02-08 21:09:17,409][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:09:17,508][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:09:17,530][root][INFO] - Image embeddings computed.
[2025-02-08 21:09:21,618][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:09:21,717][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:09:21,738][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 11
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.6479461017470515 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 15/50
[2025-02-08 21:10:03,035][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:10:03,134][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:10:03,155][root][INFO] - Image embeddings computed.
[2025-02-08 21:10:19,508][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:10:19,605][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:10:19,626][root][INFO] - Image embeddings computed.
[2025-02-08 21:10:23,739][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:10:23,838][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:10:23,859][root][INFO] - Image embeddings computed.
[2025-02-08 21:10:27,976][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:10:28,116][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:10:28,136][root][INFO] - Image embeddings computed.
[2025-02-08 21:10:32,223][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:10:32,345][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:10:32,366][root][INFO] - Image embeddings computed.
The number of original masks: 45
The number of filtered masks: 25
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:11:02,062][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:11:02,179][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:11:02,200][root][INFO] - Image embeddings computed.
[2025-02-08 21:11:18,549][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:11:18,663][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:11:18,684][root][INFO] - Image embeddings computed.
[2025-02-08 21:11:22,788][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:11:22,888][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:11:22,908][root][INFO] - Image embeddings computed.
[2025-02-08 21:11:27,044][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:11:27,145][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:11:27,166][root][INFO] - Image embeddings computed.
[2025-02-08 21:11:31,266][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:11:31,374][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:11:31,395][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 20
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:11:59,948][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:12:00,054][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:12:00,075][root][INFO] - Image embeddings computed.
[2025-02-08 21:12:16,314][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:12:16,432][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:12:16,453][root][INFO] - Image embeddings computed.
[2025-02-08 21:12:20,565][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:12:20,757][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:12:20,777][root][INFO] - Image embeddings computed.
[2025-02-08 21:12:24,908][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:12:25,015][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:12:25,035][root][INFO] - Image embeddings computed.
[2025-02-08 21:12:29,141][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:12:29,298][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:12:29,320][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 21
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.638083028297248 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 16/50
[2025-02-08 21:13:08,403][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:13:08,521][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:13:08,542][root][INFO] - Image embeddings computed.
[2025-02-08 21:13:24,945][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:13:25,050][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:13:25,071][root][INFO] - Image embeddings computed.
[2025-02-08 21:13:29,239][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:13:29,340][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:13:29,361][root][INFO] - Image embeddings computed.
[2025-02-08 21:13:33,487][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:13:33,635][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:13:33,655][root][INFO] - Image embeddings computed.
[2025-02-08 21:13:37,755][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:13:37,866][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:13:37,887][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 20
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:14:06,333][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:14:06,450][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:14:06,471][root][INFO] - Image embeddings computed.
[2025-02-08 21:14:22,725][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:14:22,844][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:14:22,865][root][INFO] - Image embeddings computed.
[2025-02-08 21:14:27,043][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:14:27,163][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:14:27,183][root][INFO] - Image embeddings computed.
[2025-02-08 21:14:31,288][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:14:31,382][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:14:31,403][root][INFO] - Image embeddings computed.
[2025-02-08 21:14:35,509][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:14:35,602][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:14:35,623][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 21
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:15:04,897][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:15:04,996][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:15:05,017][root][INFO] - Image embeddings computed.
[2025-02-08 21:15:21,289][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:15:21,301][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:15:21,321][root][INFO] - Image embeddings computed.
[2025-02-08 21:15:25,469][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:15:25,482][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:15:25,503][root][INFO] - Image embeddings computed.
[2025-02-08 21:15:29,629][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:15:29,640][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:15:29,661][root][INFO] - Image embeddings computed.
[2025-02-08 21:15:33,767][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:15:33,784][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:15:33,804][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 12
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.455 | Done: False

Mean: 0.6266119299377607 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 17/50
[2025-02-08 21:16:04,364][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:16:04,478][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:16:04,499][root][INFO] - Image embeddings computed.
[2025-02-08 21:16:21,043][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:16:21,147][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:16:21,168][root][INFO] - Image embeddings computed.
[2025-02-08 21:16:25,294][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:16:25,426][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:16:25,447][root][INFO] - Image embeddings computed.
[2025-02-08 21:16:29,551][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:16:29,643][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:16:29,664][root][INFO] - Image embeddings computed.
[2025-02-08 21:16:33,772][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:16:33,866][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:16:33,887][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 11
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:17:01,582][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:17:01,697][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:17:01,724][root][INFO] - Image embeddings computed.
[2025-02-08 21:17:18,182][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:17:18,285][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:17:18,306][root][INFO] - Image embeddings computed.
[2025-02-08 21:17:22,434][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:17:22,532][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:17:22,552][root][INFO] - Image embeddings computed.
[2025-02-08 21:17:26,690][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:17:26,822][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:17:26,843][root][INFO] - Image embeddings computed.
[2025-02-08 21:17:30,971][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:17:31,100][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:17:31,120][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 14
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:17:59,969][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:18:00,068][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:18:00,089][root][INFO] - Image embeddings computed.
[2025-02-08 21:18:16,543][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:18:16,648][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:18:16,669][root][INFO] - Image embeddings computed.
[2025-02-08 21:18:20,786][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:18:20,879][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:18:20,900][root][INFO] - Image embeddings computed.
[2025-02-08 21:18:25,033][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:18:25,131][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:18:25,152][root][INFO] - Image embeddings computed.
[2025-02-08 21:18:29,291][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:18:29,398][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:18:29,419][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 12
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5897524046473042 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 18/50
[2025-02-08 21:19:07,446][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:19:07,552][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:19:07,573][root][INFO] - Image embeddings computed.
[2025-02-08 21:19:23,986][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:19:24,089][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:19:24,115][root][INFO] - Image embeddings computed.
[2025-02-08 21:19:28,232][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:19:28,328][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:19:28,349][root][INFO] - Image embeddings computed.
[2025-02-08 21:19:32,467][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:19:32,578][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:19:32,598][root][INFO] - Image embeddings computed.
[2025-02-08 21:19:36,718][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:19:36,822][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:19:36,843][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 15
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.508 | Done: False

[2025-02-08 21:20:06,205][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:20:06,304][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:20:06,331][root][INFO] - Image embeddings computed.
[2025-02-08 21:20:22,773][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:20:22,875][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:20:22,896][root][INFO] - Image embeddings computed.
[2025-02-08 21:20:27,026][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:20:27,142][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:20:27,169][root][INFO] - Image embeddings computed.
[2025-02-08 21:20:31,296][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:20:31,401][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:20:31,422][root][INFO] - Image embeddings computed.
[2025-02-08 21:20:35,543][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:20:35,643][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:20:35,663][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 11
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.890 | Done: False

[2025-02-08 21:21:04,649][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:21:04,762][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:21:04,784][root][INFO] - Image embeddings computed.
[2025-02-08 21:21:21,291][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:21:21,399][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:21:21,420][root][INFO] - Image embeddings computed.
[2025-02-08 21:21:25,545][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:21:25,658][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:21:25,679][root][INFO] - Image embeddings computed.
[2025-02-08 21:21:29,817][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:21:29,913][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:21:29,933][root][INFO] - Image embeddings computed.
[2025-02-08 21:21:34,061][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:21:34,163][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:21:34,184][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 13
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.847 | Done: False

Mean: 0.6040693614512676 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 19/50
[2025-02-08 21:22:13,619][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:22:13,630][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:22:13,651][root][INFO] - Image embeddings computed.
[2025-02-08 21:22:29,877][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:22:29,887][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:22:29,908][root][INFO] - Image embeddings computed.
[2025-02-08 21:22:34,024][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:22:34,033][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:22:34,054][root][INFO] - Image embeddings computed.
[2025-02-08 21:22:38,206][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:22:38,215][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:22:38,235][root][INFO] - Image embeddings computed.
[2025-02-08 21:22:42,376][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:22:42,386][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:22:42,406][root][INFO] - Image embeddings computed.
The number of original masks: 44
The number of filtered masks: 28
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-08 21:23:12,623][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:23:12,635][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:23:12,655][root][INFO] - Image embeddings computed.
[2025-02-08 21:23:29,357][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:23:29,368][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:23:29,389][root][INFO] - Image embeddings computed.
[2025-02-08 21:23:33,521][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:23:33,530][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:23:33,550][root][INFO] - Image embeddings computed.
[2025-02-08 21:23:37,709][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:23:37,719][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:23:37,740][root][INFO] - Image embeddings computed.
[2025-02-08 21:23:41,887][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:23:41,897][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:23:41,917][root][INFO] - Image embeddings computed.
The number of original masks: 45
The number of filtered masks: 27
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-08 21:24:13,453][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:24:13,554][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:24:13,575][root][INFO] - Image embeddings computed.
[2025-02-08 21:24:30,230][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:24:30,331][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:24:30,353][root][INFO] - Image embeddings computed.
[2025-02-08 21:24:34,481][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:24:34,594][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:24:34,615][root][INFO] - Image embeddings computed.
[2025-02-08 21:24:38,770][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:24:38,883][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:24:38,904][root][INFO] - Image embeddings computed.
[2025-02-08 21:24:43,045][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:24:43,146][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:24:43,167][root][INFO] - Image embeddings computed.
The number of original masks: 46
The number of filtered masks: 26
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-08 21:25:13,840][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:25:13,852][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:25:13,873][root][INFO] - Image embeddings computed.
[2025-02-08 21:25:30,616][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:25:30,624][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:25:30,644][root][INFO] - Image embeddings computed.
[2025-02-08 21:25:34,790][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:25:34,799][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:25:34,820][root][INFO] - Image embeddings computed.
[2025-02-08 21:25:38,979][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:25:39,035][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:25:39,055][root][INFO] - Image embeddings computed.
[2025-02-08 21:25:43,202][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:25:43,227][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:25:43,247][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 22
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

Mean: 0.5956680500298558 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 20/50
[2025-02-08 21:26:24,007][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:26:24,050][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:26:24,071][root][INFO] - Image embeddings computed.
[2025-02-08 21:26:40,470][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:26:40,476][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:26:40,497][root][INFO] - Image embeddings computed.
[2025-02-08 21:26:44,608][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:26:44,619][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:26:44,639][root][INFO] - Image embeddings computed.
[2025-02-08 21:26:48,755][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:26:48,763][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:26:48,784][root][INFO] - Image embeddings computed.
[2025-02-08 21:26:52,862][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:26:52,870][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:26:52,891][root][INFO] - Image embeddings computed.
The number of original masks: 40
The number of filtered masks: 20
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:27:19,454][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:27:19,466][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:27:19,487][root][INFO] - Image embeddings computed.
[2025-02-08 21:27:36,217][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:27:36,223][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:27:36,244][root][INFO] - Image embeddings computed.
[2025-02-08 21:27:40,364][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:27:40,373][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:27:40,393][root][INFO] - Image embeddings computed.
[2025-02-08 21:27:44,526][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:27:44,538][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:27:44,558][root][INFO] - Image embeddings computed.
[2025-02-08 21:27:48,648][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:27:48,657][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:27:48,677][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 20
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:28:19,168][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:28:19,181][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:28:19,202][root][INFO] - Image embeddings computed.
[2025-02-08 21:28:36,346][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:28:36,355][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:28:36,375][root][INFO] - Image embeddings computed.
[2025-02-08 21:28:40,498][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:28:40,508][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:28:40,528][root][INFO] - Image embeddings computed.
[2025-02-08 21:28:44,651][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:28:44,654][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:28:44,675][root][INFO] - Image embeddings computed.
[2025-02-08 21:28:48,760][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:28:48,769][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:28:48,789][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 16
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:29:20,545][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:29:20,644][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:29:20,665][root][INFO] - Image embeddings computed.
[2025-02-08 21:29:37,237][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:29:37,337][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:29:37,358][root][INFO] - Image embeddings computed.
[2025-02-08 21:29:41,468][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:29:41,586][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:29:41,607][root][INFO] - Image embeddings computed.
[2025-02-08 21:29:45,742][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:29:45,840][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:29:45,860][root][INFO] - Image embeddings computed.
[2025-02-08 21:29:49,944][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:29:50,056][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:29:50,077][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 15
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.590884647528363 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 21/50
[2025-02-08 21:30:30,951][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:30:31,059][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:30:31,080][root][INFO] - Image embeddings computed.
[2025-02-08 21:30:47,508][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:30:47,612][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:30:47,633][root][INFO] - Image embeddings computed.
[2025-02-08 21:30:51,779][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:30:51,880][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:30:51,900][root][INFO] - Image embeddings computed.
[2025-02-08 21:30:56,011][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:30:56,128][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:30:56,149][root][INFO] - Image embeddings computed.
[2025-02-08 21:31:00,240][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:31:00,346][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:31:00,367][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 11
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:31:32,109][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:31:32,214][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:31:32,235][root][INFO] - Image embeddings computed.
[2025-02-08 21:31:48,780][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:31:48,900][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:31:48,921][root][INFO] - Image embeddings computed.
[2025-02-08 21:31:53,054][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:31:53,170][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:31:53,191][root][INFO] - Image embeddings computed.
[2025-02-08 21:31:57,305][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:31:57,426][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:31:57,447][root][INFO] - Image embeddings computed.
[2025-02-08 21:32:01,541][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:32:01,639][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:32:01,660][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 12
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:32:34,576][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:32:34,681][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:32:34,702][root][INFO] - Image embeddings computed.
[2025-02-08 21:32:51,093][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:32:51,260][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:32:51,287][root][INFO] - Image embeddings computed.
[2025-02-08 21:32:55,434][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:32:55,594][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:32:55,616][root][INFO] - Image embeddings computed.
[2025-02-08 21:32:59,742][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:32:59,853][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:32:59,879][root][INFO] - Image embeddings computed.
[2025-02-08 21:33:03,972][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:33:04,140][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:33:04,161][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 13
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.434 | Done: False

Mean: 0.5834152727783352 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 22/50
[2025-02-08 21:33:47,975][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:33:48,082][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:33:48,103][root][INFO] - Image embeddings computed.
[2025-02-08 21:34:04,817][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:34:04,928][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:34:04,949][root][INFO] - Image embeddings computed.
[2025-02-08 21:34:09,085][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:34:09,184][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:34:09,218][root][INFO] - Image embeddings computed.
[2025-02-08 21:34:13,338][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:34:13,451][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:34:13,477][root][INFO] - Image embeddings computed.
[2025-02-08 21:34:17,558][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:34:17,660][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:34:17,681][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 23
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:34:52,858][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:34:52,962][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:34:52,983][root][INFO] - Image embeddings computed.
[2025-02-08 21:35:10,577][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:35:10,704][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:35:10,725][root][INFO] - Image embeddings computed.
[2025-02-08 21:35:14,854][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:35:14,975][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:35:15,001][root][INFO] - Image embeddings computed.
[2025-02-08 21:35:19,130][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:35:19,229][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:35:19,259][root][INFO] - Image embeddings computed.
[2025-02-08 21:35:23,317][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:35:23,422][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:35:23,443][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 26
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.389 | Done: False

[2025-02-08 21:35:59,841][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:35:59,940][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:35:59,961][root][INFO] - Image embeddings computed.
[2025-02-08 21:36:17,725][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:36:17,830][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:36:17,850][root][INFO] - Image embeddings computed.
[2025-02-08 21:36:21,976][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:36:22,149][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:36:22,176][root][INFO] - Image embeddings computed.
[2025-02-08 21:36:26,310][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:36:26,412][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:36:26,433][root][INFO] - Image embeddings computed.
[2025-02-08 21:36:30,495][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:36:30,595][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:36:30,615][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 29
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.389 | Done: False

Mean: 0.574573164419724 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 23/50
[2025-02-08 21:37:16,456][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:37:16,465][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:37:16,486][root][INFO] - Image embeddings computed.
[2025-02-08 21:37:33,069][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:37:33,079][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:37:33,099][root][INFO] - Image embeddings computed.
[2025-02-08 21:37:37,210][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:37:37,221][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:37:37,242][root][INFO] - Image embeddings computed.
[2025-02-08 21:37:41,385][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:37:41,402][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:37:41,422][root][INFO] - Image embeddings computed.
[2025-02-08 21:37:45,575][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:37:45,585][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:37:45,605][root][INFO] - Image embeddings computed.
The number of original masks: 41
The number of filtered masks: 28
Lang Goal: pack all the scissors objects in the brown box
Total Reward: 0.323 | Done: False

[2025-02-08 21:38:20,318][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:38:20,327][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:38:20,348][root][INFO] - Image embeddings computed.
[2025-02-08 21:38:36,971][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:38:36,980][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:38:37,000][root][INFO] - Image embeddings computed.
[2025-02-08 21:38:41,111][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:38:41,116][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:38:41,136][root][INFO] - Image embeddings computed.
[2025-02-08 21:38:45,265][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:38:45,269][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:38:45,289][root][INFO] - Image embeddings computed.
[2025-02-08 21:38:49,448][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:38:49,459][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:38:49,479][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 25
Lang Goal: pack all the scissors objects in the brown box
Warning: movej exceeded 5 second timeout. Skipping.
Total Reward: 0.323 | Done: True

Mean: 0.5636169679302269 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 24/50
[2025-02-08 21:39:33,847][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:39:33,856][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:39:33,877][root][INFO] - Image embeddings computed.
[2025-02-08 21:39:50,297][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:39:50,305][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:39:50,325][root][INFO] - Image embeddings computed.
[2025-02-08 21:39:54,452][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:39:54,462][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:39:54,482][root][INFO] - Image embeddings computed.
[2025-02-08 21:39:58,585][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:39:58,594][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:39:58,614][root][INFO] - Image embeddings computed.
[2025-02-08 21:40:02,745][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:40:02,755][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:40:02,775][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 18
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:40:37,433][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:40:37,528][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:40:37,549][root][INFO] - Image embeddings computed.
[2025-02-08 21:40:53,736][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:40:53,833][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:40:53,854][root][INFO] - Image embeddings computed.
[2025-02-08 21:40:57,992][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:40:58,090][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:40:58,110][root][INFO] - Image embeddings computed.
[2025-02-08 21:41:02,211][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:41:02,311][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:41:02,331][root][INFO] - Image embeddings computed.
[2025-02-08 21:41:06,463][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:41:06,566][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:41:06,587][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 20
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:41:40,068][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:41:40,080][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:41:40,101][root][INFO] - Image embeddings computed.
[2025-02-08 21:41:56,330][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:41:56,339][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:41:56,359][root][INFO] - Image embeddings computed.
[2025-02-08 21:42:00,505][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:42:00,513][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:42:00,534][root][INFO] - Image embeddings computed.
[2025-02-08 21:42:04,641][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:42:04,652][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:42:04,673][root][INFO] - Image embeddings computed.
[2025-02-08 21:42:08,804][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:42:08,816][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:42:08,837][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 18
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.026 | Done: False

[2025-02-08 21:42:39,236][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:42:39,251][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:42:39,272][root][INFO] - Image embeddings computed.
[2025-02-08 21:42:56,017][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:42:56,025][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:42:56,046][root][INFO] - Image embeddings computed.
[2025-02-08 21:43:00,195][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:43:00,199][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:43:00,220][root][INFO] - Image embeddings computed.
[2025-02-08 21:43:04,336][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:43:04,347][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:43:04,368][root][INFO] - Image embeddings computed.
[2025-02-08 21:43:08,526][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:43:08,536][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:43:08,556][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 17
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.004 | Done: False

Mean: 0.5403156761378124 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 25/50
[2025-02-08 21:43:46,398][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:43:46,409][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:43:46,430][root][INFO] - Image embeddings computed.
[2025-02-08 21:44:03,057][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:44:03,065][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:44:03,085][root][INFO] - Image embeddings computed.
[2025-02-08 21:44:07,224][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:44:07,233][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:44:07,253][root][INFO] - Image embeddings computed.
[2025-02-08 21:44:11,372][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:44:11,382][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:44:11,424][root][INFO] - Image embeddings computed.
[2025-02-08 21:44:15,523][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:44:15,530][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:44:15,550][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 12
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 21:44:45,743][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:44:45,755][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:44:45,775][root][INFO] - Image embeddings computed.
[2025-02-08 21:45:02,203][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:45:02,213][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:45:02,233][root][INFO] - Image embeddings computed.
[2025-02-08 21:45:06,362][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:45:06,367][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:45:06,388][root][INFO] - Image embeddings computed.
[2025-02-08 21:45:10,523][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:45:10,528][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:45:10,549][root][INFO] - Image embeddings computed.
[2025-02-08 21:45:14,656][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:45:14,667][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:45:14,688][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 15
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5587030490922998 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 26/50
[2025-02-08 21:45:56,008][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:45:56,018][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:45:56,038][root][INFO] - Image embeddings computed.
[2025-02-08 21:46:12,609][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:46:12,617][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:46:12,638][root][INFO] - Image embeddings computed.
[2025-02-08 21:46:16,767][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:46:16,777][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:46:16,797][root][INFO] - Image embeddings computed.
[2025-02-08 21:46:20,929][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:46:20,941][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:46:20,961][root][INFO] - Image embeddings computed.
[2025-02-08 21:46:25,097][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:46:25,107][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:46:25,127][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 22
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.431 | Done: False

[2025-02-08 21:47:03,743][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:47:03,838][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:47:03,859][root][INFO] - Image embeddings computed.
[2025-02-08 21:47:20,487][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:47:20,625][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:47:20,645][root][INFO] - Image embeddings computed.
[2025-02-08 21:47:24,766][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:47:24,873][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:47:24,893][root][INFO] - Image embeddings computed.
[2025-02-08 21:47:29,019][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:47:29,124][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:47:29,145][root][INFO] - Image embeddings computed.
[2025-02-08 21:47:33,287][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:47:33,386][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:47:33,407][root][INFO] - Image embeddings computed.
The number of original masks: 40
The number of filtered masks: 28
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.431 | Done: False

[2025-02-08 21:48:13,041][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:48:13,163][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:48:13,184][root][INFO] - Image embeddings computed.
[2025-02-08 21:48:29,954][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:48:30,080][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:48:30,101][root][INFO] - Image embeddings computed.
[2025-02-08 21:48:34,226][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:48:34,326][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:48:34,347][root][INFO] - Image embeddings computed.
[2025-02-08 21:48:38,457][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:48:38,569][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:48:38,590][root][INFO] - Image embeddings computed.
[2025-02-08 21:48:42,746][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:48:42,847][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:48:42,868][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 22
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5372144702810575 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 27/50
[2025-02-08 21:49:29,134][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:49:29,299][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:49:29,319][root][INFO] - Image embeddings computed.
[2025-02-08 21:49:45,964][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:49:46,072][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:49:46,093][root][INFO] - Image embeddings computed.
[2025-02-08 21:49:50,238][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:49:50,345][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:49:50,366][root][INFO] - Image embeddings computed.
[2025-02-08 21:49:54,503][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:49:54,612][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:49:54,632][root][INFO] - Image embeddings computed.
[2025-02-08 21:49:58,762][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:49:58,867][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:49:58,888][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 19
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:50:37,294][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:50:37,404][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:50:37,425][root][INFO] - Image embeddings computed.
[2025-02-08 21:50:54,102][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:50:54,206][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:50:54,227][root][INFO] - Image embeddings computed.
[2025-02-08 21:50:58,345][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:50:58,482][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:50:58,503][root][INFO] - Image embeddings computed.
[2025-02-08 21:51:02,643][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:51:02,742][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:51:02,762][root][INFO] - Image embeddings computed.
[2025-02-08 21:51:06,887][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:51:06,993][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:51:07,020][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 21
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:51:45,235][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:51:45,352][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:51:45,372][root][INFO] - Image embeddings computed.
[2025-02-08 21:52:01,510][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:52:01,624][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:52:01,645][root][INFO] - Image embeddings computed.
[2025-02-08 21:52:05,753][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:52:05,852][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:52:05,872][root][INFO] - Image embeddings computed.
[2025-02-08 21:52:10,023][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:52:10,187][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:52:10,207][root][INFO] - Image embeddings computed.
[2025-02-08 21:52:14,355][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:52:14,466][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:52:14,486][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 18
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5173176380484258 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 28/50
[2025-02-08 21:53:04,070][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:53:04,193][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:53:04,215][root][INFO] - Image embeddings computed.
[2025-02-08 21:53:20,877][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:53:20,974][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:53:20,995][root][INFO] - Image embeddings computed.
[2025-02-08 21:53:25,104][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:53:25,204][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:53:25,225][root][INFO] - Image embeddings computed.
[2025-02-08 21:53:29,339][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:53:29,456][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:53:29,477][root][INFO] - Image embeddings computed.
[2025-02-08 21:53:33,599][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:53:33,698][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:53:33,719][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 20
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-08 21:54:13,314][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:54:13,433][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:54:13,454][root][INFO] - Image embeddings computed.
[2025-02-08 21:54:30,125][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:54:30,278][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:54:30,299][root][INFO] - Image embeddings computed.
[2025-02-08 21:54:34,409][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:54:34,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:54:34,527][root][INFO] - Image embeddings computed.
[2025-02-08 21:54:38,655][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:54:38,764][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:54:38,784][root][INFO] - Image embeddings computed.
[2025-02-08 21:54:42,915][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:54:43,066][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:54:43,102][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 24
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-08 21:55:24,162][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:55:24,284][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:55:24,309][root][INFO] - Image embeddings computed.
[2025-02-08 21:55:40,722][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:55:40,836][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:55:40,857][root][INFO] - Image embeddings computed.
[2025-02-08 21:55:44,979][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:55:45,147][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:55:45,168][root][INFO] - Image embeddings computed.
[2025-02-08 21:55:49,298][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:55:49,392][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:55:49,413][root][INFO] - Image embeddings computed.
[2025-02-08 21:55:53,559][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:55:53,659][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:55:53,679][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 18
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5345562938324105 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 29/50
[2025-02-08 21:56:42,888][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:56:43,034][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:56:43,055][root][INFO] - Image embeddings computed.
[2025-02-08 21:56:59,859][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:57:00,003][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:57:00,033][root][INFO] - Image embeddings computed.
[2025-02-08 21:57:04,154][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:57:04,268][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:57:04,295][root][INFO] - Image embeddings computed.
[2025-02-08 21:57:08,427][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:57:08,621][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:57:08,642][root][INFO] - Image embeddings computed.
[2025-02-08 21:57:12,721][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:57:12,857][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:57:12,884][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 29
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:57:55,276][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:57:55,372][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:57:55,393][root][INFO] - Image embeddings computed.
[2025-02-08 21:58:12,077][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:58:12,181][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:58:12,208][root][INFO] - Image embeddings computed.
[2025-02-08 21:58:16,327][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:58:16,431][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:58:16,457][root][INFO] - Image embeddings computed.
[2025-02-08 21:58:20,589][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:58:20,723][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:58:20,744][root][INFO] - Image embeddings computed.
[2025-02-08 21:58:24,831][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:58:24,938][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:58:24,959][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 27
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 21:59:07,731][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:59:07,828][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:59:07,855][root][INFO] - Image embeddings computed.
[2025-02-08 21:59:24,476][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:59:24,581][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:59:24,602][root][INFO] - Image embeddings computed.
[2025-02-08 21:59:28,726][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:59:28,855][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:59:28,876][root][INFO] - Image embeddings computed.
[2025-02-08 21:59:33,074][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:59:33,216][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:59:33,237][root][INFO] - Image embeddings computed.
[2025-02-08 21:59:37,333][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 21:59:37,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 21:59:37,533][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 26
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5161233181830172 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 30/50
[2025-02-08 22:00:29,695][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:00:29,804][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:00:29,826][root][INFO] - Image embeddings computed.
[2025-02-08 22:00:46,562][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:00:46,668][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:00:46,689][root][INFO] - Image embeddings computed.
[2025-02-08 22:00:50,809][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:00:50,926][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:00:50,947][root][INFO] - Image embeddings computed.
[2025-02-08 22:00:55,070][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:00:55,178][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:00:55,199][root][INFO] - Image embeddings computed.
[2025-02-08 22:00:59,307][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:00:59,489][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:00:59,510][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 16
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:01:39,244][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:01:39,349][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:01:39,369][root][INFO] - Image embeddings computed.
[2025-02-08 22:01:55,851][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:01:55,955][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:01:55,976][root][INFO] - Image embeddings computed.
[2025-02-08 22:02:00,095][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:02:00,204][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:02:00,225][root][INFO] - Image embeddings computed.
[2025-02-08 22:02:04,356][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:02:04,462][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:02:04,483][root][INFO] - Image embeddings computed.
[2025-02-08 22:02:08,595][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:02:08,726][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:02:08,748][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 15
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:02:49,073][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:02:49,176][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:02:49,197][root][INFO] - Image embeddings computed.
[2025-02-08 22:03:05,813][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:03:05,918][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:03:05,939][root][INFO] - Image embeddings computed.
[2025-02-08 22:03:10,064][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:03:10,162][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:03:10,182][root][INFO] - Image embeddings computed.
[2025-02-08 22:03:14,303][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:03:14,400][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:03:14,422][root][INFO] - Image embeddings computed.
[2025-02-08 22:03:18,527][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:03:18,626][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:03:18,647][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 17
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.49891920757691655 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 31/50
[2025-02-08 22:04:06,320][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:04:06,465][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:04:06,486][root][INFO] - Image embeddings computed.
[2025-02-08 22:04:22,908][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:04:23,005][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:04:23,025][root][INFO] - Image embeddings computed.
[2025-02-08 22:04:27,125][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:04:27,233][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:04:27,259][root][INFO] - Image embeddings computed.
[2025-02-08 22:04:31,366][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:04:31,488][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:04:31,508][root][INFO] - Image embeddings computed.
[2025-02-08 22:04:35,617][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:04:35,714][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:04:35,735][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 11
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

[2025-02-08 22:05:15,275][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:05:15,374][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:05:15,395][root][INFO] - Image embeddings computed.
[2025-02-08 22:05:31,825][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:05:31,925][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:05:31,945][root][INFO] - Image embeddings computed.
[2025-02-08 22:05:36,056][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:05:36,154][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:05:36,174][root][INFO] - Image embeddings computed.
[2025-02-08 22:05:40,292][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:05:40,393][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:05:40,413][root][INFO] - Image embeddings computed.
[2025-02-08 22:05:44,526][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:05:44,630][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:05:44,651][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 13
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

[2025-02-08 22:06:24,856][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:06:24,985][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:06:25,007][root][INFO] - Image embeddings computed.
[2025-02-08 22:06:41,554][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:06:41,659][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:06:41,680][root][INFO] - Image embeddings computed.
[2025-02-08 22:06:45,788][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:06:45,888][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:06:45,909][root][INFO] - Image embeddings computed.
[2025-02-08 22:06:50,038][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:06:50,144][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:06:50,165][root][INFO] - Image embeddings computed.
[2025-02-08 22:06:54,279][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:06:54,375][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:06:54,402][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 10
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

Mean: 0.5043304159346504 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 32/50
[2025-02-08 22:07:43,717][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:07:43,844][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:07:43,865][root][INFO] - Image embeddings computed.
[2025-02-08 22:08:00,418][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:08:00,548][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:08:00,569][root][INFO] - Image embeddings computed.
[2025-02-08 22:08:04,665][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:08:04,780][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:08:04,801][root][INFO] - Image embeddings computed.
[2025-02-08 22:08:08,898][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:08:09,002][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:08:09,023][root][INFO] - Image embeddings computed.
[2025-02-08 22:08:13,140][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:08:13,240][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:08:13,262][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 13
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 22:08:53,786][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:08:53,888][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:08:53,909][root][INFO] - Image embeddings computed.
[2025-02-08 22:09:10,227][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:09:10,324][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:09:10,344][root][INFO] - Image embeddings computed.
[2025-02-08 22:09:14,423][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:09:14,519][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:09:14,539][root][INFO] - Image embeddings computed.
[2025-02-08 22:09:18,644][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:09:18,758][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:09:18,779][root][INFO] - Image embeddings computed.
[2025-02-08 22:09:22,892][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:09:22,985][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:09:23,005][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 13
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 22:09:59,318][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:09:59,331][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:09:59,352][root][INFO] - Image embeddings computed.
[2025-02-08 22:10:15,533][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:10:15,542][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:10:15,563][root][INFO] - Image embeddings computed.
[2025-02-08 22:10:19,669][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:10:19,673][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:10:19,694][root][INFO] - Image embeddings computed.
[2025-02-08 22:10:23,791][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:10:23,890][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:10:23,911][root][INFO] - Image embeddings computed.
[2025-02-08 22:10:28,025][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:10:28,125][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:10:28,146][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 15
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.5041950904366926 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 33/50
[2025-02-08 22:11:17,147][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:11:17,261][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:11:17,282][root][INFO] - Image embeddings computed.
[2025-02-08 22:11:33,706][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:11:33,802][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:11:33,823][root][INFO] - Image embeddings computed.
[2025-02-08 22:11:37,937][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:11:38,030][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:11:38,051][root][INFO] - Image embeddings computed.
[2025-02-08 22:11:42,169][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:11:42,279][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:11:42,300][root][INFO] - Image embeddings computed.
[2025-02-08 22:11:46,380][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:11:46,473][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:11:46,493][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 23
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.286 | Done: False

[2025-02-08 22:12:30,209][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:12:30,315][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:12:30,336][root][INFO] - Image embeddings computed.
[2025-02-08 22:12:46,784][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:12:46,885][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:12:46,906][root][INFO] - Image embeddings computed.
[2025-02-08 22:12:51,015][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:12:51,112][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:12:51,134][root][INFO] - Image embeddings computed.
[2025-02-08 22:12:55,257][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:12:55,373][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:12:55,394][root][INFO] - Image embeddings computed.
[2025-02-08 22:12:59,491][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:12:59,601][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:12:59,622][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 19
Lang Goal: pack all the crayon box objects in the brown box
Warning: movej exceeded 5 second timeout. Skipping.
Total Reward: 0.286 | Done: True

Mean: 0.49757445999055905 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 34/50
[2025-02-08 22:13:55,351][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:13:55,476][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:13:55,498][root][INFO] - Image embeddings computed.
[2025-02-08 22:14:12,120][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:14:12,229][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:14:12,250][root][INFO] - Image embeddings computed.
[2025-02-08 22:14:16,379][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:14:16,480][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:14:16,502][root][INFO] - Image embeddings computed.
[2025-02-08 22:14:20,626][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:14:20,725][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:14:20,747][root][INFO] - Image embeddings computed.
[2025-02-08 22:14:24,851][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:14:24,950][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:14:24,971][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 13
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

[2025-02-08 22:15:04,995][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:15:05,009][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:15:05,029][root][INFO] - Image embeddings computed.
[2025-02-08 22:15:21,421][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:15:21,428][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:15:21,448][root][INFO] - Image embeddings computed.
[2025-02-08 22:15:25,570][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:15:25,580][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:15:25,600][root][INFO] - Image embeddings computed.
[2025-02-08 22:15:29,729][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:15:29,739][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:15:29,759][root][INFO] - Image embeddings computed.
[2025-02-08 22:15:33,860][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:15:33,865][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:15:33,885][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 13
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

[2025-02-08 22:16:16,059][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:16:16,177][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:16:16,199][root][INFO] - Image embeddings computed.
[2025-02-08 22:16:32,380][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:16:32,482][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:16:32,503][root][INFO] - Image embeddings computed.
[2025-02-08 22:16:36,619][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:16:36,720][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:16:36,741][root][INFO] - Image embeddings computed.
[2025-02-08 22:16:40,876][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:16:40,980][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:16:41,002][root][INFO] - Image embeddings computed.
[2025-02-08 22:16:45,104][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:16:45,201][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:16:45,228][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 9
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

Mean: 0.49056518938081495 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 35/50
[2025-02-08 22:17:34,573][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:17:34,675][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:17:34,702][root][INFO] - Image embeddings computed.
[2025-02-08 22:17:51,205][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:17:51,303][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:17:51,324][root][INFO] - Image embeddings computed.
[2025-02-08 22:17:55,452][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:17:55,575][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:17:55,595][root][INFO] - Image embeddings computed.
[2025-02-08 22:17:59,712][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:17:59,818][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:17:59,838][root][INFO] - Image embeddings computed.
[2025-02-08 22:18:03,939][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:18:04,051][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:18:04,071][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 13
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 22:18:43,822][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:18:43,835][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:18:43,855][root][INFO] - Image embeddings computed.
[2025-02-08 22:19:00,589][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:19:00,600][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:19:00,621][root][INFO] - Image embeddings computed.
[2025-02-08 22:19:04,750][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:19:04,761][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:19:04,781][root][INFO] - Image embeddings computed.
[2025-02-08 22:19:08,903][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:19:08,913][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:19:08,933][root][INFO] - Image embeddings computed.
[2025-02-08 22:19:13,038][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:19:13,048][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:19:13,068][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 13
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 22:19:55,657][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:19:55,754][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:19:55,775][root][INFO] - Image embeddings computed.
[2025-02-08 22:20:12,323][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:20:12,421][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:20:12,441][root][INFO] - Image embeddings computed.
[2025-02-08 22:20:16,568][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:20:16,664][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:20:16,684][root][INFO] - Image embeddings computed.
[2025-02-08 22:20:20,820][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:20:20,913][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:20:20,934][root][INFO] - Image embeddings computed.
[2025-02-08 22:20:25,030][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:20:25,123][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:20:25,144][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 12
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5051204696842202 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 36/50
[2025-02-08 22:21:21,957][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:21:22,061][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:21:22,082][root][INFO] - Image embeddings computed.
[2025-02-08 22:21:38,773][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:21:38,895][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:21:38,916][root][INFO] - Image embeddings computed.
[2025-02-08 22:21:43,060][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:21:43,173][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:21:43,194][root][INFO] - Image embeddings computed.
[2025-02-08 22:21:47,313][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:21:47,424][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:21:47,444][root][INFO] - Image embeddings computed.
[2025-02-08 22:21:51,535][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:21:51,635][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:21:51,656][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 23
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.800 | Done: False

[2025-02-08 22:22:36,150][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:22:36,166][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:22:36,186][root][INFO] - Image embeddings computed.
[2025-02-08 22:22:52,537][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:22:52,547][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:22:52,567][root][INFO] - Image embeddings computed.
[2025-02-08 22:22:56,664][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:22:56,673][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:22:56,693][root][INFO] - Image embeddings computed.
[2025-02-08 22:23:00,818][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:23:00,828][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:23:00,848][root][INFO] - Image embeddings computed.
[2025-02-08 22:23:04,946][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:23:04,955][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:23:04,975][root][INFO] - Image embeddings computed.
The number of original masks: 41
The number of filtered masks: 24
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.258 | Done: False

[2025-02-08 22:23:46,341][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:23:46,356][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:23:46,377][root][INFO] - Image embeddings computed.
[2025-02-08 22:24:02,805][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:24:02,815][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:24:02,835][root][INFO] - Image embeddings computed.
[2025-02-08 22:24:06,973][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:24:06,983][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:24:07,003][root][INFO] - Image embeddings computed.
[2025-02-08 22:24:11,142][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:24:11,152][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:24:11,177][root][INFO] - Image embeddings computed.
[2025-02-08 22:24:15,307][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:24:15,318][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:24:15,338][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 23
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.416 | Done: False

Mean: 0.5026390531286644 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 37/50
[2025-02-08 22:25:02,987][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:25:03,001][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:25:03,021][root][INFO] - Image embeddings computed.
[2025-02-08 22:25:19,338][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:25:19,349][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:25:19,369][root][INFO] - Image embeddings computed.
[2025-02-08 22:25:23,494][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:25:23,504][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:25:23,524][root][INFO] - Image embeddings computed.
[2025-02-08 22:25:27,655][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:25:27,665][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:25:27,685][root][INFO] - Image embeddings computed.
[2025-02-08 22:25:31,822][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:25:31,833][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:25:31,853][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 22:26:13,201][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:26:13,213][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:26:13,234][root][INFO] - Image embeddings computed.
[2025-02-08 22:26:29,480][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:26:29,489][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:26:29,510][root][INFO] - Image embeddings computed.
[2025-02-08 22:26:33,622][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:26:33,632][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:26:33,653][root][INFO] - Image embeddings computed.
[2025-02-08 22:26:37,770][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:26:37,780][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:26:37,801][root][INFO] - Image embeddings computed.
[2025-02-08 22:26:41,947][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:26:41,958][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:26:41,979][root][INFO] - Image embeddings computed.
The number of original masks: 15
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.979 | Done: False

[2025-02-08 22:27:25,686][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:27:25,786][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:27:25,807][root][INFO] - Image embeddings computed.
[2025-02-08 22:27:42,064][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:27:42,163][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:27:42,184][root][INFO] - Image embeddings computed.
[2025-02-08 22:27:46,290][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:27:46,417][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:27:46,437][root][INFO] - Image embeddings computed.
[2025-02-08 22:27:50,557][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:27:50,682][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:27:50,702][root][INFO] - Image embeddings computed.
[2025-02-08 22:27:54,845][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:27:54,961][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:27:54,982][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Warning: movej exceeded 5 second timeout. Skipping.
Total Reward: 0.979 | Done: True

Mean: 0.5155181778188808 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 38/50
[2025-02-08 22:28:57,506][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:28:57,645][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:28:57,671][root][INFO] - Image embeddings computed.
[2025-02-08 22:29:14,103][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:29:14,208][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:29:14,229][root][INFO] - Image embeddings computed.
[2025-02-08 22:29:18,351][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:29:18,449][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:29:18,469][root][INFO] - Image embeddings computed.
[2025-02-08 22:29:22,606][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:29:22,699][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:29:22,719][root][INFO] - Image embeddings computed.
[2025-02-08 22:29:26,819][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:29:26,912][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:29:26,974][root][INFO] - Image embeddings computed.
The number of original masks: 49
The number of filtered masks: 31
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:30:15,992][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:30:16,099][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:30:16,120][root][INFO] - Image embeddings computed.
[2025-02-08 22:30:32,882][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:30:33,002][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:30:33,026][root][INFO] - Image embeddings computed.
[2025-02-08 22:30:37,154][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:30:37,253][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:30:37,274][root][INFO] - Image embeddings computed.
[2025-02-08 22:30:41,413][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:30:41,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:30:41,528][root][INFO] - Image embeddings computed.
[2025-02-08 22:30:45,634][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:30:45,744][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:30:45,765][root][INFO] - Image embeddings computed.
The number of original masks: 45
The number of filtered masks: 26
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:31:34,306][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:31:34,437][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:31:34,458][root][INFO] - Image embeddings computed.
[2025-02-08 22:31:50,654][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:31:50,760][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:31:50,780][root][INFO] - Image embeddings computed.
[2025-02-08 22:31:54,919][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:31:55,050][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:31:55,071][root][INFO] - Image embeddings computed.
[2025-02-08 22:31:59,213][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:31:59,314][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:31:59,335][root][INFO] - Image embeddings computed.
[2025-02-08 22:32:03,441][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:32:03,546][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:32:03,566][root][INFO] - Image embeddings computed.
The number of original masks: 47
The number of filtered masks: 27
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5019519099815417 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 39/50
[2025-02-08 22:33:01,406][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:33:01,514][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:33:01,535][root][INFO] - Image embeddings computed.
[2025-02-08 22:33:18,163][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:33:18,272][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:33:18,293][root][INFO] - Image embeddings computed.
[2025-02-08 22:33:22,428][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:33:22,529][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:33:22,549][root][INFO] - Image embeddings computed.
[2025-02-08 22:33:26,671][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:33:26,778][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:33:26,799][root][INFO] - Image embeddings computed.
[2025-02-08 22:33:30,893][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:33:30,996][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:33:31,016][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 20
Lang Goal: pack all the butterfinger chocolate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:34:16,649][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:34:16,659][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:34:16,679][root][INFO] - Image embeddings computed.
[2025-02-08 22:34:33,093][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:34:33,102][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:34:33,123][root][INFO] - Image embeddings computed.
[2025-02-08 22:34:37,250][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:34:37,262][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:34:37,282][root][INFO] - Image embeddings computed.
[2025-02-08 22:34:41,404][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:34:41,414][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:34:41,434][root][INFO] - Image embeddings computed.
[2025-02-08 22:34:45,527][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:34:45,538][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:34:45,558][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 19
Lang Goal: pack all the butterfinger chocolate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:35:27,434][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:35:27,448][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:35:27,469][root][INFO] - Image embeddings computed.
[2025-02-08 22:35:44,135][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:35:44,144][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:35:44,164][root][INFO] - Image embeddings computed.
[2025-02-08 22:35:48,300][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:35:48,311][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:35:48,331][root][INFO] - Image embeddings computed.
[2025-02-08 22:35:52,457][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:35:52,462][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:35:52,482][root][INFO] - Image embeddings computed.
[2025-02-08 22:35:56,588][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:35:56,598][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:35:56,618][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 20
Lang Goal: pack all the butterfinger chocolate objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.48908134818714327 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 40/50
[2025-02-08 22:36:47,349][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:36:47,466][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:36:47,487][root][INFO] - Image embeddings computed.
[2025-02-08 22:37:04,135][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:37:04,238][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:37:04,259][root][INFO] - Image embeddings computed.
[2025-02-08 22:37:08,397][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:37:08,555][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:37:08,575][root][INFO] - Image embeddings computed.
[2025-02-08 22:37:12,694][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:37:12,793][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:37:12,813][root][INFO] - Image embeddings computed.
[2025-02-08 22:37:16,901][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:37:17,018][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:37:17,038][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 13
Lang Goal: pack all the red and white flashlight objects in the brown box
Total Reward: 0.438 | Done: False

[2025-02-08 22:38:04,306][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:38:04,409][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:38:04,430][root][INFO] - Image embeddings computed.
[2025-02-08 22:38:20,944][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:38:21,052][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:38:21,073][root][INFO] - Image embeddings computed.
[2025-02-08 22:38:25,211][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:38:25,316][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:38:25,337][root][INFO] - Image embeddings computed.
[2025-02-08 22:38:29,482][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:38:29,599][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:38:29,620][root][INFO] - Image embeddings computed.
[2025-02-08 22:38:33,711][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:38:33,805][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:38:33,826][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 18
Lang Goal: pack all the red and white flashlight objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5018543144824645 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 41/50
[2025-02-08 22:39:30,775][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:39:30,896][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:39:30,917][root][INFO] - Image embeddings computed.
[2025-02-08 22:39:47,347][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:39:47,481][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:39:47,508][root][INFO] - Image embeddings computed.
[2025-02-08 22:39:51,626][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:39:51,754][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:39:51,780][root][INFO] - Image embeddings computed.
[2025-02-08 22:39:55,911][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:39:56,022][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:39:56,043][root][INFO] - Image embeddings computed.
[2025-02-08 22:40:00,163][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:40:00,268][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:40:00,289][root][INFO] - Image embeddings computed.
The number of original masks: 7
The number of filtered masks: 5
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 22:40:44,941][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:40:44,960][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:40:44,981][root][INFO] - Image embeddings computed.
[2025-02-08 22:41:01,248][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:41:01,258][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:41:01,278][root][INFO] - Image embeddings computed.
[2025-02-08 22:41:05,413][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:41:05,422][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:41:05,443][root][INFO] - Image embeddings computed.
[2025-02-08 22:41:09,561][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:41:09,572][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:41:09,593][root][INFO] - Image embeddings computed.
[2025-02-08 22:41:13,726][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:41:13,736][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:41:13,756][root][INFO] - Image embeddings computed.
The number of original masks: 13
The number of filtered masks: 9
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.514004209251185 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 42/50
[2025-02-08 22:42:11,337][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:42:11,464][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:42:11,484][root][INFO] - Image embeddings computed.
[2025-02-08 22:42:27,991][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:42:28,093][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:42:28,114][root][INFO] - Image embeddings computed.
[2025-02-08 22:42:32,237][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:42:32,348][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:42:32,375][root][INFO] - Image embeddings computed.
[2025-02-08 22:42:36,506][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:42:36,609][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:42:36,636][root][INFO] - Image embeddings computed.
[2025-02-08 22:42:40,726][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:42:40,823][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:42:40,844][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 14
Lang Goal: pack all the honey dipper objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:43:29,119][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:43:29,238][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:43:29,259][root][INFO] - Image embeddings computed.
[2025-02-08 22:43:45,561][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:43:45,660][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:43:45,682][root][INFO] - Image embeddings computed.
[2025-02-08 22:43:49,803][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:43:49,896][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:43:49,917][root][INFO] - Image embeddings computed.
[2025-02-08 22:43:54,043][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:43:54,155][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:43:54,175][root][INFO] - Image embeddings computed.
[2025-02-08 22:43:58,283][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:43:58,379][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:43:58,400][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 16
Lang Goal: pack all the honey dipper objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:44:44,140][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:44:44,147][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:44:44,167][root][INFO] - Image embeddings computed.
[2025-02-08 22:45:00,623][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:45:00,633][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:45:00,653][root][INFO] - Image embeddings computed.
[2025-02-08 22:45:04,779][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:45:04,784][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:45:04,804][root][INFO] - Image embeddings computed.
[2025-02-08 22:45:08,945][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:45:08,950][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:45:08,970][root][INFO] - Image embeddings computed.
[2025-02-08 22:45:13,063][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:45:13,073][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:45:13,093][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 16
Lang Goal: pack all the honey dipper objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5017660137928234 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 43/50
[2025-02-08 22:46:09,106][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:46:09,116][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:46:09,136][root][INFO] - Image embeddings computed.
[2025-02-08 22:46:25,589][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:46:25,598][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:46:25,619][root][INFO] - Image embeddings computed.
[2025-02-08 22:46:29,747][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:46:29,756][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:46:29,776][root][INFO] - Image embeddings computed.
[2025-02-08 22:46:33,918][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:46:33,927][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:46:33,948][root][INFO] - Image embeddings computed.
[2025-02-08 22:46:38,029][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:46:38,038][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:46:38,059][root][INFO] - Image embeddings computed.
The number of original masks: 74
The number of filtered masks: 35
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:47:23,120][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:47:23,127][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:47:23,148][root][INFO] - Image embeddings computed.
[2025-02-08 22:47:39,709][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:47:39,838][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:47:39,859][root][INFO] - Image embeddings computed.
[2025-02-08 22:47:43,982][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:47:43,987][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:47:44,007][root][INFO] - Image embeddings computed.
[2025-02-08 22:47:48,153][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:47:48,162][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:47:48,182][root][INFO] - Image embeddings computed.
[2025-02-08 22:47:52,242][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:47:52,252][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:47:52,272][root][INFO] - Image embeddings computed.
The number of original masks: 74
The number of filtered masks: 31
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:48:39,181][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:48:39,194][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:48:39,214][root][INFO] - Image embeddings computed.
[2025-02-08 22:48:55,451][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:48:55,462][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:48:55,482][root][INFO] - Image embeddings computed.
[2025-02-08 22:48:59,611][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:48:59,621][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:48:59,641][root][INFO] - Image embeddings computed.
[2025-02-08 22:49:03,779][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:49:03,789][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:49:03,809][root][INFO] - Image embeddings computed.
[2025-02-08 22:49:07,870][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:49:07,880][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:49:07,900][root][INFO] - Image embeddings computed.
The number of original masks: 67
The number of filtered masks: 30
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.490097036727874 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 44/50
[2025-02-08 22:50:05,646][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:50:05,658][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:50:05,679][root][INFO] - Image embeddings computed.
[2025-02-08 22:50:22,271][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:50:22,280][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:50:22,301][root][INFO] - Image embeddings computed.
[2025-02-08 22:50:26,454][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:50:26,463][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:50:26,483][root][INFO] - Image embeddings computed.
[2025-02-08 22:50:30,599][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:50:30,608][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:50:30,628][root][INFO] - Image embeddings computed.
[2025-02-08 22:50:34,730][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:50:34,739][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:50:34,759][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 16
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 22:51:21,072][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:51:21,082][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:51:21,103][root][INFO] - Image embeddings computed.
[2025-02-08 22:51:37,666][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:51:37,672][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:51:37,693][root][INFO] - Image embeddings computed.
[2025-02-08 22:51:41,828][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:51:41,836][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:51:41,857][root][INFO] - Image embeddings computed.
[2025-02-08 22:51:45,967][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:51:45,975][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:51:45,996][root][INFO] - Image embeddings computed.
[2025-02-08 22:51:50,103][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:51:50,112][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:51:50,133][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 19
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.636 | Done: False

[2025-02-08 22:52:42,400][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:52:42,532][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:52:42,554][root][INFO] - Image embeddings computed.
[2025-02-08 22:52:59,081][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:52:59,179][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:52:59,200][root][INFO] - Image embeddings computed.
[2025-02-08 22:53:03,284][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:53:03,382][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:53:03,418][root][INFO] - Image embeddings computed.
[2025-02-08 22:53:07,531][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:53:07,655][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:53:07,676][root][INFO] - Image embeddings computed.
[2025-02-08 22:53:11,793][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:53:11,932][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:53:11,953][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 19
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.633 | Done: False

Mean: 0.49333415226773886 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 45/50
[2025-02-08 22:54:17,204][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:54:17,303][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:54:17,324][root][INFO] - Image embeddings computed.
[2025-02-08 22:54:34,250][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:54:34,345][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:54:34,367][root][INFO] - Image embeddings computed.
[2025-02-08 22:54:38,466][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:54:38,575][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:54:38,597][root][INFO] - Image embeddings computed.
[2025-02-08 22:54:42,715][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:54:42,813][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:54:42,834][root][INFO] - Image embeddings computed.
[2025-02-08 22:54:46,982][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:54:47,090][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:54:47,111][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 22
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-08 22:55:39,749][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:55:39,852][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:55:39,873][root][INFO] - Image embeddings computed.
[2025-02-08 22:55:56,700][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:55:56,795][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:55:56,815][root][INFO] - Image embeddings computed.
[2025-02-08 22:56:00,916][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:56:01,039][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:56:01,059][root][INFO] - Image embeddings computed.
[2025-02-08 22:56:05,176][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:56:05,268][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:56:05,289][root][INFO] - Image embeddings computed.
[2025-02-08 22:56:09,437][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:56:09,543][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:56:09,564][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 20
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-08 22:57:05,409][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:57:05,517][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:57:05,538][root][INFO] - Image embeddings computed.
[2025-02-08 22:57:22,301][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:57:22,422][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:57:22,443][root][INFO] - Image embeddings computed.
[2025-02-08 22:57:26,547][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:57:26,684][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:57:26,705][root][INFO] - Image embeddings computed.
[2025-02-08 22:57:30,831][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:57:30,935][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:57:30,956][root][INFO] - Image embeddings computed.
[2025-02-08 22:57:35,097][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:57:35,249][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:57:35,270][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 17
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.692 | Done: False

[2025-02-08 22:58:28,382][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:58:28,494][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:58:28,516][root][INFO] - Image embeddings computed.
[2025-02-08 22:58:45,175][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:58:45,281][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:58:45,325][root][INFO] - Image embeddings computed.
[2025-02-08 22:58:49,416][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:58:49,508][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:58:49,529][root][INFO] - Image embeddings computed.
[2025-02-08 22:58:53,660][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:58:53,765][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:58:53,787][root][INFO] - Image embeddings computed.
[2025-02-08 22:58:57,934][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:58:58,036][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:58:58,057][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 18
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.692 | Done: False

Mean: 0.497755786490849 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 46/50
[2025-02-08 22:59:58,664][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 22:59:58,773][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 22:59:58,794][root][INFO] - Image embeddings computed.
[2025-02-08 23:00:15,336][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:00:15,433][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:00:15,453][root][INFO] - Image embeddings computed.
[2025-02-08 23:00:19,583][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:00:19,684][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:00:19,724][root][INFO] - Image embeddings computed.
[2025-02-08 23:00:23,843][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:00:23,941][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:00:23,967][root][INFO] - Image embeddings computed.
[2025-02-08 23:00:28,054][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:00:28,153][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:00:28,180][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 10
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.610 | Done: False

[2025-02-08 23:01:19,520][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:01:19,621][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:01:19,642][root][INFO] - Image embeddings computed.
[2025-02-08 23:01:36,000][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:01:36,115][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:01:36,136][root][INFO] - Image embeddings computed.
[2025-02-08 23:01:40,265][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:01:40,377][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:01:40,398][root][INFO] - Image embeddings computed.
[2025-02-08 23:01:44,514][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:01:44,672][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:01:44,692][root][INFO] - Image embeddings computed.
[2025-02-08 23:01:48,784][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:01:48,882][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:01:48,902][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 12
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5086741389584393 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 47/50
[2025-02-08 23:02:48,533][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:02:48,649][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:02:48,670][root][INFO] - Image embeddings computed.
[2025-02-08 23:03:05,406][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:03:05,521][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:03:05,542][root][INFO] - Image embeddings computed.
[2025-02-08 23:03:09,677][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:03:09,776][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:03:09,797][root][INFO] - Image embeddings computed.
[2025-02-08 23:03:13,928][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:03:14,027][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:03:14,047][root][INFO] - Image embeddings computed.
[2025-02-08 23:03:18,163][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:03:18,272][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:03:18,292][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 10
Lang Goal: pack all the tablet objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 23:04:10,004][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:04:10,107][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:04:10,128][root][INFO] - Image embeddings computed.
[2025-02-08 23:04:26,430][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:04:26,535][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:04:26,556][root][INFO] - Image embeddings computed.
[2025-02-08 23:04:30,689][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:04:30,791][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:04:30,812][root][INFO] - Image embeddings computed.
[2025-02-08 23:04:34,940][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:04:35,039][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:04:35,060][root][INFO] - Image embeddings computed.
[2025-02-08 23:04:39,192][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:04:39,291][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:04:39,311][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 9
Lang Goal: pack all the tablet objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 23:05:31,032][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:05:31,165][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:05:31,186][root][INFO] - Image embeddings computed.
[2025-02-08 23:05:47,623][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:05:47,716][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:05:47,737][root][INFO] - Image embeddings computed.
[2025-02-08 23:05:51,861][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:05:51,954][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:05:51,975][root][INFO] - Image embeddings computed.
[2025-02-08 23:05:56,109][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:05:56,208][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:05:56,229][root][INFO] - Image embeddings computed.
[2025-02-08 23:06:00,361][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:06:00,471][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:06:00,492][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 16
Lang Goal: pack all the tablet objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.4978512849380469 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 48/50
[2025-02-08 23:07:01,456][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:07:01,467][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:07:01,488][root][INFO] - Image embeddings computed.
[2025-02-08 23:07:18,021][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:07:18,028][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:07:18,048][root][INFO] - Image embeddings computed.
[2025-02-08 23:07:22,163][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:07:22,172][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:07:22,193][root][INFO] - Image embeddings computed.
[2025-02-08 23:07:26,327][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:07:26,337][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:07:26,357][root][INFO] - Image embeddings computed.
[2025-02-08 23:07:30,484][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:07:30,493][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:07:30,514][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 8
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.493 | Done: False

[2025-02-08 23:08:19,055][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:08:19,066][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:08:19,087][root][INFO] - Image embeddings computed.
[2025-02-08 23:08:35,389][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:08:35,396][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:08:35,416][root][INFO] - Image embeddings computed.
[2025-02-08 23:08:39,518][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:08:39,524][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:08:39,545][root][INFO] - Image embeddings computed.
[2025-02-08 23:08:43,673][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:08:43,682][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:08:43,702][root][INFO] - Image embeddings computed.
[2025-02-08 23:08:47,839][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:08:47,849][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:08:47,870][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 10
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.490 | Done: False

[2025-02-08 23:09:36,826][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:09:36,924][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:09:36,945][root][INFO] - Image embeddings computed.
[2025-02-08 23:09:53,092][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:09:53,200][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:09:53,227][root][INFO] - Image embeddings computed.
[2025-02-08 23:09:57,330][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:09:57,444][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:09:57,465][root][INFO] - Image embeddings computed.
[2025-02-08 23:10:01,584][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:10:01,683][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:10:01,703][root][INFO] - Image embeddings computed.
[2025-02-08 23:10:05,843][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:10:05,938][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:10:05,958][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 11
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.490 | Done: False

Mean: 0.497679035946282 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 49/50
[2025-02-08 23:11:12,347][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:11:12,456][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:11:12,477][root][INFO] - Image embeddings computed.
[2025-02-08 23:11:29,243][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:11:29,353][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:11:29,373][root][INFO] - Image embeddings computed.
[2025-02-08 23:11:33,457][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:11:33,589][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:11:33,610][root][INFO] - Image embeddings computed.
[2025-02-08 23:11:37,745][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:11:37,853][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:11:37,873][root][INFO] - Image embeddings computed.
[2025-02-08 23:11:42,003][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:11:42,118][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:11:42,139][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 22
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.128 | Done: False

[2025-02-08 23:12:33,338][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:12:33,350][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:12:33,370][root][INFO] - Image embeddings computed.
[2025-02-08 23:12:49,828][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:12:49,832][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:12:49,853][root][INFO] - Image embeddings computed.
[2025-02-08 23:12:53,933][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:12:53,936][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:12:53,956][root][INFO] - Image embeddings computed.
[2025-02-08 23:12:58,083][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:12:58,091][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:12:58,112][root][INFO] - Image embeddings computed.
[2025-02-08 23:13:02,239][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:13:02,249][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:13:02,269][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 18
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.128 | Done: False

[2025-02-08 23:13:57,736][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:13:57,836][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:13:57,857][root][INFO] - Image embeddings computed.
[2025-02-08 23:14:14,438][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:14:14,539][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:14:14,560][root][INFO] - Image embeddings computed.
[2025-02-08 23:14:18,663][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:14:18,762][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:14:18,783][root][INFO] - Image embeddings computed.
[2025-02-08 23:14:22,907][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:14:23,006][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:14:23,027][root][INFO] - Image embeddings computed.
[2025-02-08 23:14:27,161][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:14:27,260][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:14:27,280][root][INFO] - Image embeddings computed.
The number of original masks: 41
The number of filtered masks: 21
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.673 | Done: False

[2025-02-08 23:15:23,720][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:15:23,835][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:15:23,856][root][INFO] - Image embeddings computed.
[2025-02-08 23:15:40,111][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:15:40,223][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:15:40,244][root][INFO] - Image embeddings computed.
[2025-02-08 23:15:44,350][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:15:44,454][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:15:44,475][root][INFO] - Image embeddings computed.
[2025-02-08 23:15:48,596][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:15:48,730][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:15:48,751][root][INFO] - Image embeddings computed.
[2025-02-08 23:15:52,890][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:15:52,983][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:15:53,005][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 17
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.705 | Done: False

Mean: 0.5019024502028798 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
Test: 50/50
[2025-02-08 23:16:56,652][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:16:56,777][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:16:56,798][root][INFO] - Image embeddings computed.
[2025-02-08 23:17:13,513][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:17:13,632][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:17:13,653][root][INFO] - Image embeddings computed.
[2025-02-08 23:17:17,769][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:17:17,862][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:17:17,883][root][INFO] - Image embeddings computed.
[2025-02-08 23:17:21,982][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:17:22,075][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:17:22,096][root][INFO] - Image embeddings computed.
[2025-02-08 23:17:26,214][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:17:26,317][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:17:26,338][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 10
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.556 | Done: False

[2025-02-08 23:18:20,933][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:18:21,046][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:18:21,066][root][INFO] - Image embeddings computed.
[2025-02-08 23:18:37,572][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:18:37,671][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:18:37,692][root][INFO] - Image embeddings computed.
[2025-02-08 23:18:41,808][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:18:41,913][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:18:41,934][root][INFO] - Image embeddings computed.
[2025-02-08 23:18:46,049][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:18:46,161][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:18:46,181][root][INFO] - Image embeddings computed.
[2025-02-08 23:18:50,289][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:18:50,390][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:18:50,411][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 17
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5118644011988223 | Task: packing-seen-google-objects-group | Ckpt: steps=00040-val_loss=0.00020419.ckpt
[2025-02-08 23:19:53,112][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 23:19:53,274][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 23:20:00,081][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Attn FCN: conceptfusion_sam2
[2025-02-08 23:20:09,676][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 23:20:09,834][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 23:20:16,393][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
[2025-02-08 23:20:25,432][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 23:20:25,610][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 23:20:32,100][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Transport FCN: <class 'cliport.models.conceptfusion_sam2.conceptfusion_sam2'>, <class 'cliport.models.conceptfusion_sam2.conceptfusion_sam2_kernel'>
[2025-02-08 23:20:41,790][root][INFO] - Loaded checkpoint sucessfully
[2025-02-08 23:20:41,973][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-08 23:20:48,526][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Agent: packing-seen-google-objects-group-clipfit-n50, Logging: False
Loaded: /home/a/acw799/cliport/exps_clipfit/packing-seen-google-objects-group-clipfit-n10-train/checkpoints/steps=00080-val_loss=0.00020305.ckpt
Test: 1/50
[2025-02-08 23:21:35,761][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:21:35,966][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:21:35,989][root][INFO] - Image embeddings computed.
[2025-02-08 23:21:52,935][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:21:53,034][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:21:53,055][root][INFO] - Image embeddings computed.
[2025-02-08 23:21:57,228][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:21:57,327][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:21:57,347][root][INFO] - Image embeddings computed.
[2025-02-08 23:22:01,561][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:22:01,665][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:22:01,686][root][INFO] - Image embeddings computed.
[2025-02-08 23:22:05,860][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:22:05,953][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:22:05,974][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 19
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-08 23:23:03,201][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:23:03,300][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:23:03,322][root][INFO] - Image embeddings computed.
[2025-02-08 23:23:19,881][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:23:19,982][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:23:20,004][root][INFO] - Image embeddings computed.
[2025-02-08 23:23:24,169][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:23:24,273][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:23:24,294][root][INFO] - Image embeddings computed.
[2025-02-08 23:23:28,497][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:23:28,618][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:23:28,639][root][INFO] - Image embeddings computed.
[2025-02-08 23:23:32,840][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:23:32,950][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:23:32,971][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 12
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-08 23:24:28,696][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:24:28,800][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:24:28,821][root][INFO] - Image embeddings computed.
[2025-02-08 23:24:45,522][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:24:45,624][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:24:45,645][root][INFO] - Image embeddings computed.
[2025-02-08 23:24:49,820][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:24:49,941][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:24:49,962][root][INFO] - Image embeddings computed.
[2025-02-08 23:24:54,182][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:24:54,287][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:24:54,308][root][INFO] - Image embeddings computed.
[2025-02-08 23:24:58,508][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:24:58,606][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:24:58,627][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 19
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

Mean: 0.38461538461538464 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 2/50
[2025-02-08 23:26:07,739][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:26:07,856][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:26:07,878][root][INFO] - Image embeddings computed.
[2025-02-08 23:26:24,813][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:26:24,910][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:26:24,931][root][INFO] - Image embeddings computed.
[2025-02-08 23:26:29,088][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:26:29,197][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:26:29,224][root][INFO] - Image embeddings computed.
[2025-02-08 23:26:33,433][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:26:33,533][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:26:33,554][root][INFO] - Image embeddings computed.
[2025-02-08 23:26:37,787][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:26:37,886][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:26:37,906][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 16
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

[2025-02-08 23:27:35,612][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:27:35,738][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:27:35,759][root][INFO] - Image embeddings computed.
[2025-02-08 23:27:52,600][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:27:52,717][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:27:52,738][root][INFO] - Image embeddings computed.
[2025-02-08 23:27:56,894][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:27:56,993][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:27:57,013][root][INFO] - Image embeddings computed.
[2025-02-08 23:28:01,224][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:28:01,340][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:28:01,361][root][INFO] - Image embeddings computed.
[2025-02-08 23:28:05,588][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:28:05,688][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:28:05,715][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 21
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

[2025-02-08 23:29:04,622][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:29:04,734][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:29:04,755][root][INFO] - Image embeddings computed.
[2025-02-08 23:29:21,317][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:29:21,414][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:29:21,435][root][INFO] - Image embeddings computed.
[2025-02-08 23:29:25,592][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:29:25,689][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:29:25,710][root][INFO] - Image embeddings computed.
[2025-02-08 23:29:29,929][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:29:30,024][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:29:30,045][root][INFO] - Image embeddings computed.
[2025-02-08 23:29:34,270][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:29:34,367][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:29:34,389][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 17
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

[2025-02-08 23:30:31,890][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:30:32,002][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:30:32,035][root][INFO] - Image embeddings computed.
[2025-02-08 23:30:48,886][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:30:48,982][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:30:49,003][root][INFO] - Image embeddings computed.
[2025-02-08 23:30:53,167][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:30:53,265][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:30:53,286][root][INFO] - Image embeddings computed.
[2025-02-08 23:30:57,514][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:30:57,614][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:30:57,635][root][INFO] - Image embeddings computed.
[2025-02-08 23:31:01,868][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:31:01,971][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:31:01,992][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 17
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.885 | Done: False

Mean: 0.6346153846153846 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 3/50
[2025-02-08 23:32:08,281][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:32:08,383][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:32:08,404][root][INFO] - Image embeddings computed.
[2025-02-08 23:32:25,319][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:32:25,417][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:32:25,438][root][INFO] - Image embeddings computed.
[2025-02-08 23:32:29,646][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:32:29,745][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:32:29,766][root][INFO] - Image embeddings computed.
[2025-02-08 23:32:33,933][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:32:34,025][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:32:34,045][root][INFO] - Image embeddings computed.
[2025-02-08 23:32:38,258][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:32:38,351][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:32:38,371][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 11
Lang Goal: pack all the rocket racoon figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-08 23:33:36,270][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:33:36,398][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:33:36,420][root][INFO] - Image embeddings computed.
[2025-02-08 23:33:53,243][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:33:53,358][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:33:53,378][root][INFO] - Image embeddings computed.
[2025-02-08 23:33:57,567][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:33:57,666][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:33:57,687][root][INFO] - Image embeddings computed.
[2025-02-08 23:34:01,858][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:34:01,956][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:34:01,977][root][INFO] - Image embeddings computed.
[2025-02-08 23:34:06,190][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:34:06,303][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:34:06,324][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 13
Lang Goal: pack all the rocket racoon figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.7564102564102564 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 4/50
[2025-02-08 23:35:15,894][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:35:15,996][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:35:16,017][root][INFO] - Image embeddings computed.
[2025-02-08 23:35:32,751][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:35:32,879][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:35:32,900][root][INFO] - Image embeddings computed.
[2025-02-08 23:35:37,081][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:35:37,216][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:35:37,237][root][INFO] - Image embeddings computed.
[2025-02-08 23:35:41,425][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:35:41,538][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:35:41,559][root][INFO] - Image embeddings computed.
[2025-02-08 23:35:45,724][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:35:45,828][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:35:45,849][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 15
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 0.250 | Done: False

[2025-02-08 23:36:45,116][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:36:45,223][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:36:45,244][root][INFO] - Image embeddings computed.
[2025-02-08 23:37:01,925][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:37:02,027][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:37:02,047][root][INFO] - Image embeddings computed.
[2025-02-08 23:37:06,226][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:37:06,362][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:37:06,383][root][INFO] - Image embeddings computed.
[2025-02-08 23:37:10,576][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:37:10,769][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:37:10,790][root][INFO] - Image embeddings computed.
[2025-02-08 23:37:14,956][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:37:15,102][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:37:15,123][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 18
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 0.750 | Done: False

[2025-02-08 23:38:15,430][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:38:15,528][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:38:15,549][root][INFO] - Image embeddings computed.
[2025-02-08 23:38:32,152][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:38:32,250][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:38:32,270][root][INFO] - Image embeddings computed.
[2025-02-08 23:38:36,453][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:38:36,558][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:38:36,578][root][INFO] - Image embeddings computed.
[2025-02-08 23:38:40,775][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:38:40,873][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:38:40,894][root][INFO] - Image embeddings computed.
[2025-02-08 23:38:45,063][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:38:45,157][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:38:45,177][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 21
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.8173076923076923 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 5/50
[2025-02-08 23:39:50,696][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:39:50,709][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:39:50,729][root][INFO] - Image embeddings computed.
[2025-02-08 23:40:07,494][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:40:07,500][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:40:07,521][root][INFO] - Image embeddings computed.
[2025-02-08 23:40:11,727][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:40:11,731][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:40:11,751][root][INFO] - Image embeddings computed.
[2025-02-08 23:40:15,963][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:40:15,967][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:40:16,005][root][INFO] - Image embeddings computed.
[2025-02-08 23:40:20,204][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:40:20,213][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:40:20,233][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 9
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 23:41:19,310][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:41:19,422][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:41:19,443][root][INFO] - Image embeddings computed.
[2025-02-08 23:41:36,087][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:41:36,197][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:41:36,218][root][INFO] - Image embeddings computed.
[2025-02-08 23:41:40,421][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:41:40,536][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:41:40,557][root][INFO] - Image embeddings computed.
[2025-02-08 23:41:44,792][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:41:44,976][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:41:44,997][root][INFO] - Image embeddings computed.
[2025-02-08 23:41:49,204][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:41:49,310][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:41:49,331][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 13
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-08 23:42:48,822][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:42:48,924][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:42:48,945][root][INFO] - Image embeddings computed.
[2025-02-08 23:43:05,494][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:43:05,622][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:43:05,643][root][INFO] - Image embeddings computed.
[2025-02-08 23:43:09,845][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:43:09,944][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:43:09,965][root][INFO] - Image embeddings computed.
[2025-02-08 23:43:14,146][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:43:14,251][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:43:14,271][root][INFO] - Image embeddings computed.
[2025-02-08 23:43:18,478][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:43:18,604][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:43:18,625][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 10
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.8538461538461538 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 6/50
[2025-02-08 23:44:27,306][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:44:27,446][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:44:27,472][root][INFO] - Image embeddings computed.
[2025-02-08 23:44:44,485][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:44:44,614][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:44:44,635][root][INFO] - Image embeddings computed.
[2025-02-08 23:44:48,824][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:44:48,930][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:44:48,950][root][INFO] - Image embeddings computed.
[2025-02-08 23:44:53,159][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:44:53,338][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:44:53,359][root][INFO] - Image embeddings computed.
[2025-02-08 23:44:57,530][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:44:57,633][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:44:57,658][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 14
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 23:45:58,626][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:45:58,724][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:45:58,746][root][INFO] - Image embeddings computed.
[2025-02-08 23:46:15,442][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:46:15,541][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:46:15,561][root][INFO] - Image embeddings computed.
[2025-02-08 23:46:19,758][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:46:19,857][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:46:19,878][root][INFO] - Image embeddings computed.
[2025-02-08 23:46:24,083][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:46:24,180][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:46:24,201][root][INFO] - Image embeddings computed.
[2025-02-08 23:46:28,378][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:46:28,476][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:46:28,497][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 19
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 23:47:30,215][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:47:30,321][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:47:30,341][root][INFO] - Image embeddings computed.
[2025-02-08 23:47:47,016][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:47:47,115][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:47:47,136][root][INFO] - Image embeddings computed.
[2025-02-08 23:47:51,329][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:47:51,446][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:47:51,467][root][INFO] - Image embeddings computed.
[2025-02-08 23:47:55,690][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:47:55,795][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:47:55,816][root][INFO] - Image embeddings computed.
[2025-02-08 23:47:59,979][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:48:00,085][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:48:00,106][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 16
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.7115384615384616 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 7/50
[2025-02-08 23:49:08,370][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:49:08,470][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:49:08,491][root][INFO] - Image embeddings computed.
[2025-02-08 23:49:25,249][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:49:25,347][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:49:25,367][root][INFO] - Image embeddings computed.
[2025-02-08 23:49:29,558][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:49:29,670][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:49:29,690][root][INFO] - Image embeddings computed.
[2025-02-08 23:49:33,884][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:49:33,994][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:49:34,015][root][INFO] - Image embeddings computed.
[2025-02-08 23:49:38,185][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:49:38,279][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:49:38,313][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 9
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 23:50:41,449][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:50:41,550][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:50:41,572][root][INFO] - Image embeddings computed.
[2025-02-08 23:50:58,193][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:50:58,345][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:50:58,372][root][INFO] - Image embeddings computed.
[2025-02-08 23:51:02,566][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:51:02,754][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:51:02,775][root][INFO] - Image embeddings computed.
[2025-02-08 23:51:06,960][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:51:07,083][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:51:07,110][root][INFO] - Image embeddings computed.
[2025-02-08 23:51:11,293][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:51:11,398][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:51:11,420][root][INFO] - Image embeddings computed.
The number of original masks: 16
The number of filtered masks: 9
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.400 | Done: False

[2025-02-08 23:52:12,323][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:52:12,422][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:52:12,443][root][INFO] - Image embeddings computed.
[2025-02-08 23:52:29,055][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:52:29,176][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:52:29,196][root][INFO] - Image embeddings computed.
[2025-02-08 23:52:33,386][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:52:33,503][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:52:33,524][root][INFO] - Image embeddings computed.
[2025-02-08 23:52:37,702][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:52:37,794][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:52:37,815][root][INFO] - Image embeddings computed.
[2025-02-08 23:52:41,984][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:52:42,078][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:52:42,098][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 15
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.7527472527472527 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 8/50
[2025-02-08 23:53:57,958][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:53:58,082][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:53:58,108][root][INFO] - Image embeddings computed.
[2025-02-08 23:54:14,853][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:54:14,962][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:54:14,984][root][INFO] - Image embeddings computed.
[2025-02-08 23:54:19,154][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:54:19,256][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:54:19,283][root][INFO] - Image embeddings computed.
[2025-02-08 23:54:23,483][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:54:23,668][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:54:23,689][root][INFO] - Image embeddings computed.
[2025-02-08 23:54:27,854][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:54:27,980][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:54:28,001][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 25
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-08 23:55:32,816][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:55:32,922][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:55:32,943][root][INFO] - Image embeddings computed.
[2025-02-08 23:55:49,419][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:55:49,619][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:55:49,645][root][INFO] - Image embeddings computed.
[2025-02-08 23:55:53,834][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:55:53,932][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:55:53,953][root][INFO] - Image embeddings computed.
[2025-02-08 23:55:58,156][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:55:58,284][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:55:58,306][root][INFO] - Image embeddings computed.
[2025-02-08 23:56:02,486][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:56:02,608][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:56:02,629][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 29
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.652 | Done: False

[2025-02-08 23:57:08,164][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:57:08,262][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:57:08,283][root][INFO] - Image embeddings computed.
[2025-02-08 23:57:24,746][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:57:24,839][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:57:24,860][root][INFO] - Image embeddings computed.
[2025-02-08 23:57:29,034][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:57:29,130][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:57:29,150][root][INFO] - Image embeddings computed.
[2025-02-08 23:57:33,358][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:57:33,469][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:57:33,490][root][INFO] - Image embeddings computed.
[2025-02-08 23:57:37,686][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:57:37,800][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:57:37,820][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 25
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.652 | Done: False

Mean: 0.740175585284281 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 9/50
[2025-02-08 23:58:50,911][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:58:51,019][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:58:51,040][root][INFO] - Image embeddings computed.
[2025-02-08 23:59:07,979][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:59:08,077][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:59:08,097][root][INFO] - Image embeddings computed.
[2025-02-08 23:59:12,272][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:59:12,372][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:59:12,392][root][INFO] - Image embeddings computed.
[2025-02-08 23:59:16,607][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:59:16,707][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:59:16,727][root][INFO] - Image embeddings computed.
[2025-02-08 23:59:20,910][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-08 23:59:21,008][root][INFO] - Computing image embeddings for the provided image...
[2025-02-08 23:59:21,029][root][INFO] - Image embeddings computed.
The number of original masks: 47
The number of filtered masks: 28
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.379 | Done: False

[2025-02-09 00:00:26,115][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:00:26,125][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:00:26,146][root][INFO] - Image embeddings computed.
[2025-02-09 00:00:42,954][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:00:42,963][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:00:42,984][root][INFO] - Image embeddings computed.
[2025-02-09 00:00:47,172][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:00:47,183][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:00:47,203][root][INFO] - Image embeddings computed.
[2025-02-09 00:00:51,420][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:00:51,431][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:00:51,475][root][INFO] - Image embeddings computed.
[2025-02-09 00:00:55,644][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:00:55,654][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:00:55,674][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 28
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.386 | Done: False

[2025-02-09 00:02:01,432][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:02:01,547][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:02:01,568][root][INFO] - Image embeddings computed.
[2025-02-09 00:02:18,392][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:02:18,490][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:02:18,512][root][INFO] - Image embeddings computed.
[2025-02-09 00:02:22,709][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:02:22,802][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:02:22,823][root][INFO] - Image embeddings computed.
[2025-02-09 00:02:27,036][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:02:27,135][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:02:27,156][root][INFO] - Image embeddings computed.
[2025-02-09 00:02:31,323][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:02:31,431][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:02:31,452][root][INFO] - Image embeddings computed.
The number of original masks: 45
The number of filtered masks: 26
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.384 | Done: False

[2025-02-09 00:03:37,447][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:03:37,581][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:03:37,608][root][INFO] - Image embeddings computed.
[2025-02-09 00:03:54,377][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:03:54,491][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:03:54,512][root][INFO] - Image embeddings computed.
[2025-02-09 00:03:58,709][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:03:58,846][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:03:58,867][root][INFO] - Image embeddings computed.
[2025-02-09 00:04:03,090][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:04:03,194][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:04:03,215][root][INFO] - Image embeddings computed.
[2025-02-09 00:04:07,385][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:04:07,479][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:04:07,500][root][INFO] - Image embeddings computed.
The number of original masks: 44
The number of filtered masks: 25
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.382 | Done: False

Mean: 0.7004175137167464 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 10/50
[2025-02-09 00:05:24,396][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:05:24,525][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:05:24,546][root][INFO] - Image embeddings computed.
[2025-02-09 00:05:41,643][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:05:41,742][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:05:41,763][root][INFO] - Image embeddings computed.
[2025-02-09 00:05:45,960][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:05:46,065][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:05:46,085][root][INFO] - Image embeddings computed.
[2025-02-09 00:05:50,286][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:05:50,391][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:05:50,411][root][INFO] - Image embeddings computed.
[2025-02-09 00:05:54,607][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:05:54,705][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:05:54,725][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 13
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.441 | Done: False

[2025-02-09 00:06:54,241][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:06:54,261][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:06:54,287][root][INFO] - Image embeddings computed.
[2025-02-09 00:07:11,144][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:07:11,156][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:07:11,176][root][INFO] - Image embeddings computed.
[2025-02-09 00:07:15,343][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:07:15,353][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:07:15,373][root][INFO] - Image embeddings computed.
[2025-02-09 00:07:19,569][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:07:19,573][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:07:19,594][root][INFO] - Image embeddings computed.
[2025-02-09 00:07:23,790][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:07:23,795][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:07:23,815][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 15
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.882 | Done: False

[2025-02-09 00:08:28,449][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:08:28,555][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:08:28,576][root][INFO] - Image embeddings computed.
[2025-02-09 00:08:45,311][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:08:45,431][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:08:45,452][root][INFO] - Image embeddings computed.
[2025-02-09 00:08:49,662][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:08:49,766][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:08:49,787][root][INFO] - Image embeddings computed.
[2025-02-09 00:08:54,001][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:08:54,101][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:08:54,122][root][INFO] - Image embeddings computed.
[2025-02-09 00:08:58,320][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:08:58,442][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:08:58,463][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 12
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.882 | Done: False

[2025-02-09 00:10:02,948][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:10:03,076][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:10:03,098][root][INFO] - Image embeddings computed.
[2025-02-09 00:10:19,877][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:10:20,016][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:10:20,038][root][INFO] - Image embeddings computed.
[2025-02-09 00:10:24,217][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:10:24,406][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:10:24,427][root][INFO] - Image embeddings computed.
[2025-02-09 00:10:28,610][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:10:28,747][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:10:28,772][root][INFO] - Image embeddings computed.
[2025-02-09 00:10:32,966][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:10:33,153][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:10:33,174][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 16
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.7303757623450717 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 11/50
[2025-02-09 00:11:46,194][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:11:46,349][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:11:46,376][root][INFO] - Image embeddings computed.
[2025-02-09 00:12:03,166][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:12:03,266][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:12:03,287][root][INFO] - Image embeddings computed.
[2025-02-09 00:12:07,483][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:12:07,582][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:12:07,602][root][INFO] - Image embeddings computed.
[2025-02-09 00:12:11,821][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:12:11,919][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:12:11,939][root][INFO] - Image embeddings computed.
[2025-02-09 00:12:16,101][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:12:16,199][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:12:16,219][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 13
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 00:13:22,654][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:13:22,754][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:13:22,798][root][INFO] - Image embeddings computed.
[2025-02-09 00:13:39,782][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:13:39,881][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:13:39,902][root][INFO] - Image embeddings computed.
[2025-02-09 00:13:44,087][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:13:44,283][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:13:44,304][root][INFO] - Image embeddings computed.
[2025-02-09 00:13:48,515][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:13:48,612][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:13:48,633][root][INFO] - Image embeddings computed.
[2025-02-09 00:13:52,792][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:13:52,920][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:13:52,940][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 15
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 00:14:58,284][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:14:58,390][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:14:58,412][root][INFO] - Image embeddings computed.
[2025-02-09 00:15:15,070][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:15:15,206][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:15:15,227][root][INFO] - Image embeddings computed.
[2025-02-09 00:15:19,417][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:15:19,540][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:15:19,561][root][INFO] - Image embeddings computed.
[2025-02-09 00:15:23,773][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:15:23,871][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:15:23,892][root][INFO] - Image embeddings computed.
[2025-02-09 00:15:28,058][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:15:28,169][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:15:28,190][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 15
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.6639779657682471 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 12/50
[2025-02-09 00:16:42,122][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:16:42,222][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:16:42,243][root][INFO] - Image embeddings computed.
[2025-02-09 00:16:59,117][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:16:59,227][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:16:59,247][root][INFO] - Image embeddings computed.
[2025-02-09 00:17:03,447][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:17:03,549][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:17:03,570][root][INFO] - Image embeddings computed.
[2025-02-09 00:17:07,761][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:17:07,861][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:17:07,888][root][INFO] - Image embeddings computed.
[2025-02-09 00:17:12,088][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:17:12,209][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:17:12,230][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 12
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:18:18,647][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:18:18,767][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:18:18,796][root][INFO] - Image embeddings computed.
[2025-02-09 00:18:35,437][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:18:35,564][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:18:35,585][root][INFO] - Image embeddings computed.
[2025-02-09 00:18:39,793][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:18:39,934][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:18:39,955][root][INFO] - Image embeddings computed.
[2025-02-09 00:18:44,145][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:18:44,332][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:18:44,353][root][INFO] - Image embeddings computed.
[2025-02-09 00:18:48,554][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:18:48,696][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:18:48,717][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 8
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:19:53,562][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:19:53,679][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:19:53,700][root][INFO] - Image embeddings computed.
[2025-02-09 00:20:10,355][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:20:10,462][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:20:10,483][root][INFO] - Image embeddings computed.
[2025-02-09 00:20:14,681][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:20:14,849][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:20:14,870][root][INFO] - Image embeddings computed.
[2025-02-09 00:20:19,075][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:20:19,218][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:20:19,239][root][INFO] - Image embeddings computed.
[2025-02-09 00:20:23,429][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:20:23,541][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:20:23,562][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 10
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.6503131352875599 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 13/50
[2025-02-09 00:21:36,732][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:21:36,842][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:21:36,869][root][INFO] - Image embeddings computed.
[2025-02-09 00:21:54,352][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:21:54,453][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:21:54,474][root][INFO] - Image embeddings computed.
[2025-02-09 00:21:58,669][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:21:58,782][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:21:58,803][root][INFO] - Image embeddings computed.
[2025-02-09 00:22:03,005][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:22:03,111][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:22:03,132][root][INFO] - Image embeddings computed.
[2025-02-09 00:22:07,292][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:22:07,426][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:22:07,447][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 31
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 00:23:18,223][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:23:18,325][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:23:18,345][root][INFO] - Image embeddings computed.
[2025-02-09 00:23:35,345][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:23:35,448][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:23:35,469][root][INFO] - Image embeddings computed.
[2025-02-09 00:23:39,662][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:23:39,764][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:23:39,784][root][INFO] - Image embeddings computed.
[2025-02-09 00:23:43,977][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:23:44,070][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:23:44,091][root][INFO] - Image embeddings computed.
[2025-02-09 00:23:48,261][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:23:48,436][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:23:48,457][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 32
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:24:59,888][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:25:00,017][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:25:00,038][root][INFO] - Image embeddings computed.
[2025-02-09 00:25:16,969][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:25:17,070][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:25:17,096][root][INFO] - Image embeddings computed.
[2025-02-09 00:25:21,294][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:25:21,404][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:25:21,425][root][INFO] - Image embeddings computed.
[2025-02-09 00:25:25,635][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:25:25,734][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:25:25,761][root][INFO] - Image embeddings computed.
[2025-02-09 00:25:29,951][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:25:30,156][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:25:30,177][root][INFO] - Image embeddings computed.
The number of original masks: 33
The number of filtered masks: 27
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.638750586419286 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 14/50
[2025-02-09 00:26:48,697][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:26:48,795][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:26:48,816][root][INFO] - Image embeddings computed.
[2025-02-09 00:27:05,493][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:27:05,592][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:27:05,613][root][INFO] - Image embeddings computed.
[2025-02-09 00:27:09,821][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:27:09,920][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:27:09,940][root][INFO] - Image embeddings computed.
[2025-02-09 00:27:14,156][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:27:14,254][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:27:14,274][root][INFO] - Image embeddings computed.
[2025-02-09 00:27:18,449][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:27:18,576][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:27:18,597][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:28:24,855][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:28:24,972][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:28:24,993][root][INFO] - Image embeddings computed.
[2025-02-09 00:28:41,597][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:28:41,693][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:28:41,714][root][INFO] - Image embeddings computed.
[2025-02-09 00:28:45,913][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:28:46,006][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:28:46,027][root][INFO] - Image embeddings computed.
[2025-02-09 00:28:50,261][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:28:50,360][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:28:50,381][root][INFO] - Image embeddings computed.
[2025-02-09 00:28:54,552][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:28:54,723][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:28:54,744][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.6645541159607655 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 15/50
[2025-02-09 00:30:16,492][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:30:16,640][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:30:16,660][root][INFO] - Image embeddings computed.
[2025-02-09 00:30:33,304][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:30:33,402][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:30:33,424][root][INFO] - Image embeddings computed.
[2025-02-09 00:30:37,610][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:30:37,714][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:30:37,734][root][INFO] - Image embeddings computed.
[2025-02-09 00:30:41,920][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:30:42,015][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:30:42,036][root][INFO] - Image embeddings computed.
[2025-02-09 00:30:46,189][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:30:46,289][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:30:46,310][root][INFO] - Image embeddings computed.
The number of original masks: 45
The number of filtered masks: 25
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:31:57,442][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:31:57,559][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:31:57,584][root][INFO] - Image embeddings computed.
[2025-02-09 00:32:14,138][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:32:14,233][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:32:14,254][root][INFO] - Image embeddings computed.
[2025-02-09 00:32:18,428][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:32:18,550][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:32:18,570][root][INFO] - Image embeddings computed.
[2025-02-09 00:32:22,773][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:32:22,866][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:32:22,887][root][INFO] - Image embeddings computed.
[2025-02-09 00:32:27,055][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:32:27,148][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:32:27,169][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 24
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.6869171748967146 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 16/50
[2025-02-09 00:33:43,983][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:33:43,994][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:33:44,014][root][INFO] - Image embeddings computed.
[2025-02-09 00:34:00,698][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:34:00,707][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:34:00,727][root][INFO] - Image embeddings computed.
[2025-02-09 00:34:04,965][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:34:04,969][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:34:04,989][root][INFO] - Image embeddings computed.
[2025-02-09 00:34:09,185][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:34:09,190][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:34:09,210][root][INFO] - Image embeddings computed.
[2025-02-09 00:34:13,383][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:34:13,392][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:34:13,412][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 20
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.381 | Done: False

[2025-02-09 00:35:23,535][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:35:23,650][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:35:23,677][root][INFO] - Image embeddings computed.
[2025-02-09 00:35:40,327][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:35:40,434][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:35:40,455][root][INFO] - Image embeddings computed.
[2025-02-09 00:35:44,677][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:35:44,777][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:35:44,797][root][INFO] - Image embeddings computed.
[2025-02-09 00:35:49,006][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:35:49,129][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:35:49,150][root][INFO] - Image embeddings computed.
[2025-02-09 00:35:53,323][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:35:53,425][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:35:53,445][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 21
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.381 | Done: False

[2025-02-09 00:36:59,765][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:36:59,778][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:36:59,799][root][INFO] - Image embeddings computed.
[2025-02-09 00:37:16,439][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:37:16,446][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:37:16,466][root][INFO] - Image embeddings computed.
[2025-02-09 00:37:20,675][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:37:20,680][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:37:20,700][root][INFO] - Image embeddings computed.
[2025-02-09 00:37:24,914][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:37:24,926][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:37:24,946][root][INFO] - Image embeddings computed.
[2025-02-09 00:37:29,121][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:37:29,131][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:37:29,151][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 19
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.6752348514656699 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 17/50
[2025-02-09 00:38:41,832][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:38:41,838][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:38:41,859][root][INFO] - Image embeddings computed.
[2025-02-09 00:38:58,711][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:38:58,721][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:38:58,741][root][INFO] - Image embeddings computed.
[2025-02-09 00:39:02,946][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:39:02,955][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:39:02,975][root][INFO] - Image embeddings computed.
[2025-02-09 00:39:07,157][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:39:07,167][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:39:07,187][root][INFO] - Image embeddings computed.
[2025-02-09 00:39:11,374][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:39:11,383][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:39:11,403][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 11
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 00:40:20,089][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:40:20,191][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:40:20,217][root][INFO] - Image embeddings computed.
[2025-02-09 00:40:37,070][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:40:37,169][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:40:37,190][root][INFO] - Image embeddings computed.
[2025-02-09 00:40:41,373][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:40:41,477][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:40:41,498][root][INFO] - Image embeddings computed.
[2025-02-09 00:40:45,705][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:40:45,805][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:40:45,826][root][INFO] - Image embeddings computed.
[2025-02-09 00:40:50,008][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:40:50,127][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:40:50,147][root][INFO] - Image embeddings computed.
The number of original masks: 16
The number of filtered masks: 12
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.701 | Done: False

[2025-02-09 00:41:56,041][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:41:56,051][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:41:56,072][root][INFO] - Image embeddings computed.
[2025-02-09 00:42:12,682][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:42:12,689][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:42:12,709][root][INFO] - Image embeddings computed.
[2025-02-09 00:42:16,898][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:42:16,912][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:42:16,934][root][INFO] - Image embeddings computed.
[2025-02-09 00:42:21,127][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:42:21,132][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:42:21,152][root][INFO] - Image embeddings computed.
[2025-02-09 00:42:25,332][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:42:25,336][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:42:25,356][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 11
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.701 | Done: False

Mean: 0.6767466001699982 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 18/50
[2025-02-09 00:43:42,775][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:43:42,795][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:43:42,816][root][INFO] - Image embeddings computed.
[2025-02-09 00:43:59,532][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:43:59,541][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:43:59,562][root][INFO] - Image embeddings computed.
[2025-02-09 00:44:03,743][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:44:03,753][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:44:03,774][root][INFO] - Image embeddings computed.
[2025-02-09 00:44:07,957][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:44:07,979][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:44:08,000][root][INFO] - Image embeddings computed.
[2025-02-09 00:44:12,188][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:44:12,197][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:44:12,217][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 15
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.593 | Done: False

[2025-02-09 00:45:18,231][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:45:18,240][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:45:18,260][root][INFO] - Image embeddings computed.
[2025-02-09 00:45:34,981][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:45:34,989][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:45:35,009][root][INFO] - Image embeddings computed.
[2025-02-09 00:45:39,209][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:45:39,213][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:45:39,233][root][INFO] - Image embeddings computed.
[2025-02-09 00:45:43,422][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:45:43,432][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:45:43,452][root][INFO] - Image embeddings computed.
[2025-02-09 00:45:47,652][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:45:47,661][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:45:47,681][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 13
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.6947051223827762 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 19/50
[2025-02-09 00:47:06,359][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:47:06,367][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:47:06,389][root][INFO] - Image embeddings computed.
[2025-02-09 00:47:22,942][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:47:22,953][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:47:22,973][root][INFO] - Image embeddings computed.
[2025-02-09 00:47:27,164][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:47:27,168][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:47:27,189][root][INFO] - Image embeddings computed.
[2025-02-09 00:47:31,413][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:47:31,418][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:47:31,438][root][INFO] - Image embeddings computed.
[2025-02-09 00:47:35,656][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:47:35,666][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:47:35,687][root][INFO] - Image embeddings computed.
The number of original masks: 44
The number of filtered masks: 28
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 00:48:49,109][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:48:49,122][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:48:49,143][root][INFO] - Image embeddings computed.
[2025-02-09 00:49:05,756][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:49:05,765][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:49:05,787][root][INFO] - Image embeddings computed.
[2025-02-09 00:49:09,988][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:49:09,999][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:49:10,020][root][INFO] - Image embeddings computed.
[2025-02-09 00:49:14,246][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:49:14,256][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:49:14,277][root][INFO] - Image embeddings computed.
[2025-02-09 00:49:18,487][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:49:18,497][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:49:18,518][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 23
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 00:50:31,402][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:50:31,539][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:50:31,560][root][INFO] - Image embeddings computed.
[2025-02-09 00:50:48,138][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:50:48,278][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:50:48,298][root][INFO] - Image embeddings computed.
[2025-02-09 00:50:52,493][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:50:52,592][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:50:52,613][root][INFO] - Image embeddings computed.
[2025-02-09 00:50:56,842][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:50:56,963][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:50:56,996][root][INFO] - Image embeddings computed.
[2025-02-09 00:51:01,208][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:51:01,319][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:51:01,349][root][INFO] - Image embeddings computed.
The number of original masks: 40
The number of filtered masks: 25
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 00:52:14,345][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:52:14,441][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:52:14,461][root][INFO] - Image embeddings computed.
[2025-02-09 00:52:31,150][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:52:31,265][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:52:31,286][root][INFO] - Image embeddings computed.
[2025-02-09 00:52:35,488][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:52:35,593][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:52:35,614][root][INFO] - Image embeddings computed.
[2025-02-09 00:52:39,844][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:52:39,950][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:52:39,971][root][INFO] - Image embeddings computed.
[2025-02-09 00:52:44,182][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:52:44,297][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:52:44,318][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 24
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

Mean: 0.6815335077544429 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 20/50
[2025-02-09 00:54:10,325][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:54:10,509][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:54:10,537][root][INFO] - Image embeddings computed.
[2025-02-09 00:54:27,272][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:54:27,449][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:54:27,470][root][INFO] - Image embeddings computed.
[2025-02-09 00:54:31,662][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:54:31,784][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:54:31,811][root][INFO] - Image embeddings computed.
[2025-02-09 00:54:35,996][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:54:36,102][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:54:36,123][root][INFO] - Image embeddings computed.
[2025-02-09 00:54:40,276][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:54:40,388][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:54:40,409][root][INFO] - Image embeddings computed.
The number of original masks: 40
The number of filtered masks: 20
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:55:53,825][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:55:53,930][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:55:53,951][root][INFO] - Image embeddings computed.
[2025-02-09 00:56:11,006][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:56:11,112][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:56:11,133][root][INFO] - Image embeddings computed.
[2025-02-09 00:56:15,321][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:56:15,427][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:56:15,448][root][INFO] - Image embeddings computed.
[2025-02-09 00:56:19,654][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:56:19,754][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:56:19,774][root][INFO] - Image embeddings computed.
[2025-02-09 00:56:23,929][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:56:24,034][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:56:24,054][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 18
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:57:38,123][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:57:38,248][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:57:38,269][root][INFO] - Image embeddings computed.
[2025-02-09 00:57:55,445][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:57:55,588][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:57:55,609][root][INFO] - Image embeddings computed.
[2025-02-09 00:57:59,796][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:57:59,897][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:57:59,917][root][INFO] - Image embeddings computed.
[2025-02-09 00:58:04,115][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:58:04,208][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:58:04,229][root][INFO] - Image embeddings computed.
[2025-02-09 00:58:08,401][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:58:08,407][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:58:08,428][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 20
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 00:59:17,369][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:59:17,381][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:59:17,402][root][INFO] - Image embeddings computed.
[2025-02-09 00:59:34,297][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:59:34,306][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:59:34,327][root][INFO] - Image embeddings computed.
[2025-02-09 00:59:38,517][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:59:38,526][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:59:38,547][root][INFO] - Image embeddings computed.
[2025-02-09 00:59:42,738][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:59:42,748][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:59:42,768][root][INFO] - Image embeddings computed.
[2025-02-09 00:59:46,972][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 00:59:46,995][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 00:59:47,016][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 21
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.6474568323667207 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 21/50
[2025-02-09 01:01:04,782][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:01:04,880][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:01:04,900][root][INFO] - Image embeddings computed.
[2025-02-09 01:01:21,591][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:01:21,692][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:01:21,713][root][INFO] - Image embeddings computed.
[2025-02-09 01:01:25,927][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:01:26,049][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:01:26,069][root][INFO] - Image embeddings computed.
[2025-02-09 01:01:30,252][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:01:30,350][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:01:30,370][root][INFO] - Image embeddings computed.
[2025-02-09 01:01:34,531][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:01:34,642][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:01:34,663][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 11
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:02:43,771][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:02:43,782][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:02:43,802][root][INFO] - Image embeddings computed.
[2025-02-09 01:03:00,637][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:03:00,646][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:03:00,667][root][INFO] - Image embeddings computed.
[2025-02-09 01:03:04,881][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:03:04,891][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:03:04,912][root][INFO] - Image embeddings computed.
[2025-02-09 01:03:09,095][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:03:09,098][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:03:09,119][root][INFO] - Image embeddings computed.
[2025-02-09 01:03:13,282][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:03:13,286][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:03:13,306][root][INFO] - Image embeddings computed.
The number of original masks: 12
The number of filtered masks: 10
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:04:22,868][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:04:22,880][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:04:22,900][root][INFO] - Image embeddings computed.
[2025-02-09 01:04:39,464][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:04:39,474][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:04:39,494][root][INFO] - Image embeddings computed.
[2025-02-09 01:04:43,702][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:04:43,710][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:04:43,731][root][INFO] - Image embeddings computed.
[2025-02-09 01:04:47,930][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:04:47,937][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:04:47,958][root][INFO] - Image embeddings computed.
[2025-02-09 01:04:52,119][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:04:52,122][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:04:52,143][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 12
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.6166255546349722 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 22/50
[2025-02-09 01:06:13,368][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:06:13,382][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:06:13,403][root][INFO] - Image embeddings computed.
[2025-02-09 01:06:30,424][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:06:30,434][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:06:30,454][root][INFO] - Image embeddings computed.
[2025-02-09 01:06:34,658][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:06:34,667][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:06:34,687][root][INFO] - Image embeddings computed.
[2025-02-09 01:06:38,876][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:06:38,885][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:06:38,905][root][INFO] - Image embeddings computed.
[2025-02-09 01:06:43,054][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:06:43,063][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:06:43,084][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 23
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 01:07:54,272][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:07:54,285][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:07:54,306][root][INFO] - Image embeddings computed.
[2025-02-09 01:08:12,637][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:08:12,647][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:08:12,667][root][INFO] - Image embeddings computed.
[2025-02-09 01:08:16,860][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:08:16,870][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:08:16,890][root][INFO] - Image embeddings computed.
[2025-02-09 01:08:21,085][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:08:21,088][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:08:21,109][root][INFO] - Image embeddings computed.
[2025-02-09 01:08:25,255][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:08:25,259][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:08:25,279][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 22
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.920 | Done: False

[2025-02-09 01:09:35,360][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:09:35,372][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:09:35,393][root][INFO] - Image embeddings computed.
[2025-02-09 01:09:54,327][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:09:54,333][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:09:54,353][root][INFO] - Image embeddings computed.
[2025-02-09 01:09:58,554][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:09:58,564][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:09:58,584][root][INFO] - Image embeddings computed.
[2025-02-09 01:10:02,781][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:10:02,791][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:10:02,811][root][INFO] - Image embeddings computed.
[2025-02-09 01:10:06,969][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:10:06,973][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:10:06,993][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 23
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.920 | Done: False

Mean: 0.6304040788070077 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 23/50
[2025-02-09 01:11:32,348][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:11:32,363][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:11:32,383][root][INFO] - Image embeddings computed.
[2025-02-09 01:11:49,230][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:11:49,241][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:11:49,261][root][INFO] - Image embeddings computed.
[2025-02-09 01:11:53,440][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:11:53,445][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:11:53,465][root][INFO] - Image embeddings computed.
[2025-02-09 01:11:57,680][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:11:57,684][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:11:57,705][root][INFO] - Image embeddings computed.
[2025-02-09 01:12:01,930][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:12:01,935][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:12:01,955][root][INFO] - Image embeddings computed.
The number of original masks: 41
The number of filtered masks: 28
Lang Goal: pack all the scissors objects in the brown box
Total Reward: 0.323 | Done: False

[2025-02-09 01:13:12,980][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:13:12,999][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:13:13,020][root][INFO] - Image embeddings computed.
[2025-02-09 01:13:29,916][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:13:29,924][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:13:29,944][root][INFO] - Image embeddings computed.
[2025-02-09 01:13:34,132][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:13:34,137][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:13:34,157][root][INFO] - Image embeddings computed.
[2025-02-09 01:13:38,368][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:13:38,371][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:13:38,392][root][INFO] - Image embeddings computed.
[2025-02-09 01:13:42,627][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:13:42,631][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:13:42,651][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 25
Lang Goal: pack all the scissors objects in the brown box
Total Reward: 0.323 | Done: False

[2025-02-09 01:14:59,828][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:14:59,938][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:14:59,977][root][INFO] - Image embeddings computed.
[2025-02-09 01:15:16,915][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:15:17,023][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:15:17,044][root][INFO] - Image embeddings computed.
[2025-02-09 01:15:21,217][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:15:21,321][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:15:21,341][root][INFO] - Image embeddings computed.
[2025-02-09 01:15:25,558][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:15:25,674][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:15:25,696][root][INFO] - Image embeddings computed.
[2025-02-09 01:15:29,922][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:15:30,016][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:15:30,038][root][INFO] - Image embeddings computed.
The number of original masks: 41
The number of filtered masks: 30
Lang Goal: pack all the scissors objects in the brown box
Total Reward: 0.323 | Done: False

Mean: 0.6170204512571938 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 24/50
[2025-02-09 01:16:58,721][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:16:58,826][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:16:58,847][root][INFO] - Image embeddings computed.
[2025-02-09 01:17:15,545][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:17:15,655][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:17:15,676][root][INFO] - Image embeddings computed.
[2025-02-09 01:17:19,880][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:17:19,973][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:17:19,993][root][INFO] - Image embeddings computed.
[2025-02-09 01:17:24,165][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:17:24,269][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:17:24,289][root][INFO] - Image embeddings computed.
[2025-02-09 01:17:28,490][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:17:28,583][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:17:28,604][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 18
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.211 | Done: False

[2025-02-09 01:18:41,535][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:18:41,633][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:18:41,654][root][INFO] - Image embeddings computed.
[2025-02-09 01:18:58,427][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:18:58,524][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:18:58,545][root][INFO] - Image embeddings computed.
[2025-02-09 01:19:02,755][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:19:02,871][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:19:02,891][root][INFO] - Image embeddings computed.
[2025-02-09 01:19:07,071][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:19:07,164][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:19:07,184][root][INFO] - Image embeddings computed.
[2025-02-09 01:19:11,413][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:19:11,485][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:19:11,506][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 15
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.206 | Done: False

[2025-02-09 01:20:22,801][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:20:22,817][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:20:22,838][root][INFO] - Image embeddings computed.
[2025-02-09 01:20:39,479][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:20:39,491][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:20:39,512][root][INFO] - Image embeddings computed.
[2025-02-09 01:20:43,719][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:20:43,728][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:20:43,749][root][INFO] - Image embeddings computed.
[2025-02-09 01:20:47,923][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:20:47,933][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:20:47,954][root][INFO] - Image embeddings computed.
[2025-02-09 01:20:52,189][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:20:52,198][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:20:52,218][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 17
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.206 | Done: False

[2025-02-09 01:22:07,173][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:22:07,191][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:22:07,212][root][INFO] - Image embeddings computed.
[2025-02-09 01:22:23,811][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:22:23,817][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:22:23,838][root][INFO] - Image embeddings computed.
[2025-02-09 01:22:28,044][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:22:28,049][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:22:28,070][root][INFO] - Image embeddings computed.
[2025-02-09 01:22:32,247][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:22:32,252][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:22:32,273][root][INFO] - Image embeddings computed.
[2025-02-09 01:22:36,505][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:22:36,510][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:22:36,530][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 17
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.206 | Done: False

Mean: 0.5999004470746938 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 25/50
[2025-02-09 01:24:01,524][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:24:01,647][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:24:01,668][root][INFO] - Image embeddings computed.
[2025-02-09 01:24:18,649][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:24:18,748][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:24:18,769][root][INFO] - Image embeddings computed.
[2025-02-09 01:24:22,976][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:24:23,078][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:24:23,099][root][INFO] - Image embeddings computed.
[2025-02-09 01:24:27,290][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:24:27,388][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:24:27,409][root][INFO] - Image embeddings computed.
[2025-02-09 01:24:31,582][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:24:31,687][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:24:31,708][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 12
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:25:48,249][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:25:48,358][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:25:48,380][root][INFO] - Image embeddings computed.
[2025-02-09 01:26:05,189][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:26:05,285][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:26:05,306][root][INFO] - Image embeddings computed.
[2025-02-09 01:26:09,502][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:26:09,607][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:26:09,627][root][INFO] - Image embeddings computed.
[2025-02-09 01:26:13,827][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:26:13,945][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:26:13,966][root][INFO] - Image embeddings computed.
[2025-02-09 01:26:18,134][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:26:18,228][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:26:18,248][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 15
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 01:27:34,628][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:27:34,729][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:27:34,750][root][INFO] - Image embeddings computed.
[2025-02-09 01:27:51,494][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:27:51,606][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:27:51,627][root][INFO] - Image embeddings computed.
[2025-02-09 01:27:55,825][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:27:55,918][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:27:55,938][root][INFO] - Image embeddings computed.
[2025-02-09 01:28:00,139][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:28:00,238][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:28:00,258][root][INFO] - Image embeddings computed.
[2025-02-09 01:28:04,426][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:28:04,533][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:28:04,560][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 14
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.595904429191706 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 26/50
[2025-02-09 01:29:32,093][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:29:32,104][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:29:32,124][root][INFO] - Image embeddings computed.
[2025-02-09 01:29:48,945][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:29:48,953][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:29:48,973][root][INFO] - Image embeddings computed.
[2025-02-09 01:29:53,163][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:29:53,173][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:29:53,193][root][INFO] - Image embeddings computed.
[2025-02-09 01:29:57,394][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:29:57,402][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:29:57,422][root][INFO] - Image embeddings computed.
[2025-02-09 01:30:01,625][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:30:01,629][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:30:01,650][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 22
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 01:31:15,876][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:31:15,989][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:31:16,011][root][INFO] - Image embeddings computed.
[2025-02-09 01:31:32,666][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:31:32,792][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:31:32,812][root][INFO] - Image embeddings computed.
[2025-02-09 01:31:37,000][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:31:37,105][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:31:37,126][root][INFO] - Image embeddings computed.
[2025-02-09 01:31:41,332][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:31:41,431][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:31:41,452][root][INFO] - Image embeddings computed.
[2025-02-09 01:31:45,650][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:31:45,754][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:31:45,775][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 30
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 01:33:00,098][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:33:00,123][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:33:00,144][root][INFO] - Image embeddings computed.
[2025-02-09 01:33:16,811][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:33:16,822][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:33:16,843][root][INFO] - Image embeddings computed.
[2025-02-09 01:33:21,027][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:33:21,031][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:33:21,052][root][INFO] - Image embeddings computed.
[2025-02-09 01:33:25,278][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:33:25,283][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:33:25,303][root][INFO] - Image embeddings computed.
[2025-02-09 01:33:29,509][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:33:29,602][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:33:29,624][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 24
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.5922157972997174 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 27/50
[2025-02-09 01:34:58,155][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:34:58,276][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:34:58,297][root][INFO] - Image embeddings computed.
[2025-02-09 01:35:15,221][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:35:15,334][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:35:15,356][root][INFO] - Image embeddings computed.
[2025-02-09 01:35:19,567][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:35:19,671][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:35:19,691][root][INFO] - Image embeddings computed.
[2025-02-09 01:35:23,901][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:35:24,000][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:35:24,021][root][INFO] - Image embeddings computed.
[2025-02-09 01:35:28,227][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:35:28,320][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:35:28,347][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 19
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:36:47,632][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:36:47,732][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:36:47,757][root][INFO] - Image embeddings computed.
[2025-02-09 01:37:04,569][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:37:04,678][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:37:04,698][root][INFO] - Image embeddings computed.
[2025-02-09 01:37:08,900][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:37:09,006][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:37:09,027][root][INFO] - Image embeddings computed.
[2025-02-09 01:37:13,254][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:37:13,366][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:37:13,387][root][INFO] - Image embeddings computed.
[2025-02-09 01:37:17,596][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:37:17,705][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:37:17,725][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 20
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:38:37,857][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:38:37,899][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:38:37,920][root][INFO] - Image embeddings computed.
[2025-02-09 01:38:54,736][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:38:54,746][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:38:54,767][root][INFO] - Image embeddings computed.
[2025-02-09 01:38:58,974][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:38:58,979][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:38:58,999][root][INFO] - Image embeddings computed.
[2025-02-09 01:39:03,228][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:39:03,239][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:39:03,259][root][INFO] - Image embeddings computed.
[2025-02-09 01:39:07,463][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:39:07,473][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:39:07,493][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 17
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5702818788812093 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 28/50
[2025-02-09 01:40:34,976][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:40:35,098][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:40:35,119][root][INFO] - Image embeddings computed.
[2025-02-09 01:40:52,104][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:40:52,233][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:40:52,254][root][INFO] - Image embeddings computed.
[2025-02-09 01:40:56,437][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:40:56,540][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:40:56,561][root][INFO] - Image embeddings computed.
[2025-02-09 01:41:00,750][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:41:00,871][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:41:00,892][root][INFO] - Image embeddings computed.
[2025-02-09 01:41:05,092][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:41:05,192][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:41:05,213][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 20
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-09 01:42:26,065][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:42:26,171][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:42:26,209][root][INFO] - Image embeddings computed.
[2025-02-09 01:42:42,996][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:42:43,118][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:42:43,140][root][INFO] - Image embeddings computed.
[2025-02-09 01:42:47,329][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:42:47,421][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:42:47,443][root][INFO] - Image embeddings computed.
[2025-02-09 01:42:51,655][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:42:51,748][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:42:51,769][root][INFO] - Image embeddings computed.
[2025-02-09 01:42:55,966][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:42:56,058][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:42:56,079][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 23
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-09 01:44:18,042][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:44:18,158][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:44:18,193][root][INFO] - Image embeddings computed.
[2025-02-09 01:44:34,962][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:44:35,147][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:44:35,167][root][INFO] - Image embeddings computed.
[2025-02-09 01:44:39,353][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:44:39,470][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:44:39,491][root][INFO] - Image embeddings computed.
[2025-02-09 01:44:43,681][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:44:43,775][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:44:43,796][root][INFO] - Image embeddings computed.
[2025-02-09 01:44:48,001][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:44:48,143][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:44:48,164][root][INFO] - Image embeddings computed.
The number of original masks: 47
The number of filtered masks: 22
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

Mean: 0.561819430825928 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 29/50
[2025-02-09 01:46:18,714][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:46:18,867][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:46:18,887][root][INFO] - Image embeddings computed.
[2025-02-09 01:46:35,968][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:46:36,081][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:46:36,102][root][INFO] - Image embeddings computed.
[2025-02-09 01:46:40,292][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:46:40,397][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:46:40,418][root][INFO] - Image embeddings computed.
[2025-02-09 01:46:44,627][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:46:44,735][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:46:44,756][root][INFO] - Image embeddings computed.
[2025-02-09 01:46:48,911][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:46:49,009][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:46:49,074][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 29
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:48:14,378][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:48:14,510][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:48:14,531][root][INFO] - Image embeddings computed.
[2025-02-09 01:48:31,416][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:48:31,510][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:48:31,532][root][INFO] - Image embeddings computed.
[2025-02-09 01:48:35,726][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:48:35,819][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:48:35,841][root][INFO] - Image embeddings computed.
[2025-02-09 01:48:40,042][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:48:40,146][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:48:40,172][root][INFO] - Image embeddings computed.
[2025-02-09 01:48:44,325][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:48:44,428][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:48:44,449][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 27
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:50:04,795][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:50:04,812][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:50:04,832][root][INFO] - Image embeddings computed.
[2025-02-09 01:50:21,711][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:50:21,820][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:50:21,841][root][INFO] - Image embeddings computed.
[2025-02-09 01:50:26,038][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:50:26,132][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:50:26,153][root][INFO] - Image embeddings computed.
[2025-02-09 01:50:30,357][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:50:30,480][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:50:30,502][root][INFO] - Image embeddings computed.
[2025-02-09 01:50:34,670][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:50:34,769][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:50:34,791][root][INFO] - Image embeddings computed.
The number of original masks: 33
The number of filtered masks: 21
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5424463470043444 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 30/50
[2025-02-09 01:52:05,747][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:52:05,848][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:52:05,869][root][INFO] - Image embeddings computed.
[2025-02-09 01:52:22,931][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:52:23,043][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:52:23,065][root][INFO] - Image embeddings computed.
[2025-02-09 01:52:27,253][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:52:27,369][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:52:27,391][root][INFO] - Image embeddings computed.
[2025-02-09 01:52:31,581][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:52:31,679][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:52:31,706][root][INFO] - Image embeddings computed.
[2025-02-09 01:52:35,887][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:52:35,986][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:52:36,006][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 16
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:53:53,673][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:53:53,694][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:53:53,714][root][INFO] - Image embeddings computed.
[2025-02-09 01:54:10,587][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:54:10,591][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:54:10,611][root][INFO] - Image embeddings computed.
[2025-02-09 01:54:14,809][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:54:14,817][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:54:14,838][root][INFO] - Image embeddings computed.
[2025-02-09 01:54:19,044][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:54:19,048][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:54:19,068][root][INFO] - Image embeddings computed.
[2025-02-09 01:54:23,256][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:54:23,260][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:54:23,280][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 16
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 01:55:41,100][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:55:41,121][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:55:41,142][root][INFO] - Image embeddings computed.
[2025-02-09 01:55:57,664][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:55:57,668][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:55:57,689][root][INFO] - Image embeddings computed.
[2025-02-09 01:56:01,895][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:56:01,899][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:56:01,919][root][INFO] - Image embeddings computed.
[2025-02-09 01:56:06,113][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:56:06,117][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:56:06,138][root][INFO] - Image embeddings computed.
[2025-02-09 01:56:10,311][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:56:10,321][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:56:10,341][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 20
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5243648021041996 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 31/50
[2025-02-09 01:57:40,134][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:57:40,245][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:57:40,266][root][INFO] - Image embeddings computed.
[2025-02-09 01:57:56,998][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:57:57,091][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:57:57,112][root][INFO] - Image embeddings computed.
[2025-02-09 01:58:01,280][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:58:01,379][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:58:01,399][root][INFO] - Image embeddings computed.
[2025-02-09 01:58:05,575][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:58:05,667][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:58:05,688][root][INFO] - Image embeddings computed.
[2025-02-09 01:58:09,869][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:58:09,981][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:58:10,001][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 11
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

[2025-02-09 01:59:28,639][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:59:28,778][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:59:28,799][root][INFO] - Image embeddings computed.
[2025-02-09 01:59:45,559][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:59:45,652][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:59:45,672][root][INFO] - Image embeddings computed.
[2025-02-09 01:59:49,839][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:59:49,937][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:59:49,958][root][INFO] - Image embeddings computed.
[2025-02-09 01:59:54,148][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:59:54,241][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:59:54,263][root][INFO] - Image embeddings computed.
[2025-02-09 01:59:58,454][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 01:59:58,546][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 01:59:58,567][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 11
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

[2025-02-09 02:01:21,099][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:01:21,238][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:01:21,259][root][INFO] - Image embeddings computed.
[2025-02-09 02:01:38,023][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:01:38,129][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:01:38,150][root][INFO] - Image embeddings computed.
[2025-02-09 02:01:42,334][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:01:42,433][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:01:42,454][root][INFO] - Image embeddings computed.
[2025-02-09 02:01:46,648][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:01:46,747][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:01:46,768][root][INFO] - Image embeddings computed.
[2025-02-09 02:01:50,956][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:01:51,077][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:01:51,098][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 11
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

Mean: 0.5289551848320211 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 32/50
[2025-02-09 02:03:21,932][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:03:22,082][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:03:22,103][root][INFO] - Image embeddings computed.
[2025-02-09 02:03:38,972][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:03:39,073][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:03:39,094][root][INFO] - Image embeddings computed.
[2025-02-09 02:03:43,262][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:03:43,354][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:03:43,375][root][INFO] - Image embeddings computed.
[2025-02-09 02:03:47,542][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:03:47,634][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:03:47,655][root][INFO] - Image embeddings computed.
[2025-02-09 02:03:51,843][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:03:51,938][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:03:51,959][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 13
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 02:05:13,903][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:05:14,029][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:05:14,051][root][INFO] - Image embeddings computed.
[2025-02-09 02:05:30,597][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:05:30,719][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:05:30,740][root][INFO] - Image embeddings computed.
[2025-02-09 02:05:34,900][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:05:35,017][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:05:35,037][root][INFO] - Image embeddings computed.
[2025-02-09 02:05:39,229][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:05:39,328][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:05:39,349][root][INFO] - Image embeddings computed.
[2025-02-09 02:05:43,541][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:05:43,649][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:05:43,670][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 14
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 02:07:06,070][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:07:06,185][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:07:06,207][root][INFO] - Image embeddings computed.
[2025-02-09 02:07:22,798][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:07:22,964][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:07:22,985][root][INFO] - Image embeddings computed.
[2025-02-09 02:07:27,170][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:07:27,276][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:07:27,296][root][INFO] - Image embeddings computed.
[2025-02-09 02:07:31,468][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:07:31,590][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:07:31,616][root][INFO] - Image embeddings computed.
[2025-02-09 02:07:35,809][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:07:35,913][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:07:35,934][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 15
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.5280503353060203 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 33/50
[2025-02-09 02:09:11,188][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:09:11,306][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:09:11,327][root][INFO] - Image embeddings computed.
[2025-02-09 02:09:28,048][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:09:28,164][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:09:28,185][root][INFO] - Image embeddings computed.
[2025-02-09 02:09:32,375][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:09:32,550][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:09:32,571][root][INFO] - Image embeddings computed.
[2025-02-09 02:09:36,764][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:09:36,862][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:09:36,882][root][INFO] - Image embeddings computed.
[2025-02-09 02:09:41,039][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:09:41,141][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:09:41,162][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 23
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.286 | Done: False

[2025-02-09 02:11:06,672][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:11:06,778][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:11:06,799][root][INFO] - Image embeddings computed.
[2025-02-09 02:11:23,410][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:11:23,526][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:11:23,547][root][INFO] - Image embeddings computed.
[2025-02-09 02:11:27,728][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:11:27,832][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:11:27,854][root][INFO] - Image embeddings computed.
[2025-02-09 02:11:32,052][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:11:32,147][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:11:32,168][root][INFO] - Image embeddings computed.
[2025-02-09 02:11:36,346][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:11:36,440][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:11:36,467][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 17
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.286 | Done: False

[2025-02-09 02:13:02,402][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:13:02,501][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:13:02,522][root][INFO] - Image embeddings computed.
[2025-02-09 02:13:19,389][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:13:19,485][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:13:19,506][root][INFO] - Image embeddings computed.
[2025-02-09 02:13:23,703][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:13:23,815][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:13:23,838][root][INFO] - Image embeddings computed.
[2025-02-09 02:13:28,037][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:13:28,130][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:13:28,151][root][INFO] - Image embeddings computed.
[2025-02-09 02:13:32,342][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:13:32,441][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:13:32,462][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 10
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.286 | Done: False

Mean: 0.5207068186517253 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 34/50
[2025-02-09 02:15:04,187][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:15:04,301][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:15:04,322][root][INFO] - Image embeddings computed.
[2025-02-09 02:15:21,233][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:15:21,330][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:15:21,350][root][INFO] - Image embeddings computed.
[2025-02-09 02:15:25,552][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:15:25,689][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:15:25,710][root][INFO] - Image embeddings computed.
[2025-02-09 02:15:29,909][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:15:30,050][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:15:30,071][root][INFO] - Image embeddings computed.
[2025-02-09 02:15:34,245][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:15:34,351][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:15:34,371][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 13
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

[2025-02-09 02:16:58,328][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:16:58,436][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:16:58,457][root][INFO] - Image embeddings computed.
[2025-02-09 02:17:15,045][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:17:15,167][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:17:15,188][root][INFO] - Image embeddings computed.
[2025-02-09 02:17:19,382][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:17:19,474][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:17:19,495][root][INFO] - Image embeddings computed.
[2025-02-09 02:17:23,704][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:17:23,885][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:17:23,906][root][INFO] - Image embeddings computed.
[2025-02-09 02:17:28,079][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:17:28,199][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:17:28,220][root][INFO] - Image embeddings computed.
The number of original masks: 33
The number of filtered masks: 13
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

[2025-02-09 02:18:53,461][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:18:53,566][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:18:53,587][root][INFO] - Image embeddings computed.
[2025-02-09 02:19:10,108][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:19:10,202][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:19:10,223][root][INFO] - Image embeddings computed.
[2025-02-09 02:19:14,422][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:19:14,514][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:19:14,535][root][INFO] - Image embeddings computed.
[2025-02-09 02:19:18,737][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:19:18,829][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:19:18,850][root][INFO] - Image embeddings computed.
[2025-02-09 02:19:23,032][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:19:23,140][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:19:23,160][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 12
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

Mean: 0.5130171845519469 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 35/50
[2025-02-09 02:20:55,037][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:20:55,135][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:20:55,156][root][INFO] - Image embeddings computed.
[2025-02-09 02:21:11,972][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:21:12,077][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:21:12,098][root][INFO] - Image embeddings computed.
[2025-02-09 02:21:16,301][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:21:16,405][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:21:16,426][root][INFO] - Image embeddings computed.
[2025-02-09 02:21:20,622][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:21:20,727][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:21:20,749][root][INFO] - Image embeddings computed.
[2025-02-09 02:21:24,922][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:21:25,015][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:21:25,036][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 13
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 02:22:50,573][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:22:50,676][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:22:50,697][root][INFO] - Image embeddings computed.
[2025-02-09 02:23:07,378][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:23:07,476][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:23:07,496][root][INFO] - Image embeddings computed.
[2025-02-09 02:23:11,678][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:23:11,776][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:23:11,797][root][INFO] - Image embeddings computed.
[2025-02-09 02:23:15,997][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:23:16,095][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:23:16,115][root][INFO] - Image embeddings computed.
[2025-02-09 02:23:20,292][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:23:20,385][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:23:20,405][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 14
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5269309792790341 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 36/50
[2025-02-09 02:24:56,339][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:24:56,454][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:24:56,474][root][INFO] - Image embeddings computed.
[2025-02-09 02:25:13,476][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:25:13,579][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:25:13,605][root][INFO] - Image embeddings computed.
[2025-02-09 02:25:17,817][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:25:17,910][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:25:17,930][root][INFO] - Image embeddings computed.
[2025-02-09 02:25:22,120][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:25:22,307][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:25:22,328][root][INFO] - Image embeddings computed.
[2025-02-09 02:25:26,491][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:25:26,584][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:25:26,605][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 23
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.647 | Done: False

[2025-02-09 02:26:49,456][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:26:49,462][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:26:49,483][root][INFO] - Image embeddings computed.
[2025-02-09 02:27:06,241][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:27:06,245][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:27:06,265][root][INFO] - Image embeddings computed.
[2025-02-09 02:27:10,451][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:27:10,454][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:27:10,475][root][INFO] - Image embeddings computed.
[2025-02-09 02:27:14,660][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:27:14,664][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:27:14,684][root][INFO] - Image embeddings computed.
[2025-02-09 02:27:18,858][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:27:18,862][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:27:18,882][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 23
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.800 | Done: False

[2025-02-09 02:28:47,363][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:28:47,490][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:28:47,511][root][INFO] - Image embeddings computed.
[2025-02-09 02:29:04,139][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:29:04,245][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:29:04,267][root][INFO] - Image embeddings computed.
[2025-02-09 02:29:08,470][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:29:08,594][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:29:08,616][root][INFO] - Image embeddings computed.
[2025-02-09 02:29:12,820][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:29:12,941][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:29:12,962][root][INFO] - Image embeddings computed.
[2025-02-09 02:29:17,152][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:29:17,264][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:29:17,285][root][INFO] - Image embeddings computed.
The number of original masks: 39
The number of filtered masks: 27
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.732 | Done: False

Mean: 0.5326156450592949 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 37/50
[2025-02-09 02:30:47,002][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:30:47,008][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:30:47,029][root][INFO] - Image embeddings computed.
[2025-02-09 02:31:03,642][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:31:03,645][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:31:03,666][root][INFO] - Image embeddings computed.
[2025-02-09 02:31:07,865][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:31:07,868][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:31:07,889][root][INFO] - Image embeddings computed.
[2025-02-09 02:31:12,087][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:31:12,091][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:31:12,111][root][INFO] - Image embeddings computed.
[2025-02-09 02:31:16,322][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:31:16,325][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:31:16,346][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 02:32:41,327][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:32:41,429][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:32:41,450][root][INFO] - Image embeddings computed.
[2025-02-09 02:32:58,014][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:32:58,108][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:32:58,129][root][INFO] - Image embeddings computed.
[2025-02-09 02:33:02,312][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:33:02,405][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:33:02,426][root][INFO] - Image embeddings computed.
[2025-02-09 02:33:06,613][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:33:06,707][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:33:06,728][root][INFO] - Image embeddings computed.
[2025-02-09 02:33:10,940][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:33:11,033][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:33:11,054][root][INFO] - Image embeddings computed.
The number of original masks: 16
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.545247654652287 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 38/50
[2025-02-09 02:34:52,054][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:34:52,173][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:34:52,194][root][INFO] - Image embeddings computed.
[2025-02-09 02:35:08,984][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:35:09,077][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:35:09,098][root][INFO] - Image embeddings computed.
[2025-02-09 02:35:13,297][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:35:13,390][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:35:13,410][root][INFO] - Image embeddings computed.
[2025-02-09 02:35:17,623][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:35:17,723][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:35:17,744][root][INFO] - Image embeddings computed.
[2025-02-09 02:35:21,919][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:35:22,018][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:35:22,038][root][INFO] - Image embeddings computed.
The number of original masks: 49
The number of filtered masks: 31
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 02:36:53,568][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:36:53,634][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:36:53,655][root][INFO] - Image embeddings computed.
[2025-02-09 02:37:10,203][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:37:10,207][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:37:10,228][root][INFO] - Image embeddings computed.
[2025-02-09 02:37:14,434][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:37:14,437][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:37:14,458][root][INFO] - Image embeddings computed.
[2025-02-09 02:37:18,661][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:37:18,665][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:37:18,686][root][INFO] - Image embeddings computed.
[2025-02-09 02:37:22,859][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:37:22,863][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:37:22,884][root][INFO] - Image embeddings computed.
The number of original masks: 49
The number of filtered masks: 27
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 02:38:47,798][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:38:47,808][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:38:47,829][root][INFO] - Image embeddings computed.
[2025-02-09 02:39:04,735][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:39:04,739][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:39:04,760][root][INFO] - Image embeddings computed.
[2025-02-09 02:39:08,963][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:39:08,966][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:39:08,987][root][INFO] - Image embeddings computed.
[2025-02-09 02:39:13,194][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:39:13,197][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:39:13,218][root][INFO] - Image embeddings computed.
[2025-02-09 02:39:17,394][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:39:17,398][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:39:17,418][root][INFO] - Image embeddings computed.
The number of original masks: 49
The number of filtered masks: 25
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5308990321614373 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 39/50
[2025-02-09 02:40:56,849][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:40:56,981][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:40:57,003][root][INFO] - Image embeddings computed.
[2025-02-09 02:41:13,952][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:41:14,057][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:41:14,078][root][INFO] - Image embeddings computed.
[2025-02-09 02:41:18,285][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:41:18,377][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:41:18,398][root][INFO] - Image embeddings computed.
[2025-02-09 02:41:22,591][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:41:22,684][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:41:22,705][root][INFO] - Image embeddings computed.
[2025-02-09 02:41:26,868][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:41:26,966][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:41:26,986][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 20
Lang Goal: pack all the butterfinger chocolate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 02:42:54,547][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:42:54,563][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:42:54,583][root][INFO] - Image embeddings computed.
[2025-02-09 02:43:11,355][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:43:11,358][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:43:11,391][root][INFO] - Image embeddings computed.
[2025-02-09 02:43:15,594][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:43:15,597][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:43:15,618][root][INFO] - Image embeddings computed.
[2025-02-09 02:43:19,812][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:43:19,815][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:43:19,835][root][INFO] - Image embeddings computed.
[2025-02-09 02:43:23,990][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:43:23,994][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:43:24,014][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 19
Lang Goal: pack all the butterfinger chocolate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 02:44:53,148][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:44:53,255][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:44:53,275][root][INFO] - Image embeddings computed.
[2025-02-09 02:45:10,100][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:45:10,210][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:45:10,231][root][INFO] - Image embeddings computed.
[2025-02-09 02:45:14,437][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:45:14,530][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:45:14,550][root][INFO] - Image embeddings computed.
[2025-02-09 02:45:18,772][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:45:18,865][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:45:18,885][root][INFO] - Image embeddings computed.
[2025-02-09 02:45:23,055][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:45:23,147][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:45:23,167][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 19
Lang Goal: pack all the butterfinger chocolate objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5172862364649902 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 40/50
[2025-02-09 02:46:56,050][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:46:56,068][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:46:56,089][root][INFO] - Image embeddings computed.
[2025-02-09 02:47:13,042][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:47:13,046][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:47:13,066][root][INFO] - Image embeddings computed.
[2025-02-09 02:47:17,277][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:47:17,280][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:47:17,300][root][INFO] - Image embeddings computed.
[2025-02-09 02:47:21,497][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:47:21,501][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:47:21,521][root][INFO] - Image embeddings computed.
[2025-02-09 02:47:25,680][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:47:25,689][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:47:25,709][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 13
Lang Goal: pack all the red and white flashlight objects in the brown box
Total Reward: 0.438 | Done: False

[2025-02-09 02:48:49,533][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:48:49,539][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:48:49,560][root][INFO] - Image embeddings computed.
[2025-02-09 02:49:06,297][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:49:06,300][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:49:06,320][root][INFO] - Image embeddings computed.
[2025-02-09 02:49:10,520][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:49:10,523][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:49:10,544][root][INFO] - Image embeddings computed.
[2025-02-09 02:49:14,763][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:49:14,766][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:49:14,786][root][INFO] - Image embeddings computed.
[2025-02-09 02:49:18,943][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:49:18,946][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:49:18,985][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 20
Lang Goal: pack all the red and white flashlight objects in the brown box
Total Reward: 0.438 | Done: False

[2025-02-09 02:50:47,822][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:50:47,945][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:50:47,965][root][INFO] - Image embeddings computed.
[2025-02-09 02:51:04,424][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:51:04,539][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:51:04,559][root][INFO] - Image embeddings computed.
[2025-02-09 02:51:08,772][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:51:08,865][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:51:08,885][root][INFO] - Image embeddings computed.
[2025-02-09 02:51:13,095][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:51:13,198][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:51:13,219][root][INFO] - Image embeddings computed.
[2025-02-09 02:51:17,382][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:51:17,475][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:51:17,495][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 17
Lang Goal: pack all the red and white flashlight objects in the brown box
Total Reward: 0.438 | Done: False

Mean: 0.5152915805533654 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 41/50
[2025-02-09 02:52:54,988][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:52:55,095][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:52:55,116][root][INFO] - Image embeddings computed.
[2025-02-09 02:53:11,893][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:53:11,988][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:53:12,008][root][INFO] - Image embeddings computed.
[2025-02-09 02:53:16,203][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:53:16,297][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:53:16,318][root][INFO] - Image embeddings computed.
[2025-02-09 02:53:20,524][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:53:20,642][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:53:20,663][root][INFO] - Image embeddings computed.
[2025-02-09 02:53:24,858][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:53:24,987][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:53:25,008][root][INFO] - Image embeddings computed.
The number of original masks: 7
The number of filtered masks: 5
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 02:54:49,449][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:54:49,458][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:54:49,479][root][INFO] - Image embeddings computed.
[2025-02-09 02:55:06,037][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:55:06,040][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:55:06,061][root][INFO] - Image embeddings computed.
[2025-02-09 02:55:10,262][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:55:10,266][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:55:10,286][root][INFO] - Image embeddings computed.
[2025-02-09 02:55:14,479][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:55:14,483][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:55:14,504][root][INFO] - Image embeddings computed.
[2025-02-09 02:55:18,695][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:55:18,699][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:55:18,719][root][INFO] - Image embeddings computed.
The number of original masks: 11
The number of filtered masks: 6
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5271137371252346 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 42/50
[2025-02-09 02:56:56,107][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:56:56,129][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:56:56,150][root][INFO] - Image embeddings computed.
[2025-02-09 02:57:12,952][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:57:12,955][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:57:12,976][root][INFO] - Image embeddings computed.
[2025-02-09 02:57:17,171][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:57:17,174][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:57:17,195][root][INFO] - Image embeddings computed.
[2025-02-09 02:57:21,402][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:57:21,412][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:57:21,433][root][INFO] - Image embeddings computed.
[2025-02-09 02:57:25,594][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:57:25,598][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:57:25,619][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 14
Lang Goal: pack all the honey dipper objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 02:58:51,692][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:58:51,704][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:58:51,725][root][INFO] - Image embeddings computed.
[2025-02-09 02:59:08,291][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:59:08,295][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:59:08,315][root][INFO] - Image embeddings computed.
[2025-02-09 02:59:12,507][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:59:12,510][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:59:12,531][root][INFO] - Image embeddings computed.
[2025-02-09 02:59:16,728][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:59:16,731][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:59:16,752][root][INFO] - Image embeddings computed.
[2025-02-09 02:59:20,928][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 02:59:20,939][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 02:59:20,959][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 17
Lang Goal: pack all the honey dipper objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 03:00:51,708][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:00:51,811][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:00:51,832][root][INFO] - Image embeddings computed.
[2025-02-09 03:01:08,436][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:01:08,546][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:01:08,567][root][INFO] - Image embeddings computed.
[2025-02-09 03:01:12,769][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:01:12,887][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:01:12,908][root][INFO] - Image embeddings computed.
[2025-02-09 03:01:17,114][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:01:17,208][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:01:17,229][root][INFO] - Image embeddings computed.
[2025-02-09 03:01:21,401][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:01:21,494][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:01:21,515][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 14
Lang Goal: pack all the honey dipper objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5145634100508242 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 43/50
[2025-02-09 03:03:04,447][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:03:04,464][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:03:04,490][root][INFO] - Image embeddings computed.
[2025-02-09 03:03:21,245][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:03:21,249][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:03:21,270][root][INFO] - Image embeddings computed.
[2025-02-09 03:03:25,466][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:03:25,477][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:03:25,497][root][INFO] - Image embeddings computed.
[2025-02-09 03:03:29,708][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:03:29,712][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:03:29,733][root][INFO] - Image embeddings computed.
[2025-02-09 03:03:33,890][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:03:33,894][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:03:33,915][root][INFO] - Image embeddings computed.
The number of original masks: 74
The number of filtered masks: 35
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 03:05:10,292][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:05:10,394][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:05:10,415][root][INFO] - Image embeddings computed.
[2025-02-09 03:05:27,184][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:05:27,299][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:05:27,327][root][INFO] - Image embeddings computed.
[2025-02-09 03:05:31,514][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:05:31,613][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:05:31,634][root][INFO] - Image embeddings computed.
[2025-02-09 03:05:35,843][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:05:35,943][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:05:35,965][root][INFO] - Image embeddings computed.
[2025-02-09 03:05:40,133][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:05:40,232][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:05:40,260][root][INFO] - Image embeddings computed.
The number of original masks: 64
The number of filtered masks: 29
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 03:07:08,730][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:07:08,840][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:07:08,862][root][INFO] - Image embeddings computed.
[2025-02-09 03:07:25,356][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:07:25,486][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:07:25,506][root][INFO] - Image embeddings computed.
[2025-02-09 03:07:29,699][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:07:29,815][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:07:29,836][root][INFO] - Image embeddings computed.
[2025-02-09 03:07:34,038][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:07:34,143][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:07:34,163][root][INFO] - Image embeddings computed.
[2025-02-09 03:07:38,297][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:07:38,401][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:07:38,421][root][INFO] - Image embeddings computed.
The number of original masks: 62
The number of filtered masks: 31
Lang Goal: pack all the c clamp objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5025968191194097 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 44/50
[2025-02-09 03:09:17,267][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:09:17,290][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:09:17,311][root][INFO] - Image embeddings computed.
[2025-02-09 03:09:34,218][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:09:34,227][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:09:34,247][root][INFO] - Image embeddings computed.
[2025-02-09 03:09:38,472][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:09:38,476][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:09:38,508][root][INFO] - Image embeddings computed.
[2025-02-09 03:09:42,692][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:09:42,696][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:09:42,716][root][INFO] - Image embeddings computed.
[2025-02-09 03:09:46,892][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:09:46,895][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:09:46,915][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 16
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 03:11:16,237][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:11:16,262][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:11:16,282][root][INFO] - Image embeddings computed.
[2025-02-09 03:11:33,295][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:11:33,303][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:11:33,323][root][INFO] - Image embeddings computed.
[2025-02-09 03:11:37,527][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:11:37,531][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:11:37,551][root][INFO] - Image embeddings computed.
[2025-02-09 03:11:41,738][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:11:41,742][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:11:41,762][root][INFO] - Image embeddings computed.
[2025-02-09 03:11:45,947][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:11:45,950][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:11:45,971][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 20
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.578 | Done: False

[2025-02-09 03:13:18,846][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:13:18,960][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:13:18,981][root][INFO] - Image embeddings computed.
[2025-02-09 03:13:35,560][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:13:35,679][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:13:35,700][root][INFO] - Image embeddings computed.
[2025-02-09 03:13:39,864][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:13:40,047][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:13:40,068][root][INFO] - Image embeddings computed.
[2025-02-09 03:13:44,288][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:13:44,401][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:13:44,423][root][INFO] - Image embeddings computed.
[2025-02-09 03:13:48,611][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:13:48,718][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:13:48,739][root][INFO] - Image embeddings computed.
The number of original masks: 33
The number of filtered masks: 16
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.867 | Done: False

Mean: 0.5108893886739247 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 45/50
[2025-02-09 03:15:35,903][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:15:36,030][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:15:36,051][root][INFO] - Image embeddings computed.
[2025-02-09 03:15:53,294][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:15:53,394][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:15:53,416][root][INFO] - Image embeddings computed.
[2025-02-09 03:15:57,587][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:15:57,686][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:15:57,707][root][INFO] - Image embeddings computed.
[2025-02-09 03:16:01,896][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:16:02,005][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:16:02,041][root][INFO] - Image embeddings computed.
[2025-02-09 03:16:06,257][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:16:06,354][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:16:06,375][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 22
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-09 03:17:40,519][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:17:40,633][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:17:40,655][root][INFO] - Image embeddings computed.
[2025-02-09 03:17:57,735][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:17:57,841][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:17:57,867][root][INFO] - Image embeddings computed.
[2025-02-09 03:18:02,045][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:18:02,158][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:18:02,185][root][INFO] - Image embeddings computed.
[2025-02-09 03:18:06,371][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:18:06,471][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:18:06,492][root][INFO] - Image embeddings computed.
[2025-02-09 03:18:10,709][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:18:10,805][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:18:10,836][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 20
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.692 | Done: False

[2025-02-09 03:19:45,789][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:19:45,893][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:19:45,914][root][INFO] - Image embeddings computed.
[2025-02-09 03:20:02,969][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:20:03,134][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:20:03,154][root][INFO] - Image embeddings computed.
[2025-02-09 03:20:07,317][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:20:07,432][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:20:07,453][root][INFO] - Image embeddings computed.
[2025-02-09 03:20:11,666][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:20:11,775][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:20:11,796][root][INFO] - Image embeddings computed.
[2025-02-09 03:20:16,021][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:20:16,133][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:20:16,154][root][INFO] - Image embeddings computed.
The number of original masks: 28
The number of filtered masks: 17
Lang Goal: pack all the black razer mouse objects in the brown box
Warning: movej exceeded 5 second timeout. Skipping.
Total Reward: 0.692 | Done: True

Mean: 0.5149209065324529 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 46/50
[2025-02-09 03:22:01,463][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:22:01,561][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:22:01,581][root][INFO] - Image embeddings computed.
[2025-02-09 03:22:18,387][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:22:18,487][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:22:18,507][root][INFO] - Image embeddings computed.
[2025-02-09 03:22:22,706][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:22:22,798][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:22:22,818][root][INFO] - Image embeddings computed.
[2025-02-09 03:22:27,006][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:22:27,099][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:22:27,119][root][INFO] - Image embeddings computed.
[2025-02-09 03:22:31,273][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:22:31,365][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:22:31,394][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 10
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 03:24:02,898][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:24:03,000][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:24:03,021][root][INFO] - Image embeddings computed.
[2025-02-09 03:24:19,778][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:24:19,878][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:24:19,899][root][INFO] - Image embeddings computed.
[2025-02-09 03:24:24,097][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:24:24,198][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:24:24,219][root][INFO] - Image embeddings computed.
[2025-02-09 03:24:28,417][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:24:28,540][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:24:28,560][root][INFO] - Image embeddings computed.
[2025-02-09 03:24:32,695][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:24:32,816][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:24:32,837][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 11
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.610 | Done: False

[2025-02-09 03:26:09,261][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:26:09,371][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:26:09,401][root][INFO] - Image embeddings computed.
[2025-02-09 03:26:26,086][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:26:26,200][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:26:26,221][root][INFO] - Image embeddings computed.
[2025-02-09 03:26:30,430][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:26:30,574][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:26:30,602][root][INFO] - Image embeddings computed.
[2025-02-09 03:26:34,786][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:26:34,971][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:26:34,992][root][INFO] - Image embeddings computed.
[2025-02-09 03:26:39,149][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:26:39,251][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:26:39,272][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 14
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.610 | Done: False

Mean: 0.5169825411200295 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 47/50
[2025-02-09 03:28:21,789][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:28:21,888][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:28:21,909][root][INFO] - Image embeddings computed.
[2025-02-09 03:28:38,942][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:28:39,038][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:28:39,059][root][INFO] - Image embeddings computed.
[2025-02-09 03:28:43,266][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:28:43,366][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:28:43,387][root][INFO] - Image embeddings computed.
[2025-02-09 03:28:47,588][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:28:47,689][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:28:47,710][root][INFO] - Image embeddings computed.
[2025-02-09 03:28:51,898][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:28:51,995][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:28:52,017][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 10
Lang Goal: pack all the tablet objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 03:30:26,713][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:30:26,822][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:30:26,843][root][INFO] - Image embeddings computed.
[2025-02-09 03:30:43,478][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:30:43,581][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:30:43,602][root][INFO] - Image embeddings computed.
[2025-02-09 03:30:47,806][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:30:47,899][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:30:47,920][root][INFO] - Image embeddings computed.
[2025-02-09 03:30:52,123][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:30:52,223][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:30:52,243][root][INFO] - Image embeddings computed.
[2025-02-09 03:30:56,447][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:30:56,544][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:30:56,565][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 9
Lang Goal: pack all the tablet objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 03:32:30,515][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:32:30,623][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:32:30,644][root][INFO] - Image embeddings computed.
[2025-02-09 03:32:47,339][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:32:47,435][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:32:47,456][root][INFO] - Image embeddings computed.
[2025-02-09 03:32:51,661][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:32:51,765][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:32:51,786][root][INFO] - Image embeddings computed.
[2025-02-09 03:32:55,988][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:32:56,088][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:32:56,109][root][INFO] - Image embeddings computed.
[2025-02-09 03:33:00,307][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:33:00,435][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:33:00,456][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 12
Lang Goal: pack all the tablet objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5059829125855608 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 48/50
[2025-02-09 03:34:43,329][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:34:43,437][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:34:43,457][root][INFO] - Image embeddings computed.
[2025-02-09 03:35:00,356][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:35:00,464][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:35:00,485][root][INFO] - Image embeddings computed.
[2025-02-09 03:35:04,672][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:35:04,766][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:35:04,787][root][INFO] - Image embeddings computed.
[2025-02-09 03:35:08,995][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:35:09,111][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:35:09,132][root][INFO] - Image embeddings computed.
[2025-02-09 03:35:13,339][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:35:13,452][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:35:13,479][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 8
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 03:36:49,657][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:36:49,759][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:36:49,781][root][INFO] - Image embeddings computed.
[2025-02-09 03:37:06,370][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:37:06,491][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:37:06,512][root][INFO] - Image embeddings computed.
[2025-02-09 03:37:10,683][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:37:10,824][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:37:10,846][root][INFO] - Image embeddings computed.
[2025-02-09 03:37:15,043][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:37:15,155][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:37:15,175][root][INFO] - Image embeddings computed.
[2025-02-09 03:37:19,388][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:37:19,481][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:37:19,502][root][INFO] - Image embeddings computed.
The number of original masks: 16
The number of filtered masks: 11
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 03:38:50,953][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:38:50,965][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:38:50,985][root][INFO] - Image embeddings computed.
[2025-02-09 03:39:07,447][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:39:07,450][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:39:07,471][root][INFO] - Image embeddings computed.
[2025-02-09 03:39:11,639][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:39:11,642][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:39:11,663][root][INFO] - Image embeddings computed.
[2025-02-09 03:39:15,856][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:39:15,859][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:39:15,880][root][INFO] - Image embeddings computed.
[2025-02-09 03:39:20,095][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:39:20,098][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:39:20,119][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 14
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.5058582685733616 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 49/50
[2025-02-09 03:41:05,354][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:41:05,363][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:41:05,384][root][INFO] - Image embeddings computed.
[2025-02-09 03:41:22,439][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:41:22,444][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:41:22,464][root][INFO] - Image embeddings computed.
[2025-02-09 03:41:26,615][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:41:26,620][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:41:26,640][root][INFO] - Image embeddings computed.
[2025-02-09 03:41:30,847][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:41:30,851][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:41:30,871][root][INFO] - Image embeddings computed.
[2025-02-09 03:41:35,076][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:41:35,081][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:41:35,101][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 22
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.128 | Done: False

[2025-02-09 03:43:06,828][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:43:06,841][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:43:06,862][root][INFO] - Image embeddings computed.
[2025-02-09 03:43:23,615][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:43:23,619][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:43:23,639][root][INFO] - Image embeddings computed.
[2025-02-09 03:43:27,787][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:43:27,791][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:43:27,812][root][INFO] - Image embeddings computed.
[2025-02-09 03:43:32,010][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:43:32,014][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:43:32,035][root][INFO] - Image embeddings computed.
[2025-02-09 03:43:36,237][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:43:36,241][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:43:36,262][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 16
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.128 | Done: False

[2025-02-09 03:45:09,756][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:45:09,854][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:45:09,875][root][INFO] - Image embeddings computed.
[2025-02-09 03:45:26,652][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:45:26,767][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:45:26,788][root][INFO] - Image embeddings computed.
[2025-02-09 03:45:30,935][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:45:31,028][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:45:31,049][root][INFO] - Image embeddings computed.
[2025-02-09 03:45:35,241][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:45:35,333][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:45:35,353][root][INFO] - Image embeddings computed.
[2025-02-09 03:45:39,558][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:45:39,650][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:45:39,670][root][INFO] - Image embeddings computed.
The number of original masks: 40
The number of filtered masks: 21
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.665 | Done: False

[2025-02-09 03:47:17,673][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:47:17,796][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:47:17,818][root][INFO] - Image embeddings computed.
[2025-02-09 03:47:34,403][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:47:34,497][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:47:34,519][root][INFO] - Image embeddings computed.
[2025-02-09 03:47:38,702][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:47:38,828][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:47:38,848][root][INFO] - Image embeddings computed.
[2025-02-09 03:47:43,056][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:47:43,163][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:47:43,184][root][INFO] - Image embeddings computed.
[2025-02-09 03:47:47,392][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:47:47,502][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:47:47,524][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 19
Lang Goal: pack all the black and blue sneakers objects in the brown box
Total Reward: 0.665 | Done: False

Mean: 0.5091158636442371 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
Test: 50/50
[2025-02-09 03:49:34,415][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:49:34,518][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:49:34,538][root][INFO] - Image embeddings computed.
[2025-02-09 03:49:51,588][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:49:51,687][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:49:51,708][root][INFO] - Image embeddings computed.
[2025-02-09 03:49:55,896][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:49:55,996][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:49:56,017][root][INFO] - Image embeddings computed.
[2025-02-09 03:50:00,191][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:50:00,291][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:50:00,311][root][INFO] - Image embeddings computed.
[2025-02-09 03:50:04,497][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:50:04,591][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:50:04,617][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 10
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.556 | Done: False

[2025-02-09 03:51:41,932][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:51:42,034][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:51:42,055][root][INFO] - Image embeddings computed.
[2025-02-09 03:51:58,891][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:51:59,020][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:51:59,041][root][INFO] - Image embeddings computed.
[2025-02-09 03:52:03,227][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:52:03,327][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:52:03,354][root][INFO] - Image embeddings computed.
[2025-02-09 03:52:07,530][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:52:07,657][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:52:07,678][root][INFO] - Image embeddings computed.
[2025-02-09 03:52:11,860][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:52:11,960][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:52:11,981][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 16
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.963 | Done: False

[2025-02-09 03:53:51,416][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:53:51,512][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:53:51,533][root][INFO] - Image embeddings computed.
[2025-02-09 03:54:08,181][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:54:08,366][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:54:08,387][root][INFO] - Image embeddings computed.
[2025-02-09 03:54:12,575][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:54:12,674][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:54:12,695][root][INFO] - Image embeddings computed.
[2025-02-09 03:54:16,881][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:54:16,992][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:54:17,012][root][INFO] - Image embeddings computed.
[2025-02-09 03:54:21,194][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:54:21,288][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:54:21,309][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 17
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.963 | Done: False

Mean: 0.5181928056306117 | Task: packing-seen-google-objects-group | Ckpt: steps=00080-val_loss=0.00020305.ckpt
[2025-02-09 03:56:05,606][root][INFO] - Loaded checkpoint sucessfully
[2025-02-09 03:56:05,761][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-09 03:56:12,744][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Attn FCN: conceptfusion_sam2
[2025-02-09 03:56:19,037][root][INFO] - Loaded checkpoint sucessfully
[2025-02-09 03:56:19,184][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-09 03:56:25,724][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
[2025-02-09 03:56:35,309][root][INFO] - Loaded checkpoint sucessfully
[2025-02-09 03:56:35,474][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-09 03:56:42,171][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Transport FCN: <class 'cliport.models.conceptfusion_sam2.conceptfusion_sam2'>, <class 'cliport.models.conceptfusion_sam2.conceptfusion_sam2_kernel'>
[2025-02-09 03:56:51,562][root][INFO] - Loaded checkpoint sucessfully
[2025-02-09 03:56:51,731][root][INFO] - Loaded ViT-H-14 model config.
[2025-02-09 03:56:58,291][root][INFO] - Loading pretrained ViT-H-14 weights (laion2b_s32b_b79k).
Agent: packing-seen-google-objects-group-clipfit-n50, Logging: False
Loaded: /home/a/acw799/cliport/exps_clipfit/packing-seen-google-objects-group-clipfit-n10-train/checkpoints/steps=00120-val_loss=0.00019314.ckpt
Test: 1/50
[2025-02-09 03:58:09,664][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:58:09,777][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:58:09,799][root][INFO] - Image embeddings computed.
[2025-02-09 03:58:26,394][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:58:26,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:58:26,528][root][INFO] - Image embeddings computed.
[2025-02-09 03:58:30,686][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:58:30,778][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:58:30,798][root][INFO] - Image embeddings computed.
[2025-02-09 03:58:34,998][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:58:35,090][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:58:35,111][root][INFO] - Image embeddings computed.
[2025-02-09 03:58:39,275][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 03:58:39,369][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 03:58:39,389][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 19
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-09 04:00:17,924][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:00:18,022][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:00:18,043][root][INFO] - Image embeddings computed.
[2025-02-09 04:00:34,526][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:00:34,619][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:00:34,639][root][INFO] - Image embeddings computed.
[2025-02-09 04:00:38,788][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:00:38,911][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:00:38,931][root][INFO] - Image embeddings computed.
[2025-02-09 04:00:43,124][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:00:43,217][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:00:43,237][root][INFO] - Image embeddings computed.
[2025-02-09 04:00:47,415][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:00:47,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:00:47,528][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 13
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.385 | Done: False

[2025-02-09 04:02:25,004][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:02:25,110][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:02:25,130][root][INFO] - Image embeddings computed.
[2025-02-09 04:02:41,420][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:02:41,534][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:02:41,555][root][INFO] - Image embeddings computed.
[2025-02-09 04:02:45,707][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:02:45,811][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:02:45,831][root][INFO] - Image embeddings computed.
[2025-02-09 04:02:50,038][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:02:50,130][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:02:50,150][root][INFO] - Image embeddings computed.
[2025-02-09 04:02:54,322][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:02:54,415][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:02:54,435][root][INFO] - Image embeddings computed.
The number of original masks: 33
The number of filtered masks: 20
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 1.0 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 2/50
[2025-02-09 04:04:46,550][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:04:46,714][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:04:46,735][root][INFO] - Image embeddings computed.
[2025-02-09 04:05:03,544][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:05:03,654][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:05:03,674][root][INFO] - Image embeddings computed.
[2025-02-09 04:05:07,804][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:05:07,927][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:05:07,948][root][INFO] - Image embeddings computed.
[2025-02-09 04:05:12,140][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:05:12,239][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:05:12,260][root][INFO] - Image embeddings computed.
[2025-02-09 04:05:16,461][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:05:16,570][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:05:16,590][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 16
Lang Goal: pack all the screwdriver objects in the brown box
Total Reward: 0.769 | Done: False

[2025-02-09 04:06:56,723][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:06:56,825][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:06:56,847][root][INFO] - Image embeddings computed.
[2025-02-09 04:07:13,894][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:07:14,003][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:07:14,024][root][INFO] - Image embeddings computed.
[2025-02-09 04:07:18,181][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:07:18,322][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:07:18,343][root][INFO] - Image embeddings computed.
[2025-02-09 04:07:22,545][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:07:22,647][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:07:22,668][root][INFO] - Image embeddings computed.
[2025-02-09 04:07:26,869][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:07:26,975][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:07:26,997][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 20
Lang Goal: pack all the screwdriver objects in the brown box
Warning: movej exceeded 5 second timeout. Skipping.
Total Reward: 0.769 | Done: True

Mean: 0.8846153846153846 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 3/50
[2025-02-09 04:09:20,465][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:09:20,580][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:09:20,603][root][INFO] - Image embeddings computed.
[2025-02-09 04:09:37,463][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:09:37,563][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:09:37,585][root][INFO] - Image embeddings computed.
[2025-02-09 04:09:41,778][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:09:41,884][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:09:41,906][root][INFO] - Image embeddings computed.
[2025-02-09 04:09:46,062][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:09:46,161][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:09:46,183][root][INFO] - Image embeddings computed.
[2025-02-09 04:09:50,379][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:09:50,482][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:09:50,503][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 11
Lang Goal: pack all the rocket racoon figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 04:11:29,869][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:11:29,993][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:11:30,014][root][INFO] - Image embeddings computed.
[2025-02-09 04:11:46,805][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:11:46,900][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:11:46,921][root][INFO] - Image embeddings computed.
[2025-02-09 04:11:51,108][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:11:51,207][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:11:51,228][root][INFO] - Image embeddings computed.
[2025-02-09 04:11:55,380][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:11:55,498][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:11:55,519][root][INFO] - Image embeddings computed.
[2025-02-09 04:11:59,710][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:11:59,808][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:11:59,829][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 8
Lang Goal: pack all the rocket racoon figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.923076923076923 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 4/50
[2025-02-09 04:13:44,866][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:13:44,941][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:13:44,963][root][INFO] - Image embeddings computed.
[2025-02-09 04:14:01,580][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:14:01,584][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:14:01,606][root][INFO] - Image embeddings computed.
[2025-02-09 04:14:05,762][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:14:05,773][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:14:05,795][root][INFO] - Image embeddings computed.
[2025-02-09 04:14:09,967][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:14:09,971][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:14:09,993][root][INFO] - Image embeddings computed.
[2025-02-09 04:14:14,140][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:14:14,145][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:14:14,166][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 15
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 0.250 | Done: False

[2025-02-09 04:15:54,282][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:15:54,400][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:15:54,422][root][INFO] - Image embeddings computed.
[2025-02-09 04:16:11,010][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:16:11,103][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:16:11,124][root][INFO] - Image embeddings computed.
[2025-02-09 04:16:15,281][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:16:15,375][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:16:15,397][root][INFO] - Image embeddings computed.
[2025-02-09 04:16:19,566][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:16:19,664][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:16:19,685][root][INFO] - Image embeddings computed.
[2025-02-09 04:16:23,831][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:16:23,925][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:16:23,946][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 18
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 04:18:03,356][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:18:03,457][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:18:03,478][root][INFO] - Image embeddings computed.
[2025-02-09 04:18:20,074][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:18:20,166][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:18:20,187][root][INFO] - Image embeddings computed.
[2025-02-09 04:18:24,347][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:18:24,447][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:18:24,473][root][INFO] - Image embeddings computed.
[2025-02-09 04:18:28,649][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:18:28,743][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:18:28,764][root][INFO] - Image embeddings computed.
[2025-02-09 04:18:32,912][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:18:33,005][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:18:33,025][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 18
Lang Goal: pack all the android toy objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.9423076923076923 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 5/50
[2025-02-09 04:20:24,219][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:20:24,400][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:20:24,421][root][INFO] - Image embeddings computed.
[2025-02-09 04:20:41,151][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:20:41,263][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:20:41,284][root][INFO] - Image embeddings computed.
[2025-02-09 04:20:45,473][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:20:45,576][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:20:45,597][root][INFO] - Image embeddings computed.
[2025-02-09 04:20:49,789][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:20:49,883][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:20:49,905][root][INFO] - Image embeddings computed.
[2025-02-09 04:20:54,084][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:20:54,194][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:20:54,216][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 9
Lang Goal: pack all the crayon box objects in the brown box
Warning: movej exceeded 5 second timeout. Skipping.
Total Reward: 0.000 | Done: True

Mean: 0.7538461538461538 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 6/50
[2025-02-09 04:22:48,114][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:22:48,244][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:22:48,266][root][INFO] - Image embeddings computed.
[2025-02-09 04:23:05,168][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:23:05,308][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:23:05,330][root][INFO] - Image embeddings computed.
[2025-02-09 04:23:09,498][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:23:09,604][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:23:09,673][root][INFO] - Image embeddings computed.
[2025-02-09 04:23:13,862][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:23:13,984][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:23:14,012][root][INFO] - Image embeddings computed.
[2025-02-09 04:23:18,166][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:23:18,357][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:23:18,379][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 14
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.455 | Done: False

[2025-02-09 04:25:00,064][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:25:00,169][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:25:00,190][root][INFO] - Image embeddings computed.
[2025-02-09 04:25:16,863][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:25:16,962][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:25:16,983][root][INFO] - Image embeddings computed.
[2025-02-09 04:25:21,149][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:25:21,251][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:25:21,272][root][INFO] - Image embeddings computed.
[2025-02-09 04:25:25,442][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:25:25,535][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:25:25,556][root][INFO] - Image embeddings computed.
[2025-02-09 04:25:29,707][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:25:29,827][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:25:29,847][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 19
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.455 | Done: False

[2025-02-09 04:27:12,661][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:27:12,762][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:27:12,783][root][INFO] - Image embeddings computed.
[2025-02-09 04:27:29,254][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:27:29,351][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:27:29,372][root][INFO] - Image embeddings computed.
[2025-02-09 04:27:33,544][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:27:33,742][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:27:33,762][root][INFO] - Image embeddings computed.
[2025-02-09 04:27:37,931][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:27:38,120][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:27:38,141][root][INFO] - Image embeddings computed.
[2025-02-09 04:27:42,290][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:27:42,390][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:27:42,410][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 14
Lang Goal: pack all the black boot with leopard print objects in the brown box
Total Reward: 0.455 | Done: False

Mean: 0.7039627039627039 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 7/50
[2025-02-09 04:29:33,611][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:29:33,736][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:29:33,756][root][INFO] - Image embeddings computed.
[2025-02-09 04:29:50,439][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:29:50,542][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:29:50,562][root][INFO] - Image embeddings computed.
[2025-02-09 04:29:54,726][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:29:54,831][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:29:54,851][root][INFO] - Image embeddings computed.
[2025-02-09 04:29:59,014][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:29:59,107][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:29:59,127][root][INFO] - Image embeddings computed.
[2025-02-09 04:30:03,269][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:30:03,363][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:30:03,402][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 9
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 04:31:45,294][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:31:45,302][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:31:45,322][root][INFO] - Image embeddings computed.
[2025-02-09 04:32:01,878][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:32:01,886][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:32:01,907][root][INFO] - Image embeddings computed.
[2025-02-09 04:32:06,081][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:32:06,085][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:32:06,106][root][INFO] - Image embeddings computed.
[2025-02-09 04:32:10,266][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:32:10,271][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:32:10,291][root][INFO] - Image embeddings computed.
[2025-02-09 04:32:14,451][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:32:14,455][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:32:14,476][root][INFO] - Image embeddings computed.
The number of original masks: 16
The number of filtered masks: 9
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.400 | Done: False

[2025-02-09 04:33:53,689][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:33:53,700][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:33:53,720][root][INFO] - Image embeddings computed.
[2025-02-09 04:34:10,218][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:34:10,248][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:34:10,269][root][INFO] - Image embeddings computed.
[2025-02-09 04:34:14,434][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:34:14,438][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:34:14,458][root][INFO] - Image embeddings computed.
[2025-02-09 04:34:18,638][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:34:18,643][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:34:18,663][root][INFO] - Image embeddings computed.
[2025-02-09 04:34:22,812][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:34:22,817][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:34:22,837][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 17
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.400 | Done: False

Mean: 0.6605394605394606 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 8/50
[2025-02-09 04:36:20,001][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:36:20,149][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:36:20,171][root][INFO] - Image embeddings computed.
[2025-02-09 04:36:36,852][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:36:36,953][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:36:36,974][root][INFO] - Image embeddings computed.
[2025-02-09 04:36:41,123][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:36:41,216][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:36:41,243][root][INFO] - Image embeddings computed.
[2025-02-09 04:36:45,421][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:36:45,514][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:36:45,536][root][INFO] - Image embeddings computed.
[2025-02-09 04:36:49,677][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:36:49,788][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:36:49,809][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 25
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 04:38:40,562][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:38:40,664][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:38:40,686][root][INFO] - Image embeddings computed.
[2025-02-09 04:38:57,080][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:38:57,173][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:38:57,195][root][INFO] - Image embeddings computed.
[2025-02-09 04:39:01,350][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:39:01,449][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:39:01,476][root][INFO] - Image embeddings computed.
[2025-02-09 04:39:05,649][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:39:05,760][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:39:05,781][root][INFO] - Image embeddings computed.
[2025-02-09 04:39:09,952][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:39:10,069][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:39:10,090][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 22
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 04:40:55,789][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:40:55,932][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:40:55,953][root][INFO] - Image embeddings computed.
[2025-02-09 04:41:12,540][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:41:12,644][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:41:12,665][root][INFO] - Image embeddings computed.
[2025-02-09 04:41:16,818][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:41:16,929][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:41:16,949][root][INFO] - Image embeddings computed.
[2025-02-09 04:41:21,117][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:41:21,233][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:41:21,253][root][INFO] - Image embeddings computed.
[2025-02-09 04:41:25,414][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:41:25,564][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:41:25,585][root][INFO] - Image embeddings computed.
The number of original masks: 33
The number of filtered masks: 26
Lang Goal: pack all the rhino figure objects in the brown box
Total Reward: 0.652 | Done: False

Mean: 0.6594937671024628 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 9/50
[2025-02-09 04:43:23,945][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:43:24,048][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:43:24,069][root][INFO] - Image embeddings computed.
[2025-02-09 04:43:40,904][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:43:40,997][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:43:41,018][root][INFO] - Image embeddings computed.
[2025-02-09 04:43:45,181][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:43:45,274][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:43:45,294][root][INFO] - Image embeddings computed.
[2025-02-09 04:43:49,489][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:43:49,581][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:43:49,602][root][INFO] - Image embeddings computed.
[2025-02-09 04:43:53,771][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:43:53,864][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:43:53,884][root][INFO] - Image embeddings computed.
The number of original masks: 47
The number of filtered masks: 28
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.007 | Done: False

[2025-02-09 04:45:41,335][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:45:41,472][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:45:41,493][root][INFO] - Image embeddings computed.
[2025-02-09 04:45:58,030][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:45:58,182][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:45:58,202][root][INFO] - Image embeddings computed.
[2025-02-09 04:46:02,363][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:46:02,474][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:46:02,495][root][INFO] - Image embeddings computed.
[2025-02-09 04:46:06,675][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:46:06,768][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:46:06,789][root][INFO] - Image embeddings computed.
[2025-02-09 04:46:10,955][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:46:11,048][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:46:11,068][root][INFO] - Image embeddings computed.
The number of original masks: 51
The number of filtered masks: 27
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.397 | Done: False

[2025-02-09 04:47:58,101][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:47:58,204][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:47:58,226][root][INFO] - Image embeddings computed.
[2025-02-09 04:48:14,949][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:48:15,059][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:48:15,081][root][INFO] - Image embeddings computed.
[2025-02-09 04:48:19,262][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:48:19,360][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:48:19,382][root][INFO] - Image embeddings computed.
[2025-02-09 04:48:23,581][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:48:23,675][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:48:23,697][root][INFO] - Image embeddings computed.
[2025-02-09 04:48:27,851][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:48:27,944][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:48:27,965][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 26
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.397 | Done: False

[2025-02-09 04:50:15,583][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:50:15,686][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:50:15,708][root][INFO] - Image embeddings computed.
[2025-02-09 04:50:32,484][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:50:32,586][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:50:32,607][root][INFO] - Image embeddings computed.
[2025-02-09 04:50:36,789][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:50:36,925][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:50:36,947][root][INFO] - Image embeddings computed.
[2025-02-09 04:50:41,121][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:50:41,214][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:50:41,235][root][INFO] - Image embeddings computed.
[2025-02-09 04:50:45,393][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:50:45,492][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:50:45,513][root][INFO] - Image embeddings computed.
The number of original masks: 48
The number of filtered masks: 26
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.397 | Done: False

Mean: 0.6303343289276794 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 10/50
[2025-02-09 04:52:44,009][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:52:44,151][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:52:44,172][root][INFO] - Image embeddings computed.
[2025-02-09 04:53:01,181][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:53:01,274][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:53:01,295][root][INFO] - Image embeddings computed.
[2025-02-09 04:53:05,477][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:53:05,570][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:53:05,591][root][INFO] - Image embeddings computed.
[2025-02-09 04:53:09,775][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:53:09,867][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:53:09,889][root][INFO] - Image embeddings computed.
[2025-02-09 04:53:14,067][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:53:14,244][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:53:14,266][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 13
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.441 | Done: False

[2025-02-09 04:54:59,346][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:54:59,461][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:54:59,482][root][INFO] - Image embeddings computed.
[2025-02-09 04:55:16,300][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:55:16,405][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:55:16,426][root][INFO] - Image embeddings computed.
[2025-02-09 04:55:20,605][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:55:20,698][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:55:20,719][root][INFO] - Image embeddings computed.
[2025-02-09 04:55:24,907][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:55:25,043][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:55:25,063][root][INFO] - Image embeddings computed.
[2025-02-09 04:55:29,241][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:55:29,349][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:55:29,369][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 12
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.441 | Done: False

[2025-02-09 04:57:12,217][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:57:12,343][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:57:12,365][root][INFO] - Image embeddings computed.
[2025-02-09 04:57:29,189][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:57:29,288][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:57:29,310][root][INFO] - Image embeddings computed.
[2025-02-09 04:57:33,480][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:57:33,608][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:57:33,630][root][INFO] - Image embeddings computed.
[2025-02-09 04:57:37,807][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:57:37,902][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:57:37,924][root][INFO] - Image embeddings computed.
[2025-02-09 04:57:42,099][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:57:42,192][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:57:42,214][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 10
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.882 | Done: False

[2025-02-09 04:59:27,577][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:59:27,690][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:59:27,711][root][INFO] - Image embeddings computed.
[2025-02-09 04:59:44,322][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:59:44,463][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:59:44,484][root][INFO] - Image embeddings computed.
[2025-02-09 04:59:48,642][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:59:48,745][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:59:48,766][root][INFO] - Image embeddings computed.
[2025-02-09 04:59:52,955][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:59:53,059][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:59:53,080][root][INFO] - Image embeddings computed.
[2025-02-09 04:59:57,270][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 04:59:57,365][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 04:59:57,392][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 13
Lang Goal: pack all the white razer mouse objects in the brown box
Total Reward: 0.882 | Done: False

Mean: 0.6554898724128642 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 11/50
[2025-02-09 05:01:51,424][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:01:51,543][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:01:51,565][root][INFO] - Image embeddings computed.
[2025-02-09 05:02:08,301][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:02:08,421][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:02:08,454][root][INFO] - Image embeddings computed.
[2025-02-09 05:02:12,631][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:02:12,730][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:02:12,752][root][INFO] - Image embeddings computed.
[2025-02-09 05:02:16,951][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:02:17,049][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:02:17,070][root][INFO] - Image embeddings computed.
[2025-02-09 05:02:21,217][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:02:21,322][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:02:21,343][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 13
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 05:04:09,340][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:04:09,496][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:04:09,518][root][INFO] - Image embeddings computed.
[2025-02-09 05:04:26,438][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:04:26,535][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:04:26,556][root][INFO] - Image embeddings computed.
[2025-02-09 05:04:30,720][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:04:30,825][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:04:30,847][root][INFO] - Image embeddings computed.
[2025-02-09 05:04:35,047][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:04:35,173][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:04:35,195][root][INFO] - Image embeddings computed.
[2025-02-09 05:04:39,336][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:04:39,453][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:04:39,475][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 15
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 05:06:27,578][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:06:27,695][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:06:27,716][root][INFO] - Image embeddings computed.
[2025-02-09 05:06:44,394][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:06:44,505][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:06:44,526][root][INFO] - Image embeddings computed.
[2025-02-09 05:06:48,688][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:06:48,786][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:06:48,807][root][INFO] - Image embeddings computed.
[2025-02-09 05:06:52,997][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:06:53,090][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:06:53,111][root][INFO] - Image embeddings computed.
[2025-02-09 05:06:57,258][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:06:57,372][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:06:57,393][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 15
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.6868089749207856 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 12/50
[2025-02-09 05:08:51,549][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:08:51,668][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:08:51,689][root][INFO] - Image embeddings computed.
[2025-02-09 05:09:08,470][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:09:08,575][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:09:08,596][root][INFO] - Image embeddings computed.
[2025-02-09 05:09:12,770][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:09:12,875][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:09:12,897][root][INFO] - Image embeddings computed.
[2025-02-09 05:09:17,068][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:09:17,173][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:09:17,201][root][INFO] - Image embeddings computed.
[2025-02-09 05:09:21,376][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:09:21,508][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:09:21,530][root][INFO] - Image embeddings computed.
The number of original masks: 22
The number of filtered masks: 12
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 05:11:05,305][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:11:05,430][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:11:05,451][root][INFO] - Image embeddings computed.
[2025-02-09 05:11:21,829][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:11:21,928][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:11:21,949][root][INFO] - Image embeddings computed.
[2025-02-09 05:11:26,133][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:11:26,244][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:11:26,264][root][INFO] - Image embeddings computed.
[2025-02-09 05:11:30,426][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:11:30,545][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:11:30,565][root][INFO] - Image embeddings computed.
[2025-02-09 05:11:34,739][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:11:34,861][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:11:34,881][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 10
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 05:13:16,070][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:13:16,186][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:13:16,207][root][INFO] - Image embeddings computed.
[2025-02-09 05:13:32,751][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:13:32,850][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:13:32,871][root][INFO] - Image embeddings computed.
[2025-02-09 05:13:37,055][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:13:37,158][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:13:37,178][root][INFO] - Image embeddings computed.
[2025-02-09 05:13:41,350][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:13:41,443][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:13:41,464][root][INFO] - Image embeddings computed.
[2025-02-09 05:13:45,634][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:13:45,757][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:13:45,778][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 10
Lang Goal: pack all the alarm clock objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.6712415603440535 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 13/50
[2025-02-09 05:15:36,847][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:15:36,866][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:15:36,887][root][INFO] - Image embeddings computed.
[2025-02-09 05:15:54,282][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:15:54,293][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:15:54,313][root][INFO] - Image embeddings computed.
[2025-02-09 05:15:58,487][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:15:58,492][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:15:58,512][root][INFO] - Image embeddings computed.
[2025-02-09 05:16:02,692][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:16:02,697][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:16:02,717][root][INFO] - Image embeddings computed.
[2025-02-09 05:16:06,857][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:16:06,868][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:16:06,888][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 31
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 05:17:49,694][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:17:49,725][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:17:49,746][root][INFO] - Image embeddings computed.
[2025-02-09 05:18:06,541][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:18:06,551][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:18:06,571][root][INFO] - Image embeddings computed.
[2025-02-09 05:18:10,744][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:18:10,749][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:18:10,769][root][INFO] - Image embeddings computed.
[2025-02-09 05:18:14,941][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:18:14,945][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:18:14,966][root][INFO] - Image embeddings computed.
[2025-02-09 05:18:19,112][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:18:19,117][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:18:19,137][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 32
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 05:20:03,001][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:20:03,041][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:20:03,062][root][INFO] - Image embeddings computed.
[2025-02-09 05:20:19,746][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:20:19,750][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:20:19,772][root][INFO] - Image embeddings computed.
[2025-02-09 05:20:23,952][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:20:23,966][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:20:23,988][root][INFO] - Image embeddings computed.
[2025-02-09 05:20:28,162][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:20:28,168][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:20:28,189][root][INFO] - Image embeddings computed.
[2025-02-09 05:20:32,366][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:20:32,371][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:20:32,393][root][INFO] - Image embeddings computed.
The number of original masks: 30
The number of filtered masks: 24
Lang Goal: pack all the can opener objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.6580691326252801 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 14/50
[2025-02-09 05:22:27,886][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:22:27,940][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:22:27,962][root][INFO] - Image embeddings computed.
[2025-02-09 05:22:44,527][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:22:44,536][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:22:44,557][root][INFO] - Image embeddings computed.
[2025-02-09 05:22:48,742][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:22:48,746][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:22:48,768][root][INFO] - Image embeddings computed.
[2025-02-09 05:22:52,962][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:22:52,967][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:22:52,988][root][INFO] - Image embeddings computed.
[2025-02-09 05:22:57,143][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:22:57,153][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:22:57,174][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 05:24:44,795][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:24:44,919][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:24:44,941][root][INFO] - Image embeddings computed.
[2025-02-09 05:25:01,366][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:25:01,471][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:25:01,492][root][INFO] - Image embeddings computed.
[2025-02-09 05:25:05,672][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:25:05,771][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:25:05,793][root][INFO] - Image embeddings computed.
[2025-02-09 05:25:10,005][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:25:10,104][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:25:10,132][root][INFO] - Image embeddings computed.
[2025-02-09 05:25:14,303][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:25:14,404][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:25:14,425][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.938 | Done: False

[2025-02-09 05:27:03,237][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:27:03,381][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:27:03,402][root][INFO] - Image embeddings computed.
[2025-02-09 05:27:19,815][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:27:19,931][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:27:20,006][root][INFO] - Image embeddings computed.
[2025-02-09 05:27:24,179][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:27:24,278][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:27:24,300][root][INFO] - Image embeddings computed.
[2025-02-09 05:27:28,520][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:27:28,619][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:27:28,640][root][INFO] - Image embeddings computed.
[2025-02-09 05:27:32,814][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:27:32,913][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:27:32,935][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.938 | Done: False

Mean: 0.6780284802949029 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 15/50
[2025-02-09 05:29:36,234][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:29:36,369][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:29:36,391][root][INFO] - Image embeddings computed.
[2025-02-09 05:29:52,973][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:29:53,071][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:29:53,093][root][INFO] - Image embeddings computed.
[2025-02-09 05:29:57,254][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:29:57,359][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:29:57,380][root][INFO] - Image embeddings computed.
[2025-02-09 05:30:01,549][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:30:01,653][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:30:01,674][root][INFO] - Image embeddings computed.
[2025-02-09 05:30:05,821][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:30:05,988][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:30:06,010][root][INFO] - Image embeddings computed.
The number of original masks: 45
The number of filtered masks: 25
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 05:31:59,034][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:31:59,134][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:31:59,156][root][INFO] - Image embeddings computed.
[2025-02-09 05:32:15,717][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:32:15,834][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:32:15,855][root][INFO] - Image embeddings computed.
[2025-02-09 05:32:20,006][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:32:20,135][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:32:20,157][root][INFO] - Image embeddings computed.
[2025-02-09 05:32:24,342][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:32:24,453][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:32:24,474][root][INFO] - Image embeddings computed.
[2025-02-09 05:32:28,627][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:32:28,725][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:32:28,747][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 25
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 05:34:21,395][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:34:21,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:34:21,529][root][INFO] - Image embeddings computed.
[2025-02-09 05:34:37,929][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:34:38,026][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:34:38,071][root][INFO] - Image embeddings computed.
[2025-02-09 05:34:42,233][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:34:42,340][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:34:42,361][root][INFO] - Image embeddings computed.
[2025-02-09 05:34:46,530][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:34:46,647][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:34:46,668][root][INFO] - Image embeddings computed.
[2025-02-09 05:34:50,815][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:34:50,914][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:34:50,936][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 24
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.6661599149419094 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 16/50
[2025-02-09 05:36:53,443][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:36:53,550][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:36:53,572][root][INFO] - Image embeddings computed.
[2025-02-09 05:37:10,190][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:37:10,293][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:37:10,314][root][INFO] - Image embeddings computed.
[2025-02-09 05:37:14,532][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:37:14,631][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:37:14,653][root][INFO] - Image embeddings computed.
[2025-02-09 05:37:18,835][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:37:18,952][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:37:18,973][root][INFO] - Image embeddings computed.
[2025-02-09 05:37:23,129][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:37:23,232][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:37:23,253][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 20
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.372 | Done: False

[2025-02-09 05:39:15,553][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:39:15,659][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:39:15,680][root][INFO] - Image embeddings computed.
[2025-02-09 05:39:32,361][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:39:32,453][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:39:32,475][root][INFO] - Image embeddings computed.
[2025-02-09 05:39:36,725][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:39:36,824][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:39:36,845][root][INFO] - Image embeddings computed.
[2025-02-09 05:39:41,012][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:39:41,110][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:39:41,131][root][INFO] - Image embeddings computed.
[2025-02-09 05:39:45,289][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:39:45,387][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:39:45,408][root][INFO] - Image embeddings computed.
The number of original masks: 33
The number of filtered masks: 19
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.369 | Done: False

[2025-02-09 05:41:37,098][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:41:37,200][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:41:37,222][root][INFO] - Image embeddings computed.
[2025-02-09 05:41:54,008][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:41:54,103][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:41:54,125][root][INFO] - Image embeddings computed.
[2025-02-09 05:41:58,326][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:41:58,469][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:41:58,491][root][INFO] - Image embeddings computed.
[2025-02-09 05:42:02,663][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:42:02,788][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:42:02,826][root][INFO] - Image embeddings computed.
[2025-02-09 05:42:06,983][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:42:07,079][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:42:07,100][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 20
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.369 | Done: False

Mean: 0.6476073066216765 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 17/50
[2025-02-09 05:44:06,668][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:44:06,764][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:44:06,784][root][INFO] - Image embeddings computed.
[2025-02-09 05:44:23,564][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:44:23,657][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:44:23,678][root][INFO] - Image embeddings computed.
[2025-02-09 05:44:27,853][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:44:27,946][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:44:27,967][root][INFO] - Image embeddings computed.
[2025-02-09 05:44:32,134][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:44:32,227][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:44:32,248][root][INFO] - Image embeddings computed.
[2025-02-09 05:44:36,414][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:44:36,507][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:44:36,527][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 11
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 05:46:26,993][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:46:27,122][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:46:27,144][root][INFO] - Image embeddings computed.
[2025-02-09 05:46:43,873][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:46:43,967][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:46:43,994][root][INFO] - Image embeddings computed.
[2025-02-09 05:46:48,172][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:46:48,280][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:46:48,301][root][INFO] - Image embeddings computed.
[2025-02-09 05:46:52,496][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:46:52,589][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:46:52,611][root][INFO] - Image embeddings computed.
[2025-02-09 05:46:56,788][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:46:56,881][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:46:56,903][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 13
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.701 | Done: False

[2025-02-09 05:48:48,849][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:48:48,948][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:48:48,969][root][INFO] - Image embeddings computed.
[2025-02-09 05:49:05,479][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:49:05,578][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:49:05,599][root][INFO] - Image embeddings computed.
[2025-02-09 05:49:09,761][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:49:09,863][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:49:09,884][root][INFO] - Image embeddings computed.
[2025-02-09 05:49:14,067][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:49:14,179][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:49:14,199][root][INFO] - Image embeddings computed.
[2025-02-09 05:49:18,379][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:49:18,513][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:49:18,534][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 13
Lang Goal: pack all the porcelain cup objects in the brown box
Total Reward: 0.701 | Done: False

Mean: 0.6507442050227104 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 18/50
[2025-02-09 05:51:19,627][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:51:19,733][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:51:19,753][root][INFO] - Image embeddings computed.
[2025-02-09 05:51:36,366][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:51:36,470][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:51:36,491][root][INFO] - Image embeddings computed.
[2025-02-09 05:51:40,653][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:51:40,747][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:51:40,767][root][INFO] - Image embeddings computed.
[2025-02-09 05:51:44,940][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:51:45,034][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:51:45,054][root][INFO] - Image embeddings computed.
[2025-02-09 05:51:49,224][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:51:49,317][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:51:49,337][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 15
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.593 | Done: False

[2025-02-09 05:53:40,513][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:53:40,630][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:53:40,651][root][INFO] - Image embeddings computed.
[2025-02-09 05:53:57,139][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:53:57,232][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:53:57,252][root][INFO] - Image embeddings computed.
[2025-02-09 05:54:01,432][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:54:01,537][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:54:01,557][root][INFO] - Image embeddings computed.
[2025-02-09 05:54:05,738][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:54:05,951][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:54:05,971][root][INFO] - Image embeddings computed.
[2025-02-09 05:54:10,157][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:54:10,338][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:54:10,359][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 18
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.593 | Done: False

[2025-02-09 05:55:57,757][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:55:57,768][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:55:57,788][root][INFO] - Image embeddings computed.
[2025-02-09 05:56:14,241][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:56:14,245][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:56:14,265][root][INFO] - Image embeddings computed.
[2025-02-09 05:56:18,446][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:56:18,450][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:56:18,471][root][INFO] - Image embeddings computed.
[2025-02-09 05:56:22,647][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:56:22,652][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:56:22,672][root][INFO] - Image embeddings computed.
[2025-02-09 05:56:26,857][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:56:26,861][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:56:26,881][root][INFO] - Image embeddings computed.
The number of original masks: 21
The number of filtered masks: 14
Lang Goal: pack all the black razer mouse objects in the brown box
Total Reward: 0.593 | Done: False

Mean: 0.6475484346871737 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 19/50
[2025-02-09 05:58:30,164][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:58:30,316][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:58:30,337][root][INFO] - Image embeddings computed.
[2025-02-09 05:58:46,773][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:58:46,883][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:58:46,903][root][INFO] - Image embeddings computed.
[2025-02-09 05:58:51,068][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:58:51,166][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:58:51,187][root][INFO] - Image embeddings computed.
[2025-02-09 05:58:55,388][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:58:55,543][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:58:55,569][root][INFO] - Image embeddings computed.
[2025-02-09 05:58:59,757][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 05:58:59,862][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 05:58:59,883][root][INFO] - Image embeddings computed.
The number of original masks: 44
The number of filtered masks: 28
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 06:00:54,912][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:00:55,009][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:00:55,032][root][INFO] - Image embeddings computed.
[2025-02-09 06:01:11,607][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:01:11,699][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:01:11,721][root][INFO] - Image embeddings computed.
[2025-02-09 06:01:15,909][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:01:16,002][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:01:16,024][root][INFO] - Image embeddings computed.
[2025-02-09 06:01:20,220][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:01:20,312][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:01:20,334][root][INFO] - Image embeddings computed.
[2025-02-09 06:01:24,524][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:01:24,617][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:01:24,639][root][INFO] - Image embeddings computed.
The number of original masks: 41
The number of filtered masks: 24
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 06:03:19,956][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:03:20,065][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:03:20,086][root][INFO] - Image embeddings computed.
[2025-02-09 06:03:36,930][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:03:37,024][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:03:37,046][root][INFO] - Image embeddings computed.
[2025-02-09 06:03:41,234][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:03:41,327][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:03:41,349][root][INFO] - Image embeddings computed.
[2025-02-09 06:03:45,532][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:03:45,631][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:03:45,652][root][INFO] - Image embeddings computed.
[2025-02-09 06:03:49,837][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:03:49,936][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:03:49,958][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 23
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

[2025-02-09 06:05:46,431][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:05:46,541][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:05:46,563][root][INFO] - Image embeddings computed.
[2025-02-09 06:06:03,313][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:06:03,447][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:06:03,468][root][INFO] - Image embeddings computed.
[2025-02-09 06:06:07,652][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:06:07,769][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:06:07,802][root][INFO] - Image embeddings computed.
[2025-02-09 06:06:12,001][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:06:12,101][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:06:12,121][root][INFO] - Image embeddings computed.
[2025-02-09 06:06:16,312][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:06:16,406][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:06:16,426][root][INFO] - Image embeddings computed.
The number of original masks: 36
The number of filtered masks: 24
Lang Goal: pack all the hard drive objects in the brown box
Total Reward: 0.444 | Done: False

Mean: 0.636858750990188 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 20/50
[2025-02-09 06:08:24,792][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:08:24,943][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:08:24,964][root][INFO] - Image embeddings computed.
[2025-02-09 06:08:41,597][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:08:41,691][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:08:41,713][root][INFO] - Image embeddings computed.
[2025-02-09 06:08:45,882][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:08:45,989][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:08:46,016][root][INFO] - Image embeddings computed.
[2025-02-09 06:08:50,189][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:08:50,283][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:08:50,304][root][INFO] - Image embeddings computed.
[2025-02-09 06:08:54,435][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:08:54,547][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:08:54,569][root][INFO] - Image embeddings computed.
The number of original masks: 40
The number of filtered masks: 20
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 06:10:44,961][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:10:44,973][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:10:44,994][root][INFO] - Image embeddings computed.
[2025-02-09 06:11:01,662][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:11:01,666][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:11:01,687][root][INFO] - Image embeddings computed.
[2025-02-09 06:11:05,855][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:11:05,860][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:11:05,880][root][INFO] - Image embeddings computed.
[2025-02-09 06:11:10,045][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:11:10,050][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:11:10,070][root][INFO] - Image embeddings computed.
[2025-02-09 06:11:14,200][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:11:14,205][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:11:14,225][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 16
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 06:13:05,732][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:13:05,839][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:13:05,860][root][INFO] - Image embeddings computed.
[2025-02-09 06:13:22,699][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:13:22,820][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:13:22,841][root][INFO] - Image embeddings computed.
[2025-02-09 06:13:27,010][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:13:27,105][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:13:27,125][root][INFO] - Image embeddings computed.
[2025-02-09 06:13:31,296][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:13:31,390][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:13:31,410][root][INFO] - Image embeddings computed.
[2025-02-09 06:13:35,588][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:13:35,681][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:13:35,702][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 17
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 06:15:31,785][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:15:31,884][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:15:31,905][root][INFO] - Image embeddings computed.
[2025-02-09 06:15:48,613][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:15:48,707][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:15:48,728][root][INFO] - Image embeddings computed.
[2025-02-09 06:15:52,905][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:15:53,005][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:15:53,025][root][INFO] - Image embeddings computed.
[2025-02-09 06:15:57,190][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:15:57,284][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:15:57,304][root][INFO] - Image embeddings computed.
[2025-02-09 06:16:01,461][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:16:01,555][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:16:01,575][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 21
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.6300158134406786 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 21/50
[2025-02-09 06:18:06,308][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:18:06,453][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:18:06,474][root][INFO] - Image embeddings computed.
[2025-02-09 06:18:23,090][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:18:23,210][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:18:23,231][root][INFO] - Image embeddings computed.
[2025-02-09 06:18:27,429][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:18:27,537][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:18:27,558][root][INFO] - Image embeddings computed.
[2025-02-09 06:18:31,718][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:18:31,813][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:18:31,834][root][INFO] - Image embeddings computed.
[2025-02-09 06:18:35,978][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:18:36,072][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:18:36,093][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 11
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 06:20:30,329][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:20:30,449][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:20:30,470][root][INFO] - Image embeddings computed.
[2025-02-09 06:20:47,228][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:20:47,424][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:20:47,451][root][INFO] - Image embeddings computed.
[2025-02-09 06:20:51,628][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:20:51,821][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:20:51,849][root][INFO] - Image embeddings computed.
[2025-02-09 06:20:56,007][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:20:56,107][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:20:56,128][root][INFO] - Image embeddings computed.
[2025-02-09 06:21:00,269][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:21:00,391][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:21:00,412][root][INFO] - Image embeddings computed.
The number of original masks: 11
The number of filtered masks: 8
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 06:22:54,783][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:22:54,897][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:22:54,917][root][INFO] - Image embeddings computed.
[2025-02-09 06:23:11,579][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:23:11,678][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:23:11,700][root][INFO] - Image embeddings computed.
[2025-02-09 06:23:15,885][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:23:15,979][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:23:16,007][root][INFO] - Image embeddings computed.
[2025-02-09 06:23:20,176][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:23:20,286][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:23:20,307][root][INFO] - Image embeddings computed.
[2025-02-09 06:23:24,454][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:23:24,557][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:23:24,578][root][INFO] - Image embeddings computed.
The number of original masks: 12
The number of filtered masks: 10
Lang Goal: pack all the black fedora objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.6000150604196939 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 22/50
[2025-02-09 06:25:30,942][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:25:30,968][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:25:30,989][root][INFO] - Image embeddings computed.
[2025-02-09 06:25:47,875][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:25:47,879][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:25:47,900][root][INFO] - Image embeddings computed.
[2025-02-09 06:25:52,083][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:25:52,087][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:25:52,108][root][INFO] - Image embeddings computed.
[2025-02-09 06:25:56,272][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:25:56,276][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:25:56,297][root][INFO] - Image embeddings computed.
[2025-02-09 06:26:00,427][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:26:00,476][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:26:00,496][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 23
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 06:27:57,113][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:27:57,232][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:27:57,252][root][INFO] - Image embeddings computed.
[2025-02-09 06:28:15,428][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:28:15,522][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:28:15,543][root][INFO] - Image embeddings computed.
[2025-02-09 06:28:19,708][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:28:19,801][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:28:19,822][root][INFO] - Image embeddings computed.
[2025-02-09 06:28:23,993][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:28:24,108][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:28:24,129][root][INFO] - Image embeddings computed.
[2025-02-09 06:28:28,254][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:28:28,363][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:28:28,383][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 26
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 06:30:27,713][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:30:27,853][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:30:27,875][root][INFO] - Image embeddings computed.
[2025-02-09 06:30:47,349][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:30:47,522][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:30:47,543][root][INFO] - Image embeddings computed.
[2025-02-09 06:30:51,725][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:30:51,817][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:30:51,839][root][INFO] - Image embeddings computed.
[2025-02-09 06:30:56,011][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:30:56,110][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:30:56,132][root][INFO] - Image embeddings computed.
[2025-02-09 06:31:00,242][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:31:00,345][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:31:00,366][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 23
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.951 | Done: False

Mean: 0.615951525125645 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 23/50
[2025-02-09 06:33:10,245][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:33:10,361][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:33:10,388][root][INFO] - Image embeddings computed.
[2025-02-09 06:33:27,171][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:33:27,265][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:33:27,285][root][INFO] - Image embeddings computed.
[2025-02-09 06:33:31,440][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:33:31,544][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:33:31,565][root][INFO] - Image embeddings computed.
[2025-02-09 06:33:35,761][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:33:35,856][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:33:35,881][root][INFO] - Image embeddings computed.
[2025-02-09 06:33:40,089][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:33:40,193][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:33:40,219][root][INFO] - Image embeddings computed.
The number of original masks: 41
The number of filtered masks: 28
Lang Goal: pack all the scissors objects in the brown box
Total Reward: 0.323 | Done: False

[2025-02-09 06:35:39,465][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:35:39,593][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:35:39,620][root][INFO] - Image embeddings computed.
[2025-02-09 06:35:56,376][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:35:56,486][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:35:56,507][root][INFO] - Image embeddings computed.
[2025-02-09 06:36:00,658][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:36:00,780][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:36:00,800][root][INFO] - Image embeddings computed.
[2025-02-09 06:36:04,979][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:36:05,076][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:36:05,097][root][INFO] - Image embeddings computed.
[2025-02-09 06:36:09,303][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:36:09,402][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:36:09,423][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 23
Lang Goal: pack all the scissors objects in the brown box
Total Reward: 0.323 | Done: False

[2025-02-09 06:38:02,349][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:38:02,365][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:38:02,386][root][INFO] - Image embeddings computed.
[2025-02-09 06:38:19,121][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:38:19,128][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:38:19,149][root][INFO] - Image embeddings computed.
[2025-02-09 06:38:23,303][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:38:23,312][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:38:23,332][root][INFO] - Image embeddings computed.
[2025-02-09 06:38:27,528][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:38:27,537][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:38:27,558][root][INFO] - Image embeddings computed.
[2025-02-09 06:38:31,759][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:38:31,768][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:38:31,788][root][INFO] - Image embeddings computed.
The number of original masks: 42
The number of filtered masks: 28
Lang Goal: pack all the scissors objects in the brown box
Total Reward: 0.323 | Done: False

Mean: 0.6031962694750208 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 24/50
[2025-02-09 06:40:40,959][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:40:41,089][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:40:41,110][root][INFO] - Image embeddings computed.
[2025-02-09 06:40:57,736][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:40:57,835][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:40:57,856][root][INFO] - Image embeddings computed.
[2025-02-09 06:41:02,041][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:41:02,135][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:41:02,155][root][INFO] - Image embeddings computed.
[2025-02-09 06:41:06,314][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:41:06,442][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:41:06,462][root][INFO] - Image embeddings computed.
[2025-02-09 06:41:10,640][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:41:10,734][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:41:10,755][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 18
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 06:43:09,589][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:43:09,694][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:43:09,715][root][INFO] - Image embeddings computed.
[2025-02-09 06:43:26,298][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:43:26,413][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:43:26,434][root][INFO] - Image embeddings computed.
[2025-02-09 06:43:30,626][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:43:30,726][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:43:30,748][root][INFO] - Image embeddings computed.
[2025-02-09 06:43:34,900][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:43:35,000][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:43:35,022][root][INFO] - Image embeddings computed.
[2025-02-09 06:43:39,225][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:43:39,344][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:43:39,366][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 15
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 06:45:37,321][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:45:37,426][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:45:37,448][root][INFO] - Image embeddings computed.
[2025-02-09 06:45:54,132][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:45:54,228][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:45:54,249][root][INFO] - Image embeddings computed.
[2025-02-09 06:45:58,429][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:45:58,522][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:45:58,544][root][INFO] - Image embeddings computed.
[2025-02-09 06:46:02,703][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:46:02,803][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:46:02,825][root][INFO] - Image embeddings computed.
[2025-02-09 06:46:07,023][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:46:07,131][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:46:07,154][root][INFO] - Image embeddings computed.
The number of original masks: 18
The number of filtered masks: 17
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.254 | Done: False

[2025-02-09 06:48:06,026][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:48:06,126][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:48:06,148][root][INFO] - Image embeddings computed.
[2025-02-09 06:48:22,840][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:48:22,951][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:48:22,973][root][INFO] - Image embeddings computed.
[2025-02-09 06:48:27,168][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:48:27,282][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:48:27,304][root][INFO] - Image embeddings computed.
[2025-02-09 06:48:31,468][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:48:31,568][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:48:31,589][root][INFO] - Image embeddings computed.
[2025-02-09 06:48:35,779][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:48:35,901][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:48:35,922][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 23
Lang Goal: pack all the black sandal objects in the brown box
Total Reward: 0.254 | Done: False

Mean: 0.5886625067849066 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 25/50
[2025-02-09 06:50:42,756][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:50:42,866][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:50:42,888][root][INFO] - Image embeddings computed.
[2025-02-09 06:50:59,763][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:50:59,867][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:50:59,894][root][INFO] - Image embeddings computed.
[2025-02-09 06:51:04,080][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:51:04,173][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:51:04,195][root][INFO] - Image embeddings computed.
[2025-02-09 06:51:08,360][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:51:08,453][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:51:08,475][root][INFO] - Image embeddings computed.
[2025-02-09 06:51:12,625][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:51:12,725][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:51:12,747][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 12
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 06:53:10,870][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:53:10,989][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:53:11,011][root][INFO] - Image embeddings computed.
[2025-02-09 06:53:27,731][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:53:27,831][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:53:27,852][root][INFO] - Image embeddings computed.
[2025-02-09 06:53:32,020][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:53:32,118][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:53:32,140][root][INFO] - Image embeddings computed.
[2025-02-09 06:53:36,325][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:53:36,447][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:53:36,468][root][INFO] - Image embeddings computed.
[2025-02-09 06:53:40,623][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:53:40,724][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:53:40,745][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 14
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 06:55:40,341][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:55:40,437][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:55:40,458][root][INFO] - Image embeddings computed.
[2025-02-09 06:55:57,267][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:55:57,360][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:55:57,381][root][INFO] - Image embeddings computed.
[2025-02-09 06:56:01,545][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:56:01,639][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:56:01,660][root][INFO] - Image embeddings computed.
[2025-02-09 06:56:05,836][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:56:05,936][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:56:05,957][root][INFO] - Image embeddings computed.
[2025-02-09 06:56:10,112][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:56:10,205][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:56:10,227][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 16
Lang Goal: pack all the magnifying glass objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.5851160065135104 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 26/50
[2025-02-09 06:58:20,846][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:58:20,948][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:58:20,970][root][INFO] - Image embeddings computed.
[2025-02-09 06:58:37,795][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:58:37,887][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:58:37,909][root][INFO] - Image embeddings computed.
[2025-02-09 06:58:42,086][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:58:42,197][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:58:42,219][root][INFO] - Image embeddings computed.
[2025-02-09 06:58:46,395][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:58:46,516][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:58:46,543][root][INFO] - Image embeddings computed.
[2025-02-09 06:58:50,724][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 06:58:50,832][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 06:58:50,853][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 22
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.300 | Done: False

[2025-02-09 07:00:52,065][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:00:52,166][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:00:52,188][root][INFO] - Image embeddings computed.
[2025-02-09 07:01:09,243][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:01:09,248][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:01:09,270][root][INFO] - Image embeddings computed.
[2025-02-09 07:01:13,462][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:01:13,466][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:01:13,488][root][INFO] - Image embeddings computed.
[2025-02-09 07:01:17,660][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:01:17,665][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:01:17,686][root][INFO] - Image embeddings computed.
[2025-02-09 07:01:21,887][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:01:21,892][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:01:21,913][root][INFO] - Image embeddings computed.
The number of original masks: 48
The number of filtered masks: 26
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.375 | Done: False

[2025-02-09 07:03:24,519][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:03:24,623][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:03:24,645][root][INFO] - Image embeddings computed.
[2025-02-09 07:03:41,378][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:03:41,536][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:03:41,557][root][INFO] - Image embeddings computed.
[2025-02-09 07:03:45,775][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:03:45,881][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:03:45,902][root][INFO] - Image embeddings computed.
[2025-02-09 07:03:50,083][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:03:50,183][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:03:50,204][root][INFO] - Image embeddings computed.
[2025-02-09 07:03:54,406][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:03:54,499][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:03:54,521][root][INFO] - Image embeddings computed.
The number of original masks: 45
The number of filtered masks: 26
Lang Goal: pack all the pepsi next box objects in the brown box
Total Reward: 0.375 | Done: False

Mean: 0.5770346216476061 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 27/50
[2025-02-09 07:05:59,133][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:05:59,143][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:05:59,165][root][INFO] - Image embeddings computed.
[2025-02-09 07:06:16,042][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:06:16,046][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:06:16,067][root][INFO] - Image embeddings computed.
[2025-02-09 07:06:20,261][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:06:20,266][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:06:20,287][root][INFO] - Image embeddings computed.
[2025-02-09 07:06:24,480][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:06:24,484][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:06:24,505][root][INFO] - Image embeddings computed.
[2025-02-09 07:06:28,695][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:06:28,699][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:06:28,720][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 19
Lang Goal: pack all the silver tape objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 07:08:30,421][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:08:30,516][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:08:30,538][root][INFO] - Image embeddings computed.
[2025-02-09 07:08:47,090][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:08:47,184][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:08:47,205][root][INFO] - Image embeddings computed.
[2025-02-09 07:08:51,390][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:08:51,489][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:08:51,510][root][INFO] - Image embeddings computed.
[2025-02-09 07:08:55,708][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:08:55,824][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:08:55,851][root][INFO] - Image embeddings computed.
[2025-02-09 07:09:00,041][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:09:00,134][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:09:00,156][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 19
Lang Goal: pack all the silver tape objects in the brown box
Warning: movej exceeded 5 second timeout. Skipping.
Total Reward: 0.000 | Done: True

Mean: 0.5556629689939911 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 28/50
[2025-02-09 07:11:16,696][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:11:16,897][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:11:16,918][root][INFO] - Image embeddings computed.
[2025-02-09 07:11:33,818][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:11:33,911][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:11:33,939][root][INFO] - Image embeddings computed.
[2025-02-09 07:11:38,099][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:11:38,217][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:11:38,239][root][INFO] - Image embeddings computed.
[2025-02-09 07:11:42,403][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:11:42,496][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:11:42,518][root][INFO] - Image embeddings computed.
[2025-02-09 07:11:46,697][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:11:46,807][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:11:46,828][root][INFO] - Image embeddings computed.
The number of original masks: 43
The number of filtered masks: 20
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-09 07:13:50,845][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:13:50,946][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:13:50,967][root][INFO] - Image embeddings computed.
[2025-02-09 07:14:07,936][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:14:08,029][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:14:08,049][root][INFO] - Image embeddings computed.
[2025-02-09 07:14:12,203][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:14:12,306][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:14:12,327][root][INFO] - Image embeddings computed.
[2025-02-09 07:14:16,498][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:14:16,591][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:14:16,611][root][INFO] - Image embeddings computed.
[2025-02-09 07:14:20,784][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:14:20,877][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:14:20,897][root][INFO] - Image embeddings computed.
The number of original masks: 44
The number of filtered masks: 21
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

[2025-02-09 07:16:25,404][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:16:25,500][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:16:25,521][root][INFO] - Image embeddings computed.
[2025-02-09 07:16:42,428][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:16:42,539][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:16:42,560][root][INFO] - Image embeddings computed.
[2025-02-09 07:16:46,706][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:16:46,798][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:16:46,819][root][INFO] - Image embeddings computed.
[2025-02-09 07:16:50,999][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:16:51,096][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:16:51,117][root][INFO] - Image embeddings computed.
[2025-02-09 07:16:55,294][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:16:55,397][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:16:55,418][root][INFO] - Image embeddings computed.
The number of original masks: 47
The number of filtered masks: 22
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.333 | Done: False

Mean: 0.5477226248632533 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 29/50
[2025-02-09 07:19:03,743][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:19:03,755][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:19:03,776][root][INFO] - Image embeddings computed.
[2025-02-09 07:19:20,727][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:19:20,730][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:19:20,751][root][INFO] - Image embeddings computed.
[2025-02-09 07:19:24,920][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:19:24,924][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:19:24,944][root][INFO] - Image embeddings computed.
[2025-02-09 07:19:29,128][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:19:29,131][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:19:29,151][root][INFO] - Image embeddings computed.
[2025-02-09 07:19:33,286][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:19:33,289][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:19:33,310][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 29
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 07:21:31,879][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:21:31,908][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:21:31,928][root][INFO] - Image embeddings computed.
[2025-02-09 07:21:48,785][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:21:48,788][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:21:48,808][root][INFO] - Image embeddings computed.
[2025-02-09 07:21:52,983][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:21:52,987][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:21:53,007][root][INFO] - Image embeddings computed.
[2025-02-09 07:21:57,189][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:21:57,192][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:21:57,212][root][INFO] - Image embeddings computed.
[2025-02-09 07:22:01,360][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:22:01,364][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:22:01,384][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 24
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 07:24:05,276][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:24:05,386][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:24:05,407][root][INFO] - Image embeddings computed.
[2025-02-09 07:24:22,417][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:24:22,535][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:24:22,618][root][INFO] - Image embeddings computed.
[2025-02-09 07:24:26,785][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:24:26,878][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:24:26,899][root][INFO] - Image embeddings computed.
[2025-02-09 07:24:31,083][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:24:31,175][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:24:31,196][root][INFO] - Image embeddings computed.
[2025-02-09 07:24:35,339][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:24:35,443][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:24:35,464][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 29
Lang Goal: pack all the porcelain salad plate objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5288356377990032 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 30/50
[2025-02-09 07:26:48,102][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:26:48,132][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:26:48,152][root][INFO] - Image embeddings computed.
[2025-02-09 07:27:05,095][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:27:05,098][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:27:05,119][root][INFO] - Image embeddings computed.
[2025-02-09 07:27:09,287][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:27:09,290][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:27:09,311][root][INFO] - Image embeddings computed.
[2025-02-09 07:27:13,481][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:27:13,485][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:27:13,505][root][INFO] - Image embeddings computed.
[2025-02-09 07:27:17,667][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:27:17,670][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:27:17,690][root][INFO] - Image embeddings computed.
The number of original masks: 23
The number of filtered masks: 16
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 07:29:15,895][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:29:15,975][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:29:15,995][root][INFO] - Image embeddings computed.
[2025-02-09 07:29:32,870][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:29:32,874][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:29:32,894][root][INFO] - Image embeddings computed.
[2025-02-09 07:29:37,063][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:29:37,066][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:29:37,086][root][INFO] - Image embeddings computed.
[2025-02-09 07:29:41,271][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:29:41,275][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:29:41,295][root][INFO] - Image embeddings computed.
[2025-02-09 07:29:45,467][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:29:45,470][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:29:45,491][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 17
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 07:31:44,219][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:31:44,240][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:31:44,261][root][INFO] - Image embeddings computed.
[2025-02-09 07:32:01,196][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:32:01,200][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:32:01,220][root][INFO] - Image embeddings computed.
[2025-02-09 07:32:05,394][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:32:05,397][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:32:05,418][root][INFO] - Image embeddings computed.
[2025-02-09 07:32:09,588][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:32:09,591][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:32:09,612][root][INFO] - Image embeddings computed.
[2025-02-09 07:32:13,767][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:32:13,770][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:32:13,798][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 17
Lang Goal: pack all the nintendo 3ds objects in the brown box
Total Reward: 0.000 | Done: False

Mean: 0.5112077832057031 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 31/50
[2025-02-09 07:34:20,814][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:34:20,830][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:34:20,851][root][INFO] - Image embeddings computed.
[2025-02-09 07:34:37,515][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:34:37,520][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:34:37,541][root][INFO] - Image embeddings computed.
[2025-02-09 07:34:41,694][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:34:41,699][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:34:41,720][root][INFO] - Image embeddings computed.
[2025-02-09 07:34:45,883][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:34:45,888][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:34:45,908][root][INFO] - Image embeddings computed.
[2025-02-09 07:34:50,071][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:34:50,075][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:34:50,096][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 11
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

[2025-02-09 07:36:53,051][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:36:53,162][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:36:53,183][root][INFO] - Image embeddings computed.
[2025-02-09 07:37:09,839][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:37:09,948][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:37:09,970][root][INFO] - Image embeddings computed.
[2025-02-09 07:37:14,141][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:37:14,264][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:37:14,292][root][INFO] - Image embeddings computed.
[2025-02-09 07:37:18,465][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:37:18,565][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:37:18,586][root][INFO] - Image embeddings computed.
[2025-02-09 07:37:22,748][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:37:22,907][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:37:22,929][root][INFO] - Image embeddings computed.
The number of original masks: 20
The number of filtered masks: 9
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

[2025-02-09 07:39:27,023][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:39:27,158][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:39:27,179][root][INFO] - Image embeddings computed.
[2025-02-09 07:39:43,816][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:39:43,916][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:39:43,937][root][INFO] - Image embeddings computed.
[2025-02-09 07:39:48,107][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:39:48,288][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:39:48,309][root][INFO] - Image embeddings computed.
[2025-02-09 07:39:52,489][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:39:52,583][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:39:52,605][root][INFO] - Image embeddings computed.
[2025-02-09 07:39:56,765][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:39:56,864][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:39:56,886][root][INFO] - Image embeddings computed.
The number of original masks: 27
The number of filtered masks: 13
Lang Goal: pack all the mario figure objects in the brown box
Total Reward: 0.667 | Done: False

Mean: 0.5162225858979923 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 32/50
[2025-02-09 07:42:07,567][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:42:07,586][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:42:07,607][root][INFO] - Image embeddings computed.
[2025-02-09 07:42:24,376][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:42:24,379][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:42:24,400][root][INFO] - Image embeddings computed.
[2025-02-09 07:42:28,544][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:42:28,548][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:42:28,568][root][INFO] - Image embeddings computed.
[2025-02-09 07:42:32,714][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:42:32,726][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:42:32,747][root][INFO] - Image embeddings computed.
[2025-02-09 07:42:36,914][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:42:36,918][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:42:36,938][root][INFO] - Image embeddings computed.
The number of original masks: 24
The number of filtered masks: 13
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 07:44:36,900][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:44:37,016][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:44:37,037][root][INFO] - Image embeddings computed.
[2025-02-09 07:44:53,516][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:44:53,640][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:44:53,661][root][INFO] - Image embeddings computed.
[2025-02-09 07:44:57,838][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:44:57,932][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:44:57,959][root][INFO] - Image embeddings computed.
[2025-02-09 07:45:02,115][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:45:02,226][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:45:02,247][root][INFO] - Image embeddings computed.
[2025-02-09 07:45:06,422][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:45:06,539][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:45:06,560][root][INFO] - Image embeddings computed.
The number of original masks: 26
The number of filtered masks: 14
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 07:47:11,504][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:47:11,680][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:47:11,701][root][INFO] - Image embeddings computed.
[2025-02-09 07:47:28,158][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:47:28,253][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:47:28,274][root][INFO] - Image embeddings computed.
[2025-02-09 07:47:32,423][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:47:32,570][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:47:32,591][root][INFO] - Image embeddings computed.
[2025-02-09 07:47:36,745][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:47:36,854][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:47:36,875][root][INFO] - Image embeddings computed.
[2025-02-09 07:47:41,051][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:47:41,150][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:47:41,172][root][INFO] - Image embeddings computed.
The number of original masks: 25
The number of filtered masks: 14
Lang Goal: pack all the black shoe with orange stripes objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.51571563008868 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 33/50
[2025-02-09 07:49:58,107][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:49:58,247][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:49:58,270][root][INFO] - Image embeddings computed.
[2025-02-09 07:50:14,880][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:50:14,981][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:50:15,002][root][INFO] - Image embeddings computed.
[2025-02-09 07:50:19,168][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:50:19,289][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:50:19,311][root][INFO] - Image embeddings computed.
[2025-02-09 07:50:23,479][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:50:23,605][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:50:23,627][root][INFO] - Image embeddings computed.
[2025-02-09 07:50:27,758][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:50:27,874][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:50:27,902][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 23
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 07:52:30,715][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:52:30,732][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:52:30,752][root][INFO] - Image embeddings computed.
[2025-02-09 07:52:47,225][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:52:47,233][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:52:47,254][root][INFO] - Image embeddings computed.
[2025-02-09 07:52:51,412][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:52:51,415][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:52:51,435][root][INFO] - Image embeddings computed.
[2025-02-09 07:52:55,603][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:52:55,606][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:52:55,627][root][INFO] - Image embeddings computed.
[2025-02-09 07:52:59,765][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:52:59,772][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:52:59,793][root][INFO] - Image embeddings computed.
The number of original masks: 31
The number of filtered masks: 17
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.000 | Done: False

[2025-02-09 07:55:00,977][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:55:00,997][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:55:01,018][root][INFO] - Image embeddings computed.
[2025-02-09 07:55:17,781][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:55:17,790][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:55:17,810][root][INFO] - Image embeddings computed.
[2025-02-09 07:55:21,978][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:55:21,981][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:55:22,001][root][INFO] - Image embeddings computed.
[2025-02-09 07:55:26,175][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:55:26,178][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:55:26,199][root][INFO] - Image embeddings computed.
[2025-02-09 07:55:30,352][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:55:30,362][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:55:30,382][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 14
Lang Goal: pack all the crayon box objects in the brown box
Total Reward: 0.286 | Done: False

Mean: 0.508745892380365 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 34/50
[2025-02-09 07:57:43,256][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:57:43,392][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:57:43,413][root][INFO] - Image embeddings computed.
[2025-02-09 07:58:00,246][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:58:00,353][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:58:00,374][root][INFO] - Image embeddings computed.
[2025-02-09 07:58:04,550][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:58:04,666][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:58:04,687][root][INFO] - Image embeddings computed.
[2025-02-09 07:58:08,860][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:58:08,976][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:58:08,997][root][INFO] - Image embeddings computed.
[2025-02-09 07:58:13,151][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 07:58:13,267][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 07:58:13,287][root][INFO] - Image embeddings computed.
The number of original masks: 29
The number of filtered masks: 13
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

[2025-02-09 08:00:14,857][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:00:14,873][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:00:14,894][root][INFO] - Image embeddings computed.
[2025-02-09 08:00:31,390][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:00:31,400][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:00:31,420][root][INFO] - Image embeddings computed.
[2025-02-09 08:00:35,587][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:00:35,591][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:00:35,611][root][INFO] - Image embeddings computed.
[2025-02-09 08:00:39,794][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:00:39,797][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:00:39,818][root][INFO] - Image embeddings computed.
[2025-02-09 08:00:43,971][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:00:43,975][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:00:43,995][root][INFO] - Image embeddings computed.
The number of original masks: 34
The number of filtered masks: 14
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

[2025-02-09 08:02:45,623][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:02:45,665][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:02:45,685][root][INFO] - Image embeddings computed.
[2025-02-09 08:03:02,315][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:03:02,326][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:03:02,346][root][INFO] - Image embeddings computed.
[2025-02-09 08:03:06,518][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:03:06,521][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:03:06,542][root][INFO] - Image embeddings computed.
[2025-02-09 08:03:10,724][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:03:10,728][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:03:10,748][root][INFO] - Image embeddings computed.
[2025-02-09 08:03:14,902][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:03:14,994][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:03:15,015][root][INFO] - Image embeddings computed.
The number of original masks: 37
The number of filtered masks: 20
Lang Goal: pack all the spiderman figure objects in the brown box
Total Reward: 0.259 | Done: False

Mean: 0.5014080502297443 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 35/50
[2025-02-09 08:05:31,721][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:05:31,937][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:05:31,958][root][INFO] - Image embeddings computed.
[2025-02-09 08:05:48,720][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:05:48,872][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:05:48,893][root][INFO] - Image embeddings computed.
[2025-02-09 08:05:53,076][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:05:53,182][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:05:53,204][root][INFO] - Image embeddings computed.
[2025-02-09 08:05:57,378][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:05:57,489][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:05:57,533][root][INFO] - Image embeddings computed.
[2025-02-09 08:06:01,693][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:06:01,825][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:06:01,846][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 13
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 08:08:08,273][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:08:08,396][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:08:08,418][root][INFO] - Image embeddings computed.
[2025-02-09 08:08:24,993][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:08:25,099][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:08:25,121][root][INFO] - Image embeddings computed.
[2025-02-09 08:08:29,302][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:08:29,402][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:08:29,423][root][INFO] - Image embeddings computed.
[2025-02-09 08:08:33,605][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:08:33,706][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:08:33,727][root][INFO] - Image embeddings computed.
[2025-02-09 08:08:37,882][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:08:37,984][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:08:38,005][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 16
Lang Goal: pack all the nintendo cartridge objects in the brown box
Total Reward: 1.000 | Done: True

Mean: 0.5156535345088944 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 36/50
[2025-02-09 08:10:58,737][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:10:58,862][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:10:58,883][root][INFO] - Image embeddings computed.
[2025-02-09 08:11:15,824][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:11:15,923][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:11:15,945][root][INFO] - Image embeddings computed.
[2025-02-09 08:11:20,141][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:11:20,234][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:11:20,255][root][INFO] - Image embeddings computed.
[2025-02-09 08:11:24,430][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:11:24,523][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:11:24,545][root][INFO] - Image embeddings computed.
[2025-02-09 08:11:28,689][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:11:28,782][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:11:28,803][root][INFO] - Image embeddings computed.
The number of original masks: 35
The number of filtered masks: 23
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.842 | Done: False

[2025-02-09 08:13:37,851][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:13:37,949][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:13:37,970][root][INFO] - Image embeddings computed.
[2025-02-09 08:13:54,464][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:13:54,569][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:13:54,591][root][INFO] - Image embeddings computed.
[2025-02-09 08:13:58,751][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:13:58,888][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:13:58,909][root][INFO] - Image embeddings computed.
[2025-02-09 08:14:03,085][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:14:03,184][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:14:03,206][root][INFO] - Image embeddings computed.
[2025-02-09 08:14:07,348][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:14:07,441][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:14:07,475][root][INFO] - Image embeddings computed.
The number of original masks: 32
The number of filtered masks: 23
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.842 | Done: False

[2025-02-09 08:16:17,110][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:16:17,214][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:16:17,235][root][INFO] - Image embeddings computed.
[2025-02-09 08:16:33,716][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:16:33,835][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:16:33,856][root][INFO] - Image embeddings computed.
[2025-02-09 08:16:38,008][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:16:38,101][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:16:38,123][root][INFO] - Image embeddings computed.
[2025-02-09 08:16:42,290][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:16:42,383][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:16:42,410][root][INFO] - Image embeddings computed.
[2025-02-09 08:16:46,560][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:16:46,684][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:16:46,707][root][INFO] - Image embeddings computed.
The number of original masks: 38
The number of filtered masks: 25
Lang Goal: pack all the green and white striped towel objects in the brown box
Total Reward: 0.842 | Done: False

Mean: 0.5247216380824777 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 37/50
[2025-02-09 08:19:04,698][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:19:04,811][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:19:04,832][root][INFO] - Image embeddings computed.
[2025-02-09 08:19:21,394][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:19:21,520][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:19:21,541][root][INFO] - Image embeddings computed.
[2025-02-09 08:19:25,721][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:19:25,831][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:19:25,852][root][INFO] - Image embeddings computed.
[2025-02-09 08:19:30,036][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:19:30,129][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:19:30,151][root][INFO] - Image embeddings computed.
[2025-02-09 08:19:34,341][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:19:34,440][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:19:34,461][root][INFO] - Image embeddings computed.
The number of original masks: 19
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 08:21:43,157][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:21:43,266][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:21:43,287][root][INFO] - Image embeddings computed.
[2025-02-09 08:21:59,801][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:21:59,929][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:21:59,950][root][INFO] - Image embeddings computed.
[2025-02-09 08:22:04,107][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:22:04,201][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:22:04,223][root][INFO] - Image embeddings computed.
[2025-02-09 08:22:08,401][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:22:08,542][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:22:08,563][root][INFO] - Image embeddings computed.
[2025-02-09 08:22:12,754][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:22:12,847][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:22:12,869][root][INFO] - Image embeddings computed.
The number of original masks: 14
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

[2025-02-09 08:24:21,248][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:24:21,351][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:24:21,372][root][INFO] - Image embeddings computed.
[2025-02-09 08:24:37,695][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:24:37,788][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:24:37,809][root][INFO] - Image embeddings computed.
[2025-02-09 08:24:41,981][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:24:42,163][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:24:42,184][root][INFO] - Image embeddings computed.
[2025-02-09 08:24:46,369][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:24:46,462][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:24:46,483][root][INFO] - Image embeddings computed.
[2025-02-09 08:24:50,666][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:24:50,758][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:24:50,779][root][INFO] - Image embeddings computed.
The number of original masks: 17
The number of filtered masks: 8
Lang Goal: pack all the bull figure objects in the brown box
Total Reward: 0.500 | Done: False

Mean: 0.5240534857018703 | Task: packing-seen-google-objects-group | Ckpt: steps=00120-val_loss=0.00019314.ckpt
Test: 38/50
[2025-02-09 08:27:11,780][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:27:11,897][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:27:11,917][root][INFO] - Image embeddings computed.
[2025-02-09 08:27:28,622][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:27:28,715][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:27:28,735][root][INFO] - Image embeddings computed.
[2025-02-09 08:27:32,908][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:27:33,000][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:27:33,020][root][INFO] - Image embeddings computed.
[2025-02-09 08:27:37,217][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:27:37,310][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:27:37,331][root][INFO] - Image embeddings computed.
[2025-02-09 08:27:41,488][root][INFO] - For numpy array image, we assume (HxWxC) format
[2025-02-09 08:27:41,596][root][INFO] - Computing image embeddings for the provided image...
[2025-02-09 08:27:41,617][root][INFO] - Image embeddings computed.
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd: error: *** JOB 996622 ON gpu015 CANCELLED AT 2025-02-09T08:28:55 DUE TO TIME LIMIT ***
slurmstepd: error: *** STEP 996622.0 ON gpu015 CANCELLED AT 2025-02-09T08:28:55 DUE TO TIME LIMIT ***
